//start_unprocessed_text
/*string g_sSubMenu = "ZapLeash";
string g_sParentMenu = "";
list g_lMenuIDs;  
integer g_iMenuStride = 3;


key g_kWearer; 
string g_sWearer;



integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_EVERYONE = 504;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;

integer MENUNAME_REQUEST = 3000;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

string UPMENU = "BACK";

string g_sGlobalToken = "global_";
string  g_sNoGoToken="zapleash_";
string TOKEN_ZAP_SEVERITY="itensity";
string TOKEN_ZAP_RANGE="range";



integer g_iZapSeverity=0;
integer g_iZapRange=2;
integer g_iLinkedTo;
key g_kLinkedTo;
string g_sLinkedTo;

integer submenu;

string TIME_MOOD;

list g_kSCANS;
list g_sSCANS;

integer SCANS_iNum;
key SCANS_kID;
integer SCANS_SELECT_ROLE;
key SCANS_SELECT_KEY;
string SCANS_SELECT_NAME;

list g_lTrustGroup;
list g_lSpecialGroup;

integer mood;
integer g_iWait;
integer g_iSilence;

key g_kBeep="510c733e-cb27-1063-05a2-34f080eed152";
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="ZAPLEASH";
string sStr_denied="DENIED silly person. (ZapLeash)";

integer iAccess=1;
string g_sAuthToken = "auth_";
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess==3){
        return TRUE;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kCmdGiver);
    return FALSE;
}

initialize(){
    g_kWearer=llGetOwner();
    g_sWearer=llGetUsername(g_kWearer);
    TIME_MOOD="";
    submenu=0;
    g_iWait=0;
    if(g_iZapRange<2){
        g_iZapRange=2;
    }
    if(g_iZapSeverity<0||g_iZapSeverity>2){
        g_iZapRange=0;
    }
}


integer group(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    string group=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, 0) ,[OBJECT_GROUP]);
     
    integer length = llGetListLength(g_lTrustGroup);
    integer found = llListFindList(g_lTrustGroup, [group]);
    if (length>0 && found != -1){
        return 2;
    }
    
    length = llGetListLength(g_lSpecialGroup);
    found = llListFindList(g_lSpecialGroup, [group]);
    if (length>0 && found != -1){
        return 1;
    }
    
    return 0;
}
UserCommand(integer iNum, string sStr, key kID) { 
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,zapleash,17,12,22,115");
    }else
    if (llToLower(sStr) == "menu "+llToLower(g_sSubMenu) || llToLower(sStr) == llToLower(g_sSubMenu)){
        submenu=1;
        CuffsMenu(kID, iNum);
    }  
    else if (llSubStringIndex(sStr,llToLower(g_sSubMenu))==0) {
        submenu=0;
        CuffsCommand(iNum,llGetSubString(sStr,llStringLength(g_sSubMenu)+1,-1), kID);
    }
}
string Objectscan(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    integer index=0;
    if((string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_GROUP])!="ce9356ec-47b1-5690-d759-04d8c8921476"){
        return llGetDisplayName(kID);
    }
    while(index<numOfAttachments){
        string name=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_NAME]);
        string creator=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_CREATOR]);
        if ((llSubStringIndex(name,"P-6") >= 0)&&llStringLength(name)==7&&creator=="2a9164eb-f402-4319-b7b3-92b09f9b69aa"){
            return name;
        }
        ++index;
    }
    return llGetDisplayName(kID);
}
string NameURI(key kID){
   if (llGetAgentSize(kID))
        return "[secondlife:/|/|/app/agent/"+(string)kID+"/inspect "+llGetDisplayName(kID)+"]";
    else
        return "secondlife:/|/|/app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
}
Dialog(key kRCPT, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string iMenuType) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kRCPT + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);
    integer iIndex = llListFindList(g_lMenuIDs, [kRCPT]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kRCPT, kMenuID, iMenuType], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kRCPT, kMenuID, iMenuType];
}
string sStr_WEARERNAMES="%WEARERNAMES%";
CuffsMenu(key kID, integer iAuth) {
    string sPrompt = "-";
    list lMyButtons=["-"];
   
   if(submenu==1){
        sPrompt = "ZapLeash\nLinked to:";
        if(g_iLinkedTo){
            sPrompt+=g_sLinkedTo+" ("+NameURI(g_kLinkedTo)+")\n";
        }else{
            sPrompt+="Nobody";
        }
       
        
        
        sPrompt+="\nRange"+(string)g_iZapRange;
        sPrompt+="\nIntensity:";
        if(g_iZapSeverity==0){
            sPrompt+="Zap";
        }else
        if(g_iZapSeverity==0){
            sPrompt+="Punish";
        }else
        if(g_iZapSeverity==0){
            sPrompt+="Stun";
        }
        
        if(g_iLinkedTo==1){
            lMyButtons=["Unlink"];
        }else{
            lMyButtons=["Link"];
        }
        if(iAuth<=CMD_TRUSTED||g_kWearer==llGetOwnerKey(kID)){
            lMyButtons+=["Intensity","Range"];     
        }
        if(g_kWearer==llGetOwnerKey(kID)){
            if(g_iSilence){
             lMyButtons+=["Silence ☒"]; 
            }else{
                 lMyButtons+=["Silence ☐"]; 
            }
            
        }else{
            string sNoAccess="\nYou have no right to change "+sStr_WEARERNAMES+" bell.";
            if(iAuth==CMD_TRUSTED&&iAccess<1){
                sPrompt += sNoAccess;
                lMyButtons=["-","-"];
            }
            if(iAuth==CMD_GROUP&&iAccess<2){
                sPrompt += sNoAccess;
                lMyButtons=["-","-"];
            }
            if(iAuth==CMD_EVERYONE&&iAccess<3){
                sPrompt += sNoAccess;
                lMyButtons=["-","-"];
            }
        }
    }else
    if(submenu==2){
        
        if(g_kWearer==llGetOwnerKey(kID)){
            sPrompt = "Intensity\nPain is a good motivational tool.\nDont you agree "+sStr_WEARERNAMES+"!";
        }else
        if(iAuth<=CMD_TRUSTED){
            sPrompt = "Intensity\nShow this lazy ass, who is in charge!";
        }else if(iAuth==CMD_GROUP){
           sPrompt = "Intensity\nOff your paw, inmate!";
        }else {
           sPrompt = "Intensity\nOff your paw, stranger danger";
        }
        
        if(g_iZapSeverity==0){
        lMyButtons=["☒ Zap"];
        }else{
            lMyButtons=["☐ Zap"];
        }
        if(g_iZapSeverity==1){
            lMyButtons+=["☒ Punish"];
        }else{
            lMyButtons+=["☐ Punish"];
        }
        if(g_iZapSeverity==2){
            lMyButtons+=["☒ Stun"];
        }else{
            lMyButtons+=["☐ Stun"];
        }
        
    }else
    if(submenu==3){
        
        sPrompt = "Scanner\n";
        lMyButtons=["Staffs","Inmates"];
    }
    if(submenu==4){
        
        sPrompt = "Scanner\n";
        if(SCANS_SELECT_ROLE==1){
            sPrompt+="Inmates in range:";
        }
        if(SCANS_SELECT_ROLE==2){
            sPrompt+="Staff range:";
        }
        lMyButtons=g_sSCANS;
        if(llGetListLength(lMyButtons)<=0){
            lMyButtons=["-"];
            sPrompt="Nobody to show.";
        }
    }
    if(submenu==5){
        
        if(g_kWearer==llGetOwnerKey(kID)){
            sPrompt = "Range\nPain is a good motivational tool. Dont you agree "+sStr_WEARERNAMES+"!";
        }else
        if(iAuth<=CMD_TRUSTED){
            sPrompt = "Range\nShow this lazy ass, who is in charge!";
        }else if(iAuth==CMD_GROUP){
           sPrompt = "Range\nOff your paw, inmate!";
        }else {
           sPrompt = "Range\nOff your paw, stranger danger!";
        }
        

        if(g_iZapRange==2){
            lMyButtons+=["☒ 2"];
        }else{
            lMyButtons+=["☐ 2"];
        }
        if(g_iZapRange==3){
            lMyButtons+=["☒ 3"];
        }else{
            lMyButtons+=["☐ 3"];
        }
        if(g_iZapRange==4){
            lMyButtons+=["☒ 4"];
        }else{
            lMyButtons+=["☐ 4"];
        }
        if(g_iZapRange==5){
            lMyButtons+=["☒ 5"];
        }else{
            lMyButtons+=["☐ 5"];
        }
        if(g_iZapRange==6){
            lMyButtons+=["☒ 6"];
        }else{
            lMyButtons+=["☐ 6"];
        }
        if(g_iZapRange==7){
            lMyButtons+=["☒ 7"];
        }else{
            lMyButtons+=["☐ 7"];
        }
    }
    if(1<=mood&&(g_kWearer==llGetOwnerKey(kID)||iAuth==CMD_GROUP||iAuth==CMD_EVERYONE)){
        sPrompt+="\n(From rp speaking, unauthorized persons (inmates, non prison staffs) should not be able to zap the inmate.)";
    }
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
Link(key kID, key kValue, string sValue2){
    if(mood<=1){
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Cannot link do to invalid mood setting!",kID);
        if(kID!=kValue){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Cannot link do to invalid mood setting!",kValue);    
        }
        UnLink();
        return;
    }
    g_kLinkedTo =kValue;
    g_sLinkedTo=sValue2;
    g_iLinkedTo=1;
    llSetTimerEvent(5.0);
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",link,"+(string)g_kLinkedTo);
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+" is proxy linked to you. They cant go to far away from you without getting punished.",g_kLinkedTo);
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your proxy linked to "+NameURI(g_kLinkedTo)+" You cant go to far away from them without getting punished. Got it, inmate?!",g_kWearer);
    if(kID!=kValue){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+" is proxy linked to "+NameURI(g_kLinkedTo)+" They can't go to far away from them without getting punished. Good, job!",kID);
    }
}
UnLink(){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",unlink,"+(string)g_kLinkedTo);
    g_kLinkedTo =NULL_KEY;
    g_sLinkedTo="";
    g_iLinkedTo=0;
    llSetTimerEvent(0.0);
}
CuffsCommand(integer iNum, string sStr, key kID){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    string sValue2 = llList2String(lParams, 2);
    lParams=[];

    if(llToLower(sToken)=="silence"){
        if (iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kID);
            return;
        }
        if(sValue=="☐"||sValue=="1"){
            g_iSilence=1;
        }else
        if(sValue=="☒"||sValue=="0"){
            g_iSilence=0;
        }else
        if(sValue==""){
            g_iSilence=!g_iSilence;
        }
        if(submenu==1){
            CuffsMenu(kID, iNum);
        }
    }else
    if(CheckCommandAuth(kID, iNum)==0){
        return;
    }
    if(llToLower(sToken)=="link"){
        if(submenu==1){
            submenu=3;
            CuffsMenu(kID, iNum);
        }else{
            if(sValue==""||(key)sValue==NULL_KEY||sValue2==""||sValue==g_kWearer){
               UnLink();
            }else{
                Link(kID,sValue,sValue2);
            }
        }
        
    }else
    if(llToLower(sToken)=="unlink"){
        if(g_kLinkedTo!=NULL_KEY){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+" is unlinked from you.",g_kLinkedTo);
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your uninked from "+NameURI(g_kLinkedTo)+" You're free to walks away from them, if you can.",g_kWearer);
        }
        UnLink();
        if(submenu==1){
            CuffsMenu(kID, iNum);
        }
    }else
    if(llToLower(sToken)=="staffs"){
        SCANS_SELECT_ROLE=2;
        SCANS_iNum=iNum;
        SCANS_kID=kID;
        llSensor("", NULL_KEY, AGENT, 10.0, PI);
    }else
    if(llToLower(sToken)=="inmates"){
        SCANS_SELECT_ROLE=1;
        SCANS_iNum=iNum;
        SCANS_kID=kID;
        llSensor("", NULL_KEY, AGENT, 10.0, PI);
        
    }else
    if(submenu==4){
        integer length = llGetListLength(g_sSCANS);
        integer found = llListFindList(g_sSCANS, [sToken]);
        if (length>0 && ~found){
            Link(kID,llList2Key(g_kSCANS,found),llList2String(g_sSCANS,found));
            submenu=1;
            CuffsMenu(kID, iNum);
        }else{
            UnLink();
            CuffsMenu(kID, iNum);
        }
    }else
    if(llToLower(sToken)=="itensity"||llToLower(sToken)=="intensity"){
        if(llToLower(sValue)=="zap"){
            g_iZapSeverity=0;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
        }else
        if(llToLower(sValue)=="stun"){
            g_iZapSeverity=2;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
        }else
        if(llToLower(sValue)=="punish"){
            g_iZapSeverity=1;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
        }else{
            submenu=2;
            CuffsMenu(kID, iNum);
        }
    }else
    if(submenu==2){
        if(llToLower(sToken)=="☐"){
            if(llToLower(sValue)=="zap"){
                g_iZapSeverity=0;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                CuffsMenu(kID, iNum);
            }
            if(llToLower(sValue)=="stun"){
                g_iZapSeverity=2;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                CuffsMenu(kID, iNum);
            }
            if(llToLower(sValue)=="punish"){
                g_iZapSeverity=1;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                CuffsMenu(kID, iNum);
            }
        }else{
            CuffsMenu(kID, iNum);
        }
    }
    else
    if(llToLower(sToken)=="range"){
        if(sValue!=""){
            integer number=(integer)llToLower(sValue);
            if(2<=number&&number<=7){
                g_iZapRange=number;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
            }
        }else{
            submenu=5;
            CuffsMenu(kID, iNum);
        }
    }else
    if(submenu==5){
        if(llToLower(sToken)=="☐"){
            integer number=(integer)llToLower(sValue);
            if(2<=number&&number<=7){
                g_iZapRange=number;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
            }
             CuffsMenu(kID, iNum);
        }else{
            CuffsMenu(kID, iNum);
        }
    }
    else{
        if(submenu>0){
            CuffsMenu(kID, iNum);
        }
    }

        
}
default {
    on_rez(integer param) {
       initialize();   
    }

    state_entry() {
       
       
       initialize();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == MENUNAME_REQUEST && sStr == g_sParentMenu){
             
        }  
        else if (iNum >= CMD_OWNER && iNum <= CMD_EVERYONE)UserCommand(iNum, sStr, kID);
        else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAV = llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                submenu=(integer)sMenuType;
                if (sMessage == UPMENU) {
                    if(submenu>1){
                        submenu=1;
                        CuffsMenu(kAV,iAuth);
                    }else{
                        submenu=0;
                        llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        return;
                    }
                }else{
                    CuffsCommand(iAuth,sMessage,kAV);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        } else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (llSubStringIndex(sToken,g_sNoGoToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sNoGoToken),-1);
                
                if (sToken ==TOKEN_ZAP_SEVERITY){
                    g_iZapSeverity = (integer)sValue;
                }
                else if (sToken ==TOKEN_ZAP_RANGE){
                    g_iZapRange = (integer)sValue;
                }
                else if (sToken =="beep"){
                    g_kBeep = (key)sValue;
                }
            }else if (llSubStringIndex(sToken,g_sAuthToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sAuthToken),-1);
                
                if (sToken =="trustgroup") {g_lTrustGroup = llParseString2List(sValue, [","], [""]); }
                else if (sToken =="specialgroup") {g_lSpecialGroup = llParseString2List(sValue, [","], [""]); }    
                else if (sToken =="iaccess") iAccess = (integer)sValue;            
            }
            else if (sToken == g_sGlobalToken+"moodvalue"){
                mood=(integer)sValue;
            }
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }

    changed(integer iChange) {
        
        if (iChange & CHANGED_OWNER) llResetScript();
    }
    timer() {
        if(g_iLinkedTo==0||g_kLinkedTo==NULL_KEY){
            llSetTimerEvent(0.0);
            return;
        }
        if(mood<=0){
            return;
        }
        if(0<g_iWait){
            g_iWait--;
            return;
        }
        vector currentPos = llGetPos();
        integer distance=llRound(llVecDist(currentPos,llList2Vector(llGetObjectDetails(g_kLinkedTo, [OBJECT_POS]), 0)));
        if(g_iZapRange<=distance)
        {
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",tofar,"+(string)g_kLinkedTo);
            if(g_iZapSeverity == 0) {
                g_iWait=5;
                if(g_iSilence){
                        llMessageLinked(LINK_SET,CMD_TRUSTED,"punish silence 0",NULL_KEY);
                }else {
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish module 0 0|"+sStr_WEARERNAMES+" Proximity sensor| Gets a warning do to getting to far away from "+g_sLinkedTo+"!",NULL_KEY);
                }
                

            }else
            if(g_iZapSeverity  == 1) {
                g_iWait=5;
                if(g_iSilence){
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish silence 1",NULL_KEY);
                }else{
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish module 1 0|"+sStr_WEARERNAMES+" Proximity sensor| Gets punished do to getting to far away from "+g_sLinkedTo+"!",NULL_KEY);
                }
                
            }else
            if(g_iZapSeverity  == 2){
                g_iWait=5;
                if(g_iSilence){
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish silence 2",NULL_KEY);
                }else{
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish module 2 0|"+sStr_WEARERNAMES+" Proximity sensor| Gets stunned do to getting to far away from "+g_sLinkedTo+"!",NULL_KEY);
                }
                
            }    
        }else if(g_iZapRange<=distance+1)
        {
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",onedge,"+(string)g_kLinkedTo);
            if(g_iSilence==0){
                 llPlaySound(g_kBeep, 1.0);
            }
          
        }
    }
    sensor( integer detected )
    {
        
        SCANS_SELECT_KEY=NULL_KEY;
        SCANS_SELECT_NAME="";
        list keys=[];
        g_sSCANS=[];
        g_kSCANS=[];
        
        while(detected--)
        {
            key id=llDetectedKey(detected);
            if(id!=g_kWearer){
                integer role=group(id);
                
                if(SCANS_SELECT_ROLE==2&&role==SCANS_SELECT_ROLE){

                    string name=llGetDisplayName(id);
                    list lParams = llParseString2List(name, ["=","_",","," "], []);
                    name = llList2String(lParams, 0);
                    g_sSCANS+=[name];
                    g_kSCANS+=[id];
                }else
                if(SCANS_SELECT_ROLE==1&&role==SCANS_SELECT_ROLE){
                    string name=Objectscan(id);
                    if(name!="0"){
                        g_sSCANS+=[name];
                        g_kSCANS+=[id];
                    }
                
                }
            }  
        }
        
        if(0<llGetListLength(g_kSCANS)){
            submenu=4;
            
            CuffsMenu(SCANS_kID,SCANS_iNum);
        }else{
            
        }
    }
    no_sensor(){
        SCANS_SELECT_ROLE=0;
        SCANS_SELECT_KEY=NULL_KEY;
        SCANS_SELECT_NAME="";
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Nobody detected!",g_kWearer);
        
        
    }
}

*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 12/22/2017 05:19:02
//mono




string g_sSubMenu = "ZapLeash";
string g_sParentMenu = "";
list g_lMenuIDs;  
integer g_iMenuStride = 3;


key g_kWearer; 
string g_sWearer;



integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_EVERYONE = 504;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;

integer MENUNAME_REQUEST = 3000;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

string UPMENU = "BACK";

string g_sGlobalToken = "global_";
string  g_sNoGoToken="zapleash_";
string TOKEN_ZAP_SEVERITY="itensity";
string TOKEN_ZAP_RANGE="range";



integer g_iZapSeverity=0;
integer g_iZapRange=2;
integer g_iLinkedTo;
key g_kLinkedTo;
string g_sLinkedTo;

integer submenu;

string TIME_MOOD;

list g_kSCANS;
list g_sSCANS;

integer SCANS_iNum;
key SCANS_kID;
integer SCANS_SELECT_ROLE;
key SCANS_SELECT_KEY;
string SCANS_SELECT_NAME;

list g_lTrustGroup;
list g_lSpecialGroup;

integer mood;
integer g_iWait;
integer g_iSilence;

key g_kBeep="510c733e-cb27-1063-05a2-34f080eed152";
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="ZAPLEASH";
string sStr_denied="DENIED silly person. (ZapLeash)";

integer iAccess=1;
string g_sAuthToken = "auth_";
string sStr_WEARERNAMES="%WEARERNAMES%";
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess==3){
        return TRUE;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kCmdGiver);
    return FALSE;
}

initialize(){
    g_kWearer=llGetOwner();
    g_sWearer=llGetUsername(g_kWearer);
    TIME_MOOD="";
    submenu=0;
    g_iWait=0;
    if(g_iZapRange<2){
        g_iZapRange=2;
    }
    if(g_iZapSeverity<0||g_iZapSeverity>2){
        g_iZapRange=0;
    }
}


integer group(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    string group=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, 0) ,[OBJECT_GROUP]);
     
    integer length = llGetListLength(g_lTrustGroup);
    integer found = llListFindList(g_lTrustGroup, [group]);
    if (length>0 && found != -1){
        return 2;
    }
    
    length = llGetListLength(g_lSpecialGroup);
    found = llListFindList(g_lSpecialGroup, [group]);
    if (length>0 && found != -1){
        return 1;
    }
    
    return 0;
}
UserCommand(integer iNum, string sStr, key kID) { 
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,zapleash,17,12,22,115");
    }else
    if (llToLower(sStr) == "menu "+llToLower(g_sSubMenu) || llToLower(sStr) == llToLower(g_sSubMenu)){
        submenu=1;
        CuffsMenu(kID, iNum);
    }  
    else if (llSubStringIndex(sStr,llToLower(g_sSubMenu))==0) {
        submenu=0;
        CuffsCommand(iNum,llGetSubString(sStr,llStringLength(g_sSubMenu)+1,-1), kID);
    }
}
UnLink(){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",unlink,"+(string)g_kLinkedTo);
    g_kLinkedTo =NULL_KEY;
    g_sLinkedTo="";
    g_iLinkedTo=0;
    llSetTimerEvent(0.0);
}
string Objectscan(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    integer index=0;
    if((string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_GROUP])!="ce9356ec-47b1-5690-d759-04d8c8921476"){
        return llGetDisplayName(kID);
    }
    while(index<numOfAttachments){
        string name=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_NAME]);
        string creator=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_CREATOR]);
        if ((llSubStringIndex(name,"P-6") >= 0)&&llStringLength(name)==7&&creator=="2a9164eb-f402-4319-b7b3-92b09f9b69aa"){
            return name;
        }
        ++index;
    }
    return llGetDisplayName(kID);
}
string NameURI(key kID){
   if (llGetAgentSize(kID))
        return "[secondlife:///app/agent/"+(string)kID+"/inspect "+llGetDisplayName(kID)+"]";
    else
        return "secondlife:///app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
}
Link(key kID, key kValue, string sValue2){
    if(mood<=1){
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Cannot link do to invalid mood setting!",kID);
        if(kID!=kValue){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Cannot link do to invalid mood setting!",kValue);    
        }
        UnLink();
        return;
    }
    g_kLinkedTo =kValue;
    g_sLinkedTo=sValue2;
    g_iLinkedTo=1;
    llSetTimerEvent(5.0);
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",link,"+(string)g_kLinkedTo);
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+" is proxy linked to you. They cant go to far away from you without getting punished.",g_kLinkedTo);
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your proxy linked to "+NameURI(g_kLinkedTo)+" You cant go to far away from them without getting punished. Got it, inmate?!",g_kWearer);
    if(kID!=kValue){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+" is proxy linked to "+NameURI(g_kLinkedTo)+" They can't go to far away from them without getting punished. Good, job!",kID);
    }
}
Dialog(key kRCPT, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string iMenuType) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kRCPT + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);
    integer iIndex = llListFindList(g_lMenuIDs, [kRCPT]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kRCPT, kMenuID, iMenuType], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kRCPT, kMenuID, iMenuType];
}
CuffsMenu(key kID, integer iAuth) {
    string sPrompt = "-";
    list lMyButtons=["-"];
   
   if(submenu==1){
        sPrompt = "ZapLeash\nLinked to:";
        if(g_iLinkedTo){
            sPrompt+=g_sLinkedTo+" ("+NameURI(g_kLinkedTo)+")\n";
        }else{
            sPrompt+="Nobody";
        }
       
        
        
        sPrompt+="\nRange"+(string)g_iZapRange;
        sPrompt+="\nIntensity:";
        if(g_iZapSeverity==0){
            sPrompt+="Zap";
        }else
        if(g_iZapSeverity==0){
            sPrompt+="Punish";
        }else
        if(g_iZapSeverity==0){
            sPrompt+="Stun";
        }
        
        if(g_iLinkedTo==1){
            lMyButtons=["Unlink"];
        }else{
            lMyButtons=["Link"];
        }
        if(iAuth<=CMD_TRUSTED||g_kWearer==llGetOwnerKey(kID)){
            lMyButtons+=["Intensity","Range"];     
        }
        if(g_kWearer==llGetOwnerKey(kID)){
            if(g_iSilence){
             lMyButtons+=["Silence ☒"]; 
            }else{
                 lMyButtons+=["Silence ☐"]; 
            }
            
        }else{
            string sNoAccess="\nYou have no right to change "+sStr_WEARERNAMES+" bell.";
            if(iAuth==CMD_TRUSTED&&iAccess<1){
                sPrompt += sNoAccess;
                lMyButtons=["-","-"];
            }
            if(iAuth==CMD_GROUP&&iAccess<2){
                sPrompt += sNoAccess;
                lMyButtons=["-","-"];
            }
            if(iAuth==CMD_EVERYONE&&iAccess<3){
                sPrompt += sNoAccess;
                lMyButtons=["-","-"];
            }
        }
    }else
    if(submenu==2){
        
        if(g_kWearer==llGetOwnerKey(kID)){
            sPrompt = "Intensity\nPain is a good motivational tool.\nDont you agree "+sStr_WEARERNAMES+"!";
        }else
        if(iAuth<=CMD_TRUSTED){
            sPrompt = "Intensity\nShow this lazy ass, who is in charge!";
        }else if(iAuth==CMD_GROUP){
           sPrompt = "Intensity\nOff your paw, inmate!";
        }else {
           sPrompt = "Intensity\nOff your paw, stranger danger";
        }
        
        if(g_iZapSeverity==0){
        lMyButtons=["☒ Zap"];
        }else{
            lMyButtons=["☐ Zap"];
        }
        if(g_iZapSeverity==1){
            lMyButtons+=["☒ Punish"];
        }else{
            lMyButtons+=["☐ Punish"];
        }
        if(g_iZapSeverity==2){
            lMyButtons+=["☒ Stun"];
        }else{
            lMyButtons+=["☐ Stun"];
        }
        
    }else
    if(submenu==3){
        
        sPrompt = "Scanner\n";
        lMyButtons=["Staffs","Inmates"];
    }
    if(submenu==4){
        
        sPrompt = "Scanner\n";
        if(SCANS_SELECT_ROLE==1){
            sPrompt+="Inmates in range:";
        }
        if(SCANS_SELECT_ROLE==2){
            sPrompt+="Staff range:";
        }
        lMyButtons=g_sSCANS;
        if(llGetListLength(lMyButtons)<=0){
            lMyButtons=["-"];
            sPrompt="Nobody to show.";
        }
    }
    if(submenu==5){
        
        if(g_kWearer==llGetOwnerKey(kID)){
            sPrompt = "Range\nPain is a good motivational tool. Dont you agree "+sStr_WEARERNAMES+"!";
        }else
        if(iAuth<=CMD_TRUSTED){
            sPrompt = "Range\nShow this lazy ass, who is in charge!";
        }else if(iAuth==CMD_GROUP){
           sPrompt = "Range\nOff your paw, inmate!";
        }else {
           sPrompt = "Range\nOff your paw, stranger danger!";
        }
        

        if(g_iZapRange==2){
            lMyButtons+=["☒ 2"];
        }else{
            lMyButtons+=["☐ 2"];
        }
        if(g_iZapRange==3){
            lMyButtons+=["☒ 3"];
        }else{
            lMyButtons+=["☐ 3"];
        }
        if(g_iZapRange==4){
            lMyButtons+=["☒ 4"];
        }else{
            lMyButtons+=["☐ 4"];
        }
        if(g_iZapRange==5){
            lMyButtons+=["☒ 5"];
        }else{
            lMyButtons+=["☐ 5"];
        }
        if(g_iZapRange==6){
            lMyButtons+=["☒ 6"];
        }else{
            lMyButtons+=["☐ 6"];
        }
        if(g_iZapRange==7){
            lMyButtons+=["☒ 7"];
        }else{
            lMyButtons+=["☐ 7"];
        }
    }
    if(1<=mood&&(g_kWearer==llGetOwnerKey(kID)||iAuth==CMD_GROUP||iAuth==CMD_EVERYONE)){
        sPrompt+="\n(From rp speaking, unauthorized persons (inmates, non prison staffs) should not be able to zap the inmate.)";
    }
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
CuffsCommand(integer iNum, string sStr, key kID){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    string sValue2 = llList2String(lParams, 2);
    lParams=[];

    if(llToLower(sToken)=="silence"){
        if (iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kID);
            return;
        }
        if(sValue=="☐"||sValue=="1"){
            g_iSilence=1;
        }else
        if(sValue=="☒"||sValue=="0"){
            g_iSilence=0;
        }else
        if(sValue==""){
            g_iSilence=!g_iSilence;
        }
        if(submenu==1){
            CuffsMenu(kID, iNum);
        }
    }else
    if(CheckCommandAuth(kID, iNum)==0){
        return;
    }
    if(llToLower(sToken)=="link"){
        if(submenu==1){
            submenu=3;
            CuffsMenu(kID, iNum);
        }else{
            if(sValue==""||(key)sValue==NULL_KEY||sValue2==""||sValue==g_kWearer){
               UnLink();
            }else{
                Link(kID,sValue,sValue2);
            }
        }
        
    }else
    if(llToLower(sToken)=="unlink"){
        if(g_kLinkedTo!=NULL_KEY){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+" is unlinked from you.",g_kLinkedTo);
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your uninked from "+NameURI(g_kLinkedTo)+" You're free to walks away from them, if you can.",g_kWearer);
        }
        UnLink();
        if(submenu==1){
            CuffsMenu(kID, iNum);
        }
    }else
    if(llToLower(sToken)=="staffs"){
        SCANS_SELECT_ROLE=2;
        SCANS_iNum=iNum;
        SCANS_kID=kID;
        llSensor("", NULL_KEY, AGENT, 10.0, PI);
    }else
    if(llToLower(sToken)=="inmates"){
        SCANS_SELECT_ROLE=1;
        SCANS_iNum=iNum;
        SCANS_kID=kID;
        llSensor("", NULL_KEY, AGENT, 10.0, PI);
        
    }else
    if(submenu==4){
        integer length = llGetListLength(g_sSCANS);
        integer found = llListFindList(g_sSCANS, [sToken]);
        if (length>0 && ~found){
            Link(kID,llList2Key(g_kSCANS,found),llList2String(g_sSCANS,found));
            submenu=1;
            CuffsMenu(kID, iNum);
        }else{
            UnLink();
            CuffsMenu(kID, iNum);
        }
    }else
    if(llToLower(sToken)=="itensity"||llToLower(sToken)=="intensity"){
        if(llToLower(sValue)=="zap"){
            g_iZapSeverity=0;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
        }else
        if(llToLower(sValue)=="stun"){
            g_iZapSeverity=2;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
        }else
        if(llToLower(sValue)=="punish"){
            g_iZapSeverity=1;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
        }else{
            submenu=2;
            CuffsMenu(kID, iNum);
        }
    }else
    if(submenu==2){
        if(llToLower(sToken)=="☐"){
            if(llToLower(sValue)=="zap"){
                g_iZapSeverity=0;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                CuffsMenu(kID, iNum);
            }
            if(llToLower(sValue)=="stun"){
                g_iZapSeverity=2;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                CuffsMenu(kID, iNum);
            }
            if(llToLower(sValue)=="punish"){
                g_iZapSeverity=1;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_SEVERITY + "=" + (string)g_iZapSeverity, kID);
                CuffsMenu(kID, iNum);
            }
        }else{
            CuffsMenu(kID, iNum);
        }
    }
    else
    if(llToLower(sToken)=="range"){
        if(sValue!=""){
            integer number=(integer)llToLower(sValue);
            if(2<=number&&number<=7){
                g_iZapRange=number;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
            }
        }else{
            submenu=5;
            CuffsMenu(kID, iNum);
        }
    }else
    if(submenu==5){
        if(llToLower(sToken)=="☐"){
            integer number=(integer)llToLower(sValue);
            if(2<=number&&number<=7){
                g_iZapRange=number;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sNoGoToken+TOKEN_ZAP_RANGE + "=" + (string)g_iZapRange, kID);
            }
             CuffsMenu(kID, iNum);
        }else{
            CuffsMenu(kID, iNum);
        }
    }
    else{
        if(submenu>0){
            CuffsMenu(kID, iNum);
        }
    }

        
}
default {
    on_rez(integer param) {
       initialize();   
    }

    state_entry() {
       
       
       initialize();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == MENUNAME_REQUEST && sStr == g_sParentMenu){
             
        }  
        else if (iNum >= CMD_OWNER && iNum <= CMD_EVERYONE)UserCommand(iNum, sStr, kID);
        else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAV = llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                submenu=(integer)sMenuType;
                if (sMessage == UPMENU) {
                    if(submenu>1){
                        submenu=1;
                        CuffsMenu(kAV,iAuth);
                    }else{
                        submenu=0;
                        llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        return;
                    }
                }else{
                    CuffsCommand(iAuth,sMessage,kAV);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        } else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (llSubStringIndex(sToken,g_sNoGoToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sNoGoToken),-1);
                
                if (sToken ==TOKEN_ZAP_SEVERITY){
                    g_iZapSeverity = (integer)sValue;
                }
                else if (sToken ==TOKEN_ZAP_RANGE){
                    g_iZapRange = (integer)sValue;
                }
                else if (sToken =="beep"){
                    g_kBeep = (key)sValue;
                }
            }else if (llSubStringIndex(sToken,g_sAuthToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sAuthToken),-1);
                
                if (sToken =="trustgroup") {g_lTrustGroup = llParseString2List(sValue, [","], [""]); }
                else if (sToken =="specialgroup") {g_lSpecialGroup = llParseString2List(sValue, [","], [""]); }    
                else if (sToken =="iaccess") iAccess = (integer)sValue;            
            }
            else if (sToken == g_sGlobalToken+"moodvalue"){
                mood=(integer)sValue;
            }
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }

    changed(integer iChange) {
        
        if (iChange & CHANGED_OWNER) llResetScript();
    }
    timer() {
        if(g_iLinkedTo==0||g_kLinkedTo==NULL_KEY){
            llSetTimerEvent(0.0);
            return;
        }
        if(mood<=0){
            return;
        }
        if(0<g_iWait){
            g_iWait--;
            return;
        }
        vector currentPos = llGetPos();
        integer distance=llRound(llVecDist(currentPos,llList2Vector(llGetObjectDetails(g_kLinkedTo, [OBJECT_POS]), 0)));
        if(g_iZapRange<=distance)
        {
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",tofar,"+(string)g_kLinkedTo);
            if(g_iZapSeverity == 0) {
                g_iWait=5;
                if(g_iSilence){
                        llMessageLinked(LINK_SET,CMD_TRUSTED,"punish silence 0",NULL_KEY);
                }else {
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish module 0 0|"+sStr_WEARERNAMES+" Proximity sensor| Gets a warning do to getting to far away from "+g_sLinkedTo+"!",NULL_KEY);
                }
                

            }else
            if(g_iZapSeverity  == 1) {
                g_iWait=5;
                if(g_iSilence){
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish silence 1",NULL_KEY);
                }else{
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish module 1 0|"+sStr_WEARERNAMES+" Proximity sensor| Gets punished do to getting to far away from "+g_sLinkedTo+"!",NULL_KEY);
                }
                
            }else
            if(g_iZapSeverity  == 2){
                g_iWait=5;
                if(g_iSilence){
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish silence 2",NULL_KEY);
                }else{
                    llMessageLinked(LINK_SET,CMD_TRUSTED,"punish module 2 0|"+sStr_WEARERNAMES+" Proximity sensor| Gets stunned do to getting to far away from "+g_sLinkedTo+"!",NULL_KEY);
                }
                
            }    
        }else if(g_iZapRange<=distance+1)
        {
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",onedge,"+(string)g_kLinkedTo);
            if(g_iSilence==0){
                 llPlaySound(g_kBeep, 1.0);
            }
          
        }
    }
    sensor( integer detected )
    {
        
        SCANS_SELECT_KEY=NULL_KEY;
        SCANS_SELECT_NAME="";
        list keys=[];
        g_sSCANS=[];
        g_kSCANS=[];
        
        while(detected--)
        {
            key id=llDetectedKey(detected);
            if(id!=g_kWearer){
                integer role=group(id);
                
                if(SCANS_SELECT_ROLE==2&&role==SCANS_SELECT_ROLE){

                    string name=llGetDisplayName(id);
                    list lParams = llParseString2List(name, ["=","_",","," "], []);
                    name = llList2String(lParams, 0);
                    g_sSCANS+=[name];
                    g_kSCANS+=[id];
                }else
                if(SCANS_SELECT_ROLE==1&&role==SCANS_SELECT_ROLE){
                    string name=Objectscan(id);
                    if(name!="0"){
                        g_sSCANS+=[name];
                        g_kSCANS+=[id];
                    }
                
                }
            }  
        }
        
        if(0<llGetListLength(g_kSCANS)){
            submenu=4;
            
            CuffsMenu(SCANS_kID,SCANS_iNum);
        }else{
            
        }
    }
    no_sensor(){
        SCANS_SELECT_ROLE=0;
        SCANS_SELECT_KEY=NULL_KEY;
        SCANS_SELECT_NAME="";
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Nobody detected!",g_kWearer);
        
        
    }
}


