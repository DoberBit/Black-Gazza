//start_unprocessed_text
/*key g_kWearer; 

string g_sGlobalToken = "global_";
string g_sBGLockToken = "bglock_";
integer BG_LOCKED; 

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
integer CMD_SAFEWORD = 510;

integer NOTIFY = 1002;
integer SPECIAL_NOTIFY = 1005;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_RLV = 4;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;

integer g_iRLVOn=0;
integer RLV_CMD = 6000;
integer RLV_REFRESH = 6001;
integer RLV_CLEAR = 6002; 
integer RLV_OFF = 6100; 
integer RLV_ON = 6101; 

integer CHANNEL_HANDLER;
integer CHANNEL;
integer PASSWORD;
integer EXPIRED=1;
string TIMEMODE;
integer isAttached;
integer g_iLocked;
integer iMood;

integer g_iReady;
integer g_iAutoLock=1;
integer g_iWarden=1;
integer iRegion;
integer iGroupChange=1;

string sStry_autolock="autolock";
string sStr_warden="warden";
string sWelcomeGroup="49b2eab0-67e6-4d07-8df1-21d3e03069d0";
string sMainGroup="ce9356ec-47b1-5690-d759-04d8c8921476";
string sGuardGroup="b3947eb2-4151-bd6d-8c63-da967677bc69";
string sBlackGazzaRPStaff="900e67b1-5c64-7eb2-bdef-bc8c04582122";
string sOfficers="dd7ff140-9039-9116-4801-1f378af1a002";

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="BGLOCK";


string g_sParentMenu = "";
list g_lMenuIDs;  
integer g_iMenuStride = 3;
integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
string UPMENU = "OK";
integer submenu;
string sStr_WEARERNAMES="%WEARERNAMES%";
string NameURI(key kID)
{
    if (llGetAgentSize(kID))
        return "[secondlife:/|/|/app/agent/"+(string)kID+"/inspect "+llGetDisplayName(kID)+"]";
    else
        return "secondlife:/|/|/app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
}


ask()
{
    PASSWORD = (integer)llFrand(899999) + 100000;
    CHANNEL = (integer)llFrand(8999) + 1000;
    
    EXPIRED=0;
    CHANNEL_HANDLER = llListen(CHANNEL,"",g_kWearer,"");
    StatusUpdater("safeword,ask");
    llInstantMessage(g_kWearer,"Safeword: You have 60 seconds to type "+(string)PASSWORD+" on channel "+(string)CHANNEL+". Or just type in this:/"+(string)CHANNEL+" "+(string)PASSWORD);
    llSetTimerEvent(60);
}
Punish_message(key kID, integer iNum)
{
    if(kID==NULL_KEY)
        return;
    if(llGetOwnerKey(kID)!=g_kWearer){
        if(iNum==CMD_GROUP){
            llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar security|"+"Paw off, inmate! You're not allowed to touch "+sStr_WEARERNAMES+"'s BG Lock control.",llGetOwnerKey(kID));
            llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar security|"+NameURI(kID)+" tried to touch your BG Lock.",g_kWearer);
        }else{
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        }
    }else{
       llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar security|"+"Paw off, inmate! You're not allowed to touch your own collar BG Lock control.",g_kWearer);
      
    }
}
OwnerNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID!=g_kWearer){
        return;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
GuardNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID==g_kWearer){
        return;
    }
    StatusUpdater("warden,guard,not");
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
BGCommand(integer iAuth, string sStr, key kID, integer iMenu){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);  
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));
    if (sCommand=="unlock"){
        unlockRLV(iAuth,kID);
        if(iMenu){
            llMessageLinked(LINK_SET,iAuth,"menu",kID);
        }    
    }else
    if (sCommand=="lock"){
        lockRLV(iAuth,kID);
        if(iMenu){
           llMessageLinked(LINK_SET,iAuth,"menu",kID);
        }
    }else{
        if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
            return;
        }
        
        if (sCommand=="safeword"){
            ask();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="group"){
            Group();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="region"){
            GetRegion();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="regionunlock"){
            Region_Unlocker();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="ic"){
            if(g_iReady!=0&&g_iAutoLock!=0&&g_iLocked==0&&iMood>0&&isAttached){
                StatusUpdater("bg,ic");
                llMessageLinked(LINK_ROOT,RLV_REFRESH,"",NULL_KEY);
                llMessageLinked(LINK_ROOT,iAuth,"lock",kID);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="ooc"){
            if(g_iReady!=0&&g_iAutoLock!=0&&(g_iLocked==1||BG_LOCKED==1)&&isAttached){
                StatusUpdater("bg,ooc");
                BG_LOCKED = FALSE;
                RLV();
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=0" , "");
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=0", "");
                llMessageLinked(LINK_ROOT,iAuth,"unlock_s",kID);
                
                llMessageLinked(LINK_SET,CMD_SAFEWORD," ",g_kWearer);
                TIMEMODE="group";
                llSetTimerEvent(5.0);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand==sStry_autolock){
            if(sValue=="0"||sValue=="1"){
                g_iAutoLock=(integer)sValue;
            }else
            if(sValue=="info"){
                
            }else{
                g_iAutoLock=!g_iAutoLock;
            }
            StatusUpdater("autolock,"+(string)g_iAutoLock);
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + sStry_autolock+"="+(string)g_iAutoLock,"");
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + sStry_autolock+"="+(string)g_iAutoLock,"");
            string sStr_AutoLockON=" collar AutoLock Turned On. The collar now will lock or unlock if entering/exiting RP area or changing group.";
            string sStr_AutoLockOFF="collar AutoLock Turned Off. The collar will not lock or unlock if entering/exiting RP area or changing group.";
            if(g_iAutoLock){
                GuardNotification(sStr_WEARERNAMES+"'s"+sStr_AutoLockON,kID);
                OwnerNotification("Your"+sStr_AutoLockON,g_kWearer);
            }else{
                GuardNotification(sStr_WEARERNAMES+"'s"+sStr_AutoLockOFF,kID);
                OwnerNotification("Your"+sStr_AutoLockOFF,g_kWearer);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="groupchange"){
            if(sValue=="0"||sValue=="1"||sValue=="2"){
                iGroupChange=(integer)sValue;
            }
            StatusUpdater("groupchange,"+(string)iGroupChange);
            string sStr_Group="Collar Group Change Turned ";
            if(iGroupChange==1){
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sStr_Group+"Passive",kID);
            }else
            if(iGroupChange==2){
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sStr_Group+"Active",kID);
            }else{
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sStr_Group+"Off",kID);
            }
            
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }
    }       
}
AddException(string sGroup){
    if(g_iRLVOn==FALSE){
        return;
    }
    StatusUpdater("grup,add,"+sGroup);
    llOwnerSay("@sendim:"+sGroup+"=add");
    llOwnerSay("@recvim:"+sGroup+"=add");
    llOwnerSay("@startim:"+sGroup+"=add");
}
unlockRLV(integer iNum, key kID) 
{
    if (iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&(g_kWearer==llGetOwnerKey(kID)&&1<iMood)){
        Punish_message(kID,iNum);
    }else
    if(BG_LOCKED==TRUE){
        BG_LOCKED = FALSE;
        RLV();
        StatusUpdater("lock,0");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Black Gazza Lock is Off.",kID);
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=0" , "");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=0", "");
    }
}
lockRLV(integer iNum, key kID) 
{
    if (iNum>=CMD_GROUP&&g_kWearer!=llGetOwnerKey(kID))
    {
        Punish_message(kID,iNum);
    }else
    if(BG_LOCKED==FALSE){
        if(iMood<=0){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Black Gazza Lock can't be triggered while mood OOC.",kID);    
            return;
        }
        if(g_iLocked==0){
            StatusUpdater("lock,failsafe");
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar not locked. Cant trigger BG Lock.",kID);    
            return;
        }
        BG_LOCKED = TRUE;
        RLV();
        StatusUpdater("lock,1");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Black Gazza Lock is On.",kID);    
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=1" , "");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=1", "");
    }
}

initialize()
{
    BG_LOCKED = FALSE;
    iRegion=0;
    EXPIRED=1;
    g_iReady=0;
    RLV();
    llListenRemove(CHANNEL_HANDLER);
    submenu=0;
}

do_safeworld(key kID)
{
    if(g_iAutoLock){
        llMessageLinked(LINK_ROOT,500,"unlock_s",g_kWearer);
    }
    StatusUpdater("safeword,do");
    llSetTimerEvent(0.0);
    llMessageLinked(LINK_ROOT,500,"mood ooc",g_kWearer);
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"You just safeworded.",kID);
    llMessageLinked(LINK_SET,CMD_SAFEWORD," ",g_kWearer);
    llListenRemove(CHANNEL_HANDLER);
    unlockRLV(CMD_OWNER, kID);
    BG_LOCKED = FALSE;
    RLV();
}
 
 

UserCommand(integer iAuth, string sStr, key kID)
{
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,bglock,17,10,29,126");
    }
    integer iMenu=FALSE;
    
    if (llSubStringIndex(llToLower(sStr),"menu")==0) {
    sStr=llGetSubString(sStr,llStringLength("menu")+1,-1);
    iMenu=TRUE;
    }

    if (llSubStringIndex(llToLower(sStr),"bg")==0) {
        sStr=llGetSubString(sStr,llStringLength("bg")+1,-1);
        BGCommand(iAuth,sStr, kID,iMenu);      
    }else
    if (llSubStringIndex(llToLower(sStr),"safeword")==0) {
        BGCommand(iAuth,"safeword", kID,iMenu);      
    }else
    if (llSubStringIndex(llToLower(sStr),sStry_autolock)==0) {
        BGCommand(iAuth,sStry_autolock, kID,iMenu);      
    }

} 

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}
RemException(string sGroup){
    if(g_iRLVOn==FALSE){
        return;
    }
    StatusUpdater("group,rem,"+sGroup);
    
    llOwnerSay("@sendim:"+sGroup+"=rem");
    llOwnerSay("@recvim:"+sGroup+"=rem");
    llOwnerSay("@startim:"+sGroup+"=rem");
}
Region_Unlocker(){
    StatusUpdater("change_region");
    BG_LOCKED = FALSE;
    RLV();
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=0" , "");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=0", "");
    /|/llMessageLinked(LINK_ROOT,500,"unlock_s",g_kWearer);
    llMessageLinked(LINK_SET,CMD_SAFEWORD," ",g_kWearer);
}
RLV(){
    if(g_iReady==0){
        return;
    }
    if(BG_LOCKED==TRUE&&iMood>0&&g_iLocked==1&&isAttached){
        StatusUpdater("lock,rlv,1");
        string rlvLockCommand = "tplm=n,tploc=n,tplure=n,showworldmap=n,showminimap=n,showloc=n,fly=n," + 
                                "detach:BGVisitor=force,attach:BGInmate=force,";
        llMessageLinked(LINK_RLV, RLV_CMD, rlvLockCommand, "bglock");
    }else
    if(BG_LOCKED==FALSE||iMood==0||g_iLocked==0||isAttached==0){
        StatusUpdater("lock,rlv,0");
        string rlvUnlockCommand = "tplm=y,tploc=y,tplure=y,showworldmap=y,showminimap=y,showloc=y,fly=y," + 
            "attach:BGVisitor=force,detach:BGInmate=force,";
        llMessageLinked(LINK_RLV, RLV_CMD, rlvUnlockCommand, "bglock");       
    }
}
Group_Clear(){
    RemException(sWelcomeGroup);
    RemException(sMainGroup);
    RemException(sGuardGroup);
    RemException(sBlackGazzaRPStaff);
    RemException(sOfficers);
}
Group(){
    if(g_iRLVOn==FALSE){
        return;
    }
    if(iGroupChange==2){
        StatusUpdater("group,change,2");
        llMessageLinked(LINK_RLV, RLV_CMD, "setgroup:Black Gazza=force", "bglock");       
    }
    if(iRegion&&isAttached&&g_iReady){
        llMessageLinked(LINK_RLV, RLV_CMD, "setgroup=y", "bglock");
        AddException(sWelcomeGroup);
        AddException(sMainGroup);
        AddException(sGuardGroup);
        AddException(sBlackGazzaRPStaff);
        AddException(sOfficers);
        if(1<iMood&&iGroupChange){
            StatusUpdater("group,change,1");
            llMessageLinked(LINK_RLV, RLV_CMD, "setgroup:Black Gazza=force", "bglock");       
        }
    }else{
       Group_Clear(); 
    }
}
GetRegion(){
    if(g_iReady==0){
        TIMEMODE="init";
        llSetTimerEvent(2.0);
    }
    if(llGetRegionName()=="Black Gazza"){
        iRegion=TRUE;
    }else{
        iRegion=FALSE;
    }
    StatusUpdater("BG_region,"+(string)iRegion);
}
default
{
    state_entry()
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }
    on_rez(integer iParam)
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID)
    {
        if (iNum == RLV_OFF){
            Group_Clear();
            g_iRLVOn=FALSE;
        }else if (iNum == RLV_ON) {
            g_iRLVOn=TRUE;
        }else if (iNum == RLV_REFRESH){
            Group();
        }else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER){
            UserCommand(iNum,sStr,kID); 
        }else if (iNum == LINK_UPDATE){
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        }else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            
            if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                if (sToken == "locked") {
                    g_iLocked = (integer)sValue;
                    RLV();
                }
                else if (sToken == "moodvalue"){
                    iMood=(integer)sValue;
                    GetRegion();
                    Group();
                    RLV();
                    if(1<=iMood){
                        BGCommand(CMD_OWNER, "ic", g_kWearer, 0);
                    }else{
                        BGCommand(CMD_OWNER, "ooc", g_kWearer, 0);
                    }
                }
            }else
            if (llSubStringIndex(sToken,g_sBGLockToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sBGLockToken),-1);
                
                if (sToken==sStry_autolock){
                    g_iAutoLock=(integer)sValue;
                }
                else if (sToken==sStr_warden){
                    g_iWarden=(integer)sValue;
                }
            }else if (sStr == "settings=sent") {
                TIMEMODE="init";
                llSetTimerEvent(2.0);
                GetRegion();
                Group();
                RLV();
            }
        }else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAV = llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);                
                if (sMessage == UPMENU) {
                    if(submenu==0||submenu==1){
                        llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        return;
                    }
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        }
    }
    
    listen(integer l_channel, string name, key id, string message) 
    {
        if (l_channel == CHANNEL&&EXPIRED==0) {
            if ((integer)message == PASSWORD) {
                StatusUpdater("safeword,pass");
                do_safeworld(id);
            }else{
                StatusUpdater("safeword,incorect");
            }
        }
    }
    timer() 
    { 
        llSetTimerEvent(0);
        if(EXPIRED==0){
            EXPIRED=1;
            StatusUpdater("safeword,expired");
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Time has expired on your safeword password. Pleas try again.",g_kWearer);
            llListenRemove(CHANNEL_HANDLER);
        }
        if(TIMEMODE=="init"){
            if(isAttached==0){
                TIMEMODE="";g_iReady=0;    
            }else{
                TIMEMODE="";
                g_iReady=1;  
                GetRegion();
                Group();
                if(iRegion==FALSE&&g_iAutoLock&&g_iLocked){
                    Region_Unlocker();
                }
            }
        }else
        if(TIMEMODE=="group"){
            TIMEMODE="";
            GetRegion();
            Group();
        }
    }
    
    changed(integer iChange)
    {
        if (iChange & CHANGED_OWNER)
        {
            llResetScript();
        }
        if(iChange & CHANGED_REGION){
            GetRegion();
            Group();
            if(iRegion==FALSE&&g_iAutoLock&&g_iLocked){
                Region_Unlocker();
            }
            if(iRegion==FALSE&&1<=iMood){
                llMessageLinked(LINK_THIS,CMD_OWNER,"mood ooc",g_kWearer);
            }
        }
    }
}


*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 10/29/2017 02:19:09
//mono




key g_kWearer; 

string g_sGlobalToken = "global_";
string g_sBGLockToken = "bglock_";
integer BG_LOCKED; 

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
integer CMD_SAFEWORD = 510;

integer NOTIFY = 1002;
integer SPECIAL_NOTIFY = 1005;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_RLV = 4;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;

integer g_iRLVOn=0;
integer RLV_CMD = 6000;
integer RLV_REFRESH = 6001; 
integer RLV_OFF = 6100; 
integer RLV_ON = 6101; 

integer CHANNEL_HANDLER;
integer CHANNEL;
integer PASSWORD;
integer EXPIRED=1;
string TIMEMODE;
integer isAttached;
integer g_iLocked;
integer iMood;

integer g_iReady;
integer g_iAutoLock=1;
integer g_iWarden=1;
integer iRegion;
integer iGroupChange=1;

string sStry_autolock="autolock";
string sStr_warden="warden";
string sWelcomeGroup="49b2eab0-67e6-4d07-8df1-21d3e03069d0";
string sMainGroup="ce9356ec-47b1-5690-d759-04d8c8921476";
string sGuardGroup="b3947eb2-4151-bd6d-8c63-da967677bc69";
string sBlackGazzaRPStaff="900e67b1-5c64-7eb2-bdef-bc8c04582122";
string sOfficers="dd7ff140-9039-9116-4801-1f378af1a002";

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="BGLOCK";


string g_sParentMenu = "";
list g_lMenuIDs;  
integer g_iMenuStride = 3;
integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
string UPMENU = "OK";
integer submenu;
string sStr_WEARERNAMES="%WEARERNAMES%";
string NameURI(key kID)
{
    if (llGetAgentSize(kID))
        return "[secondlife:///app/agent/"+(string)kID+"/inspect "+llGetDisplayName(kID)+"]";
    else
        return "secondlife:///app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
}
Punish_message(key kID, integer iNum)
{
    if(kID==NULL_KEY)
        return;
    if(llGetOwnerKey(kID)!=g_kWearer){
        if(iNum==CMD_GROUP){
            llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar security|"+"Paw off, inmate! You're not allowed to touch "+sStr_WEARERNAMES+"'s BG Lock control.",llGetOwnerKey(kID));
            llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar security|"+NameURI(kID)+" tried to touch your BG Lock.",g_kWearer);
        }else{
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        }
    }else{
       llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar security|"+"Paw off, inmate! You're not allowed to touch your own collar BG Lock control.",g_kWearer);
      
    }
}
AddException(string sGroup){
    if(g_iRLVOn==FALSE){
        return;
    }
    StatusUpdater("grup,add,"+sGroup);
    llOwnerSay("@sendim:"+sGroup+"=add");
    llOwnerSay("@recvim:"+sGroup+"=add");
    llOwnerSay("@startim:"+sGroup+"=add");
}
unlockRLV(integer iNum, key kID) 
{
    if (iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&(g_kWearer==llGetOwnerKey(kID)&&1<iMood)){
        Punish_message(kID,iNum);
    }else
    if(BG_LOCKED==TRUE){
        BG_LOCKED = FALSE;
        RLV();
        StatusUpdater("lock,0");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Black Gazza Lock is Off.",kID);
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=0" , "");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=0", "");
    }
}
lockRLV(integer iNum, key kID) 
{
    if (iNum>=CMD_GROUP&&g_kWearer!=llGetOwnerKey(kID))
    {
        Punish_message(kID,iNum);
    }else
    if(BG_LOCKED==FALSE){
        if(iMood<=0){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Black Gazza Lock can't be triggered while mood OOC.",kID);    
            return;
        }
        if(g_iLocked==0){
            StatusUpdater("lock,failsafe");
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar not locked. Cant trigger BG Lock.",kID);    
            return;
        }
        BG_LOCKED = TRUE;
        RLV();
        StatusUpdater("lock,1");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Black Gazza Lock is On.",kID);    
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=1" , "");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=1", "");
    }
}

initialize()
{
    BG_LOCKED = FALSE;
    iRegion=0;
    EXPIRED=1;
    g_iReady=0;
    RLV();
    llListenRemove(CHANNEL_HANDLER);
    submenu=0;
}

do_safeworld(key kID)
{
    if(g_iAutoLock){
        llMessageLinked(LINK_ROOT,500,"unlock_s",g_kWearer);
    }
    StatusUpdater("safeword,do");
    llSetTimerEvent(0.0);
    llMessageLinked(LINK_ROOT,500,"mood ooc",g_kWearer);
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"You just safeworded.",kID);
    llMessageLinked(LINK_SET,CMD_SAFEWORD," ",g_kWearer);
    llListenRemove(CHANNEL_HANDLER);
    unlockRLV(CMD_OWNER, kID);
    BG_LOCKED = FALSE;
    RLV();
}


ask()
{
    PASSWORD = (integer)llFrand(899999) + 100000;
    CHANNEL = (integer)llFrand(8999) + 1000;
    
    EXPIRED=0;
    CHANNEL_HANDLER = llListen(CHANNEL,"",g_kWearer,"");
    StatusUpdater("safeword,ask");
    llInstantMessage(g_kWearer,"Safeword: You have 60 seconds to type "+(string)PASSWORD+" on channel "+(string)CHANNEL+". Or just type in this:/"+(string)CHANNEL+" "+(string)PASSWORD);
    llSetTimerEvent(60);
}
 
 

UserCommand(integer iAuth, string sStr, key kID)
{
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,bglock,17,10,29,126");
    }
    integer iMenu=FALSE;
    
    if (llSubStringIndex(llToLower(sStr),"menu")==0) {
    sStr=llGetSubString(sStr,llStringLength("menu")+1,-1);
    iMenu=TRUE;
    }

    if (llSubStringIndex(llToLower(sStr),"bg")==0) {
        sStr=llGetSubString(sStr,llStringLength("bg")+1,-1);
        BGCommand(iAuth,sStr, kID,iMenu);      
    }else
    if (llSubStringIndex(llToLower(sStr),"safeword")==0) {
        BGCommand(iAuth,"safeword", kID,iMenu);      
    }else
    if (llSubStringIndex(llToLower(sStr),sStry_autolock)==0) {
        BGCommand(iAuth,sStry_autolock, kID,iMenu);      
    }

} 

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}
RemException(string sGroup){
    if(g_iRLVOn==FALSE){
        return;
    }
    StatusUpdater("group,rem,"+sGroup);
    
    llOwnerSay("@sendim:"+sGroup+"=rem");
    llOwnerSay("@recvim:"+sGroup+"=rem");
    llOwnerSay("@startim:"+sGroup+"=rem");
}
Region_Unlocker(){
    StatusUpdater("change_region");
    BG_LOCKED = FALSE;
    RLV();
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=0" , "");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=0", "");
    
    llMessageLinked(LINK_SET,CMD_SAFEWORD," ",g_kWearer);
}
RLV(){
    if(g_iReady==0){
        return;
    }
    if(BG_LOCKED==TRUE&&iMood>0&&g_iLocked==1&&isAttached){
        StatusUpdater("lock,rlv,1");
        string rlvLockCommand = "tplm=n,tploc=n,tplure=n,showworldmap=n,showminimap=n,showloc=n,fly=n," + 
                                "detach:BGVisitor=force,attach:BGInmate=force,";
        llMessageLinked(LINK_RLV, RLV_CMD, rlvLockCommand, "bglock");
    }else
    if(BG_LOCKED==FALSE||iMood==0||g_iLocked==0||isAttached==0){
        StatusUpdater("lock,rlv,0");
        string rlvUnlockCommand = "tplm=y,tploc=y,tplure=y,showworldmap=y,showminimap=y,showloc=y,fly=y," + 
            "attach:BGVisitor=force,detach:BGInmate=force,";
        llMessageLinked(LINK_RLV, RLV_CMD, rlvUnlockCommand, "bglock");       
    }
}
OwnerNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID!=g_kWearer){
        return;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
GuardNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID==g_kWearer){
        return;
    }
    StatusUpdater("warden,guard,not");
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
Group_Clear(){
    RemException(sWelcomeGroup);
    RemException(sMainGroup);
    RemException(sGuardGroup);
    RemException(sBlackGazzaRPStaff);
    RemException(sOfficers);
}
Group(){
    if(g_iRLVOn==FALSE){
        return;
    }
    if(iGroupChange==2){
        StatusUpdater("group,change,2");
        llMessageLinked(LINK_RLV, RLV_CMD, "setgroup:Black Gazza=force", "bglock");       
    }
    if(iRegion&&isAttached&&g_iReady){
        llMessageLinked(LINK_RLV, RLV_CMD, "setgroup=y", "bglock");
        AddException(sWelcomeGroup);
        AddException(sMainGroup);
        AddException(sGuardGroup);
        AddException(sBlackGazzaRPStaff);
        AddException(sOfficers);
        if(1<iMood&&iGroupChange){
            StatusUpdater("group,change,1");
            llMessageLinked(LINK_RLV, RLV_CMD, "setgroup:Black Gazza=force", "bglock");       
        }
    }else{
       Group_Clear(); 
    }
}
GetRegion(){
    if(g_iReady==0){
        TIMEMODE="init";
        llSetTimerEvent(2.0);
    }
    if(llGetRegionName()=="Black Gazza"){
        iRegion=TRUE;
    }else{
        iRegion=FALSE;
    }
    StatusUpdater("BG_region,"+(string)iRegion);
}
BGCommand(integer iAuth, string sStr, key kID, integer iMenu){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);  
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));
    if (sCommand=="unlock"){
        unlockRLV(iAuth,kID);
        if(iMenu){
            llMessageLinked(LINK_SET,iAuth,"menu",kID);
        }    
    }else
    if (sCommand=="lock"){
        lockRLV(iAuth,kID);
        if(iMenu){
           llMessageLinked(LINK_SET,iAuth,"menu",kID);
        }
    }else{
        if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
            return;
        }
        
        if (sCommand=="safeword"){
            ask();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="group"){
            Group();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="region"){
            GetRegion();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="regionunlock"){
            Region_Unlocker();
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="ic"){
            if(g_iReady!=0&&g_iAutoLock!=0&&g_iLocked==0&&iMood>0&&isAttached){
                StatusUpdater("bg,ic");
                llMessageLinked(LINK_ROOT,RLV_REFRESH,"",NULL_KEY);
                llMessageLinked(LINK_ROOT,iAuth,"lock",kID);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="ooc"){
            if(g_iReady!=0&&g_iAutoLock!=0&&(g_iLocked==1||BG_LOCKED==1)&&isAttached){
                StatusUpdater("bg,ooc");
                BG_LOCKED = FALSE;
                RLV();
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + "bglock" + "=0" , "");
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + "bglock" + "=0", "");
                llMessageLinked(LINK_ROOT,iAuth,"unlock_s",kID);
                
                llMessageLinked(LINK_SET,CMD_SAFEWORD," ",g_kWearer);
                TIMEMODE="group";
                llSetTimerEvent(5.0);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand==sStry_autolock){
            if(sValue=="0"||sValue=="1"){
                g_iAutoLock=(integer)sValue;
            }else
            if(sValue=="info"){
                
            }else{
                g_iAutoLock=!g_iAutoLock;
            }
            StatusUpdater("autolock,"+(string)g_iAutoLock);
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + sStry_autolock+"="+(string)g_iAutoLock,"");
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + sStry_autolock+"="+(string)g_iAutoLock,"");
            string sStr_AutoLockON=" collar AutoLock Turned On. The collar now will lock or unlock if entering/exiting RP area or changing group.";
            string sStr_AutoLockOFF="collar AutoLock Turned Off. The collar will not lock or unlock if entering/exiting RP area or changing group.";
            if(g_iAutoLock){
                GuardNotification(sStr_WEARERNAMES+"'s"+sStr_AutoLockON,kID);
                OwnerNotification("Your"+sStr_AutoLockON,g_kWearer);
            }else{
                GuardNotification(sStr_WEARERNAMES+"'s"+sStr_AutoLockOFF,kID);
                OwnerNotification("Your"+sStr_AutoLockOFF,g_kWearer);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }else
        if (sCommand=="groupchange"){
            if(sValue=="0"||sValue=="1"||sValue=="2"){
                iGroupChange=(integer)sValue;
            }
            StatusUpdater("groupchange,"+(string)iGroupChange);
            string sStr_Group="Collar Group Change Turned ";
            if(iGroupChange==1){
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sStr_Group+"Passive",kID);
            }else
            if(iGroupChange==2){
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sStr_Group+"Active",kID);
            }else{
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sStr_Group+"Off",kID);
            }
            
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }
    }       
}
default
{
    state_entry()
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }
    on_rez(integer iParam)
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID)
    {
        if (iNum == RLV_OFF){
            Group_Clear();
            g_iRLVOn=FALSE;
        }else if (iNum == RLV_ON) {
            g_iRLVOn=TRUE;
        }else if (iNum == RLV_REFRESH){
            Group();
        }else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER){
            UserCommand(iNum,sStr,kID); 
        }else if (iNum == LINK_UPDATE){
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        }else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            
            if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                if (sToken == "locked") {
                    g_iLocked = (integer)sValue;
                    RLV();
                }
                else if (sToken == "moodvalue"){
                    iMood=(integer)sValue;
                    GetRegion();
                    Group();
                    RLV();
                    if(1<=iMood){
                        BGCommand(CMD_OWNER, "ic", g_kWearer, 0);
                    }else{
                        BGCommand(CMD_OWNER, "ooc", g_kWearer, 0);
                    }
                }
            }else
            if (llSubStringIndex(sToken,g_sBGLockToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sBGLockToken),-1);
                
                if (sToken==sStry_autolock){
                    g_iAutoLock=(integer)sValue;
                }
                else if (sToken==sStr_warden){
                    g_iWarden=(integer)sValue;
                }
            }else if (sStr == "settings=sent") {
                TIMEMODE="init";
                llSetTimerEvent(2.0);
                GetRegion();
                Group();
                RLV();
            }
        }else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAV = llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);                
                if (sMessage == UPMENU) {
                    if(submenu==0||submenu==1){
                        llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        return;
                    }
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        }
    }
    
    listen(integer l_channel, string name, key id, string message) 
    {
        if (l_channel == CHANNEL&&EXPIRED==0) {
            if ((integer)message == PASSWORD) {
                StatusUpdater("safeword,pass");
                do_safeworld(id);
            }else{
                StatusUpdater("safeword,incorect");
            }
        }
    }
    timer() 
    { 
        llSetTimerEvent(0);
        if(EXPIRED==0){
            EXPIRED=1;
            StatusUpdater("safeword,expired");
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Time has expired on your safeword password. Pleas try again.",g_kWearer);
            llListenRemove(CHANNEL_HANDLER);
        }
        if(TIMEMODE=="init"){
            if(isAttached==0){
                TIMEMODE="";g_iReady=0;    
            }else{
                TIMEMODE="";
                g_iReady=1;  
                GetRegion();
                Group();
                if(iRegion==FALSE&&g_iAutoLock&&g_iLocked){
                    Region_Unlocker();
                }
            }
        }else
        if(TIMEMODE=="group"){
            TIMEMODE="";
            GetRegion();
            Group();
        }
    }
    
    changed(integer iChange)
    {
        if (iChange & CHANGED_OWNER)
        {
            llResetScript();
        }
        if(iChange & CHANGED_REGION){
            GetRegion();
            Group();
            if(iRegion==FALSE&&g_iAutoLock&&g_iLocked){
                Region_Unlocker();
            }
            if(iRegion==FALSE&&1<=iMood){
                llMessageLinked(LINK_THIS,CMD_OWNER,"mood ooc",g_kWearer);
            }
        }
    }
}



