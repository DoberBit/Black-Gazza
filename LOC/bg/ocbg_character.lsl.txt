//start_unprocessed_text
/*string sCollarName="L-CON 3.2 (d10.2.5)";
string sVersion="3d10.2.5";
float g_fBGVersion=10.25;
string sLConVersion="10.2.5";
string sLConBuild="3.2";

string g_sSubMenu = "Character";
string g_sParentMenu = "";
list g_lMenuIDs;  
integer submenu;
integer g_iMenuStride = 3;

key g_kWearer; 

integer g_iSettingsSent;

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;
integer CMD_BLOCKED = 520;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_CHARACTER = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;
integer CHARACTER_LM_SETTING_SAVE = 2010;
integer CHARACTER_LM_SETTING_REQUEST = 2011;
integer CHARACTER_LM_SETTING_RESPONSE = 2012;
integer CHARACTER_LM_SETTING_DELETE = 2013;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

string UPMENU = "BACK";


string g_sGlobalToken = "global_";
string g_sInmateToken = "inmate_";
string g_sBGLockToken = "bglock_";
string g_sCharacterToken = "character_";
string g_sEnviromentToken = "enviroment_";
string g_sEscortToken = "escort_"; 
string g_sAuthToken = "auth_";
integer iAccess=1;
string TIME_MOOD;
string gListener_mood;

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
integer BGCOLLAR_CHANNEL = 667571900;

string g_sWearerName;
string g_sWearerNumber;
string g_sWearerCrime;
string g_sWearerSentence;
string g_sWearerType;
string g_sWearerType_Backup;
string g_sWearerThreat;
string g_sWearerThreat_Backup;
integer g_iWearerTypeValue;
integer g_iWearerThreatValue;
string g_sWearerMugshot;

integer g_iCharacterSlot_Save;
integer  g_iCharacterSlot_LastLoad;

string inmate_sWearerNumber;
string inmate_sWearerCrime;
string inmate_sWearerSentence;
integer mood;


string g_sContraband;
key Last_kID;
integer Last_iNUm;

string g_sSlotName1="1";
string g_sSlotName2="2";
string g_sSlotName3="3";
string g_sSlotName4="4";
string g_sSlotName5="5";
string g_sSlotName6="6";
integer g_iEscort=-1;
integer g_iLocked=0;
integer g_iEnviroment=1;
integer g_iAutoLock=1;
integer g_iTrustee;
string sInmateTypeNull="N/A";
string sInmateTypeOrange="General\nRobbers, muggers.";
string sInmateTypeBlue="Violent\nKillers & Troublemakers.\nBound and punished 24/7.";
string sInmateTypeGreen="Medical\nMedical staffs experimental test subject.";
string sInmateTypePink="Deviant\nSex toys for Guards enjoyment.";
string sInmateTypeWhite="Mental\nConfined to the Mental Ward.";
string sInmateTypeRed="Mechanic\nDrafted into Mechanics Guild service.";
string sInmateTypeBlack="";
string sInmateRisk0="N/A";
string sInmateRisk1="Low. No need to worry.";
string sInmateRisk2="Moderate. Still no need to worry.";
string sInmateRisk3="Known troublemaker. Yeah, have the stunner ready for them.";
string sInmateRisk4="Dangerous. Lock them up 24/7.";
string sInmateRisk5="Extreme. Fuck... D: ";
string sStr_InmateSentence="InmateSentence";
string sStr_InmateCrime="InmateCrime";
string sStr_InmateNumber="InmateNumber";
string sStr_InmateName="InmateName";
string sStr_InmateType="InmateType";
string sStr_InmateThreat="InmateThreat";
string sStr_InmateTypeV="InmateTypeV";
string sStr_InmateThreatV="InmateThreatV";
string sStr_Trustee="Trustee";
string sStr_InmateMugshot="Mugshot";
string sStr_CharacterInput="CharacterInput_";
string sStr_rebuild="rebuild";
string sStr_refresh="refresh";
string sStr_load="load";
string sStr_save="save";
string sStr_inmate="inmate";
string sStr_titles="titles";
string sStr_denied="DENIED silly person. (Character)";
string sStr_type="type";
string sStr_threat="threat";
string sStr_BlankButton="-";
string sStr_name="name";
string sStr_crime="crime";
string sStr_sentence="sentence";
string sStr_dtype="dtype";
string sStr_dthreat="dthreat";
string sStr_trusteepin="trustee";
string sStr_none="none";
string sStr_general="general";
string sStr_violent="violent";
string sStr_medical="medical";
string sStr_deviant="deviant";
string sStr_mental="mental";
string sStr_mechanic="mechanic";
string sStr_deathrow="deathrow";
string sStr_unknown="unknown";
string sStr_low="low";
string sStr_moderate="moderate";
string sStr_trouble="trouble";
string sStr_dangerous="dangerous";
string sStr_extreme="extreme";
string sStr_mugshot="mugshot";
string sStr_Custom="Custom";

initialize(){
    TIME_MOOD="";
    g_iSettingsSent=0;
    CharacterClear();
    
    g_iEscort=-1;
    submenu=0;
    mood=0;
    
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME, sCollarName]);
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_DESC,sVersion+","+(string)mood+","+(string)g_iWearerTypeValue+","+(string)g_iWearerThreatValue+","+(string)g_iLocked+","+(string)g_iEscort+","+(string)g_iEnviroment+","+(string)g_iAutoLock+","+(string)g_iTrustee+",0"]);
}

UserCommand(integer iNum, string sStr, key kID) { 
   
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,character(d),17,12,30,129");
    }else
    if (llToLower(sStr) == "menu "+llToLower(g_sSubMenu)||llToLower(sStr) == llToLower(g_sSubMenu))
        CharacterMenu(kID, iNum);
    else if (llSubStringIndex(llToLower(sStr),llToLower(g_sSubMenu))==0) {
        submenu=0;
        sStr=llGetSubString(sStr,llStringLength(g_sSubMenu)+1,-1);
        CharacterCommand(iNum,sStr, kID,0);
    }
}
SlotSaveMenu(key kID, integer iAuth) {
    submenu=4;
    Last_kID=NULL_KEY;
    Last_iNUm=CMD_BLOCKED;
    string sPrompt = "Slot to store character\n";
    list lMyButtons; 
   
    
    if(g_iCharacterSlot_Save==1){
        lMyButtons+=["☒ "+g_sSlotName1];
    }else{
        lMyButtons+=["☐ "+g_sSlotName1];
    }
    
    if(g_iCharacterSlot_Save==2){
        lMyButtons+=["☒ "+g_sSlotName2];
    }else{
        lMyButtons+=["☐ "+g_sSlotName2];
    }
    
    if(g_iCharacterSlot_Save==3){
        lMyButtons+=["☒ "+g_sSlotName3];
    }else{
        lMyButtons+=["☐ "+g_sSlotName3];
    }
    
    if(g_iCharacterSlot_Save==4){
        lMyButtons+=["☒ "+g_sSlotName4];
    }else{
        lMyButtons+=["☐ "+g_sSlotName4];
    }
    
    if(g_iCharacterSlot_Save==5){
        lMyButtons+=["☒ "+g_sSlotName5];
    }else{
        lMyButtons+=["☐ "+g_sSlotName5];
    }
    
    if(g_iCharacterSlot_Save==6){
        lMyButtons+=["☒ "+g_sSlotName6];
    }else{
        lMyButtons+=["☐ "+g_sSlotName6];
    }
    
    lMyButtons+=[sStr_BlankButton,sStr_BlankButton];
    

    
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
Querry_UpdateCharacter(){
    
    TIME_MOOD="character_update";
    llSetTimerEvent(2.0);
}
Querry_DoDescritpion(){
    
    TIME_MOOD="descritpion_update";
    llSetTimerEvent(2.0);
}
InputData(string sMenuType, string sMessage, key kAV){
    if(sMenuType==sStr_CharacterInput+sStr_name){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage=inmate_sWearerNumber;
        g_sWearerName=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Name saved: "+sMessage+".", kAV);
        CharacterUpdate();
        CharacterSave();             
    }else
    if(sMenuType==sStr_CharacterInput+sStr_crime||sMenuType==sStr_CharacterInput+sStr_crime+"menu"){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage=inmate_sWearerCrime;
        g_sWearerCrime=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Crime saved: "+sMessage+".", kAV);
        CharacterUpdate();                    
        CharacterSave();
        llMessageLinked(LINK_SET,CMD_OWNER,"inmateupdate","");                     
    }else
    if(sMenuType==sStr_CharacterInput+sStr_sentence){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage=inmate_sWearerSentence;
        g_sWearerSentence=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sentence saved: "+sMessage+".", kAV);
        CharacterUpdate();
        CharacterSave();      
    }else
    if(sMenuType==sStr_CharacterInput+sStr_dtype){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage="0";
        g_sWearerType=sMessage;
        CharacterUpdate();
        CharacterSave();           
    }else
    if(sMenuType==sStr_CharacterInput+sStr_dthreat){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage="0";
        g_sWearerThreat=sMessage;
        CharacterUpdate();
        CharacterSave();                    
    }else
    if(sMenuType==sStr_CharacterInput+sStr_mugshot){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage="0";
        g_sWearerMugshot=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Mugshot saved: "+g_sWearerMugshot+".", kAV);
        CharacterUpdate();
        CharacterSave();                    
    }
}
InmateTypeMenu(key kID, integer iAuth) {
    submenu=2;
    string sPrompt = "Character Type Menu";
    list lMyButtons; 
    sPrompt+="\nType: "+GetCharacterType();
    
    if(g_iWearerTypeValue==0){
        lMyButtons+=["☒ None"];
    }else{
        lMyButtons+=["☐ None"];
    }
    
    if(g_iWearerTypeValue==1){
        lMyButtons+=["☒ General"];
    }else{
        lMyButtons+=["☐ General"];
    }
    
    if(g_iWearerTypeValue==2){
        lMyButtons+=["☒ Violent"];
    }else{
        lMyButtons+=["☐ Violent"];
    }
    
    if(g_iWearerTypeValue==3){
        lMyButtons+=["☒ Medical"];
    }else{
        lMyButtons+=["☐ Medical"];
    }
    
    if(g_iWearerTypeValue==4){
        lMyButtons+=["☒ Deviant"];
    }else{
        lMyButtons+=["☐ Deviant"];
    }
    
    if(g_iWearerTypeValue==5){
        lMyButtons+=["☒ Mental"];
    }else{
        lMyButtons+=["☐ Mental"];
    }
    
    if(g_iWearerTypeValue==6){
        lMyButtons+=["☒ Mechanic"];
    }else{
        lMyButtons+=["☐ Mechanic"];
    }
    lMyButtons+=[sStr_Custom];
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
InmateThreatMenu(key kID, integer iAuth) {
    submenu=3;
    string sPrompt = "Character Threat Menu";
    list lMyButtons; 
    sPrompt+="\nThreat: "+GetCharacterRisk();
    
    if(g_iWearerThreatValue==0){
        lMyButtons+=["☒ Unknown"];
    }else{
        lMyButtons+=["☐ Unknown"];
    }
    
    if(g_iWearerThreatValue==1){
        lMyButtons+=["☒ Low"];
    }else{
        lMyButtons+=["☐ Low"];
    }
    
    if(g_iWearerThreatValue==2){
        lMyButtons+=["☒ Moderate"];
    }else{
        lMyButtons+=["☐ Moderate"];
    }
    
    if(g_iWearerThreatValue==3){
        lMyButtons+=["☒ Trouble"];
    }else{
        lMyButtons+=["☐ Trouble"];
    }
    
    if(g_iWearerThreatValue==4){
        lMyButtons+=["☒ Dangerous"];
    }else{
        lMyButtons+=["☐ Dangerous"];
    }
    
    if(g_iWearerThreatValue==5){
        lMyButtons+=["☒ Extreme"];
    }else{
        lMyButtons+=["☐ Extreme"];
    }
    
    lMyButtons+=[sStr_Custom];
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
string GetCharacterType(){
    string tmp;
    if(g_sWearerType=="0"||llStringTrim(g_sWearerType, STRING_TRIM )==""){
        if(g_iWearerTypeValue==1){
            tmp= sInmateTypeOrange;
        }else
        if(g_iWearerTypeValue==2){
            tmp= sInmateTypeBlue;
        }else
        if(g_iWearerTypeValue==3){
            tmp= sInmateTypeGreen;
        }else
        if(g_iWearerTypeValue==4){
            tmp= sInmateTypePink;
        }else
        if(g_iWearerTypeValue==5){
            tmp= sInmateTypeWhite;
        }else
        if(g_iWearerTypeValue==6){
            tmp= sInmateTypeRed;
        }else
        if(g_iWearerTypeValue==7){
            tmp= sInmateTypeBlack;
        }else{
            tmp=  sInmateTypeNull;
        }
    }else{
        tmp=g_sWearerType;
    }
    if(g_iTrustee){
        tmp="[TRUSTEE] "+tmp;
    }
    return tmp;
    
}
string GetCharacterRisk(){
    if(g_sWearerThreat=="0"||llStringTrim(g_sWearerThreat, STRING_TRIM )==""){
        if(g_iWearerThreatValue==1){
            return sInmateRisk1;
        }
        if(g_iWearerThreatValue==2){
            return sInmateRisk2;
        }
        if(g_iWearerThreatValue==3){
            return sInmateRisk3;
        }
        if(g_iWearerThreatValue==4){
            return sInmateRisk4;
        }
        if(g_iWearerThreatValue==5){
            return sInmateRisk5;
        }
        return sInmateRisk0;
    }
    return g_sWearerThreat;
}
DoDescritpion(){
    if(g_iSettingsSent==0){
        return;
    }
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,"DoDescritpionChange","");
    if(g_iSettingsSent==2){
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,"settings=sent","");
    }
    
    if(1<=mood){
        llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME,g_sWearerNumber]);
    }else{
        llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME,sCollarName]);
    }
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_DESC,sVersion+","+(string)mood+","+(string)g_iWearerTypeValue+","+(string)g_iWearerThreatValue+","+(string)g_iLocked+","+(string)g_iEscort+","+(string)g_iEnviroment+","+(string)g_iAutoLock+","+(string)g_iTrustee+","+(string)g_iCharacterSlot_Save]);
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,desc,"+sVersion+","+g_sWearerNumber+","+(string)mood+","+(string)g_iWearerTypeValue+","+(string)g_iWearerThreatValue+","+(string)g_iLocked+","+(string)g_iEscort+","+(string)g_iEnviroment+","+(string)g_iAutoLock+","+(string)g_iTrustee+","+(string)g_iCharacterSlot_Save);
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COM,iAccess,"+(string)iAccess);
}


Dialog(key kRCPT, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sMenuType) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kRCPT + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);
    integer iIndex = llListFindList(g_lMenuIDs, [kRCPT]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kRCPT, kMenuID, sMenuType], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kRCPT, kMenuID, sMenuType];
}

CharacterUpdateLinkHandling(string sStr){
    llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sGlobalToken+sStr,"");
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sGlobalToken+sStr,"");
}

CharacterUpdate(){
    if(!g_iSettingsSent){
        g_iSettingsSent=2;
    }
    if(llStringTrim(g_sWearerName, STRING_TRIM )==""){
        g_sWearerName=inmate_sWearerNumber;
    }
    if(llStringTrim(g_sWearerNumber, STRING_TRIM )==""){
        g_sWearerNumber=inmate_sWearerNumber;
    }
    if(llStringTrim(g_sWearerCrime, STRING_TRIM )==""){
        g_sWearerCrime=inmate_sWearerCrime;
    }
    if(llStringTrim(g_sWearerSentence, STRING_TRIM )==""){
        g_sWearerSentence=inmate_sWearerSentence;
    }
    CharacterUpdateLinkHandling("InmateSlot="+(string)g_iCharacterSlot_Save);
    DoDescritpion();
    
    CharacterUpdateLinkHandling("InmateType="+GetCharacterType());
    CharacterUpdateLinkHandling("InmateTypeV="+(string)g_iWearerTypeValue);
    CharacterUpdateLinkHandling("InmateThreat="+GetCharacterRisk());
    CharacterUpdateLinkHandling("InmateThreatV="+(string)g_iWearerThreatValue);
    CharacterUpdateLinkHandling("InmateSentence="+g_sWearerSentence);
    CharacterUpdateLinkHandling("InmateName="+g_sWearerName);
    CharacterUpdateLinkHandling("InmateCrime="+g_sWearerCrime);
    CharacterUpdateLinkHandling("InmateNumber" + "=" + g_sWearerNumber);
    CharacterUpdateLinkHandling("InmateMugshot" + "=" + g_sWearerMugshot);
    CharacterUpdateLinkHandling("InmateTrustee" + "=" + (string)g_iTrustee);
}


CharacterSave_Information(string sToken, integer iSlot, string sValue){
    if(llStringTrim(sValue, STRING_TRIM )==""||sValue=="0"){
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_DELETE,g_sCharacterToken+sToken+(string)iSlot,"");
    }else{
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+sToken+(string)iSlot+"="+sValue,"");
    }
}
CharacterSaveLinkHandling(string sStr){
    llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+sStr,"");
}
CharacterSave(){
    if(g_iCharacterSlot_Save==0){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Can't store character as a slot was not selected.", g_kWearer);
        return;
    }
    
    CharacterSave_Information(sStr_InmateType,g_iCharacterSlot_Save,g_sWearerType);
    CharacterSaveLinkHandling(sStr_InmateTypeV+(string)g_iCharacterSlot_Save+"="+(string)g_iWearerTypeValue);

    CharacterSave_Information(sStr_InmateThreat,g_iCharacterSlot_Save,g_sWearerThreat);
    CharacterSaveLinkHandling(sStr_InmateThreatV+(string)g_iCharacterSlot_Save+"="+(string)g_iWearerThreatValue);
        
    CharacterSaveLinkHandling(sStr_InmateSentence+(string)g_iCharacterSlot_Save+"="+g_sWearerSentence);

    CharacterSaveLinkHandling(sStr_InmateCrime+(string)g_iCharacterSlot_Save+"="+g_sWearerCrime);
 
    CharacterSaveLinkHandling(sStr_InmateName+(string)g_iCharacterSlot_Save+"="+ g_sWearerName);
    if(inmate_sWearerNumber!="")
        CharacterSaveLinkHandling(sStr_InmateNumber+(string)g_iCharacterSlot_Save+"="+inmate_sWearerNumber );
    
    CharacterSaveLinkHandling(sStr_Trustee+(string)g_iCharacterSlot_Save+"="+(string)g_iTrustee);
    CharacterSaveLinkHandling(sStr_InmateMugshot+(string)g_iCharacterSlot_Save+"="+(string)g_sWearerMugshot);
    
    CharacterSaveLinkHandling("slotsave="+(string)g_iCharacterSlot_Save);
    llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"slotsave="+(string)g_iCharacterSlot_Save,"");
    llSleep(1.0);
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sInmateToken+"runsave="+(string)g_iCharacterSlot_Save,"");
    
}
CharacterMenu(key kID, integer iAuth) {
    
    submenu=1;
    string sPrompt = "Character Menu";
    list lMyButtons; 
    if(g_kWearer==llGetOwnerKey(kID)&&1<=mood){
        sPrompt+="You are an inmate. Inmates don't have access to their records!";
    }
    sPrompt+="\nName: "+g_sWearerName;
    lMyButtons=["Inmate","Name","Crime","Sentence","Type","Threat","Titles","Mugshot"];
    if(iAuth==CMD_OWNER){
        if(g_iTrustee){
            lMyButtons+=["☒ TRUSTEE"];
        }else{
            lMyButtons+=["☐ TRUSTEE"];
        }
    }
    if(iAuth==CMD_OWNER||g_kWearer==llGetOwnerKey(kID)){
        lMyButtons+=["Refresh","Rebuild"];
    }
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}

CharacterRequest(){
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sInmateToken+"runload="+(string)g_iCharacterSlot_Save,"");
    iCharacterInit=1;
}

CharacterLoadLinkHandling(string sStr){
    llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_REQUEST,g_sCharacterToken+sStr,"");
}
CharacterLoad(){
    
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME, sCollarName]);
    
    if(iCharacterInit&&g_iCharacterSlot_Save==0){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Can't load character as a slot was not selected.", g_kWearer);
        return;
    }
    
    CharacterClear();

    TIME_MOOD="character_update_0";
    llSetTimerEvent(15.0);
    
    llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"request=1","");
    llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+"slotload="+(string)g_iCharacterSlot_Save,"");
    llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"slotload="+(string)g_iCharacterSlot_Save,"");
    
    CharacterLoadLinkHandling(sStr_InmateType+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateTypeV+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateThreat+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateThreatV+(string)g_iCharacterSlot_Save); 
    CharacterLoadLinkHandling(sStr_InmateSentence+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateCrime+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateName+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateNumber+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_Trustee+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateMugshot+(string)g_iCharacterSlot_Save);
    if(g_iCharacterSlot_LastLoad!=g_iCharacterSlot_Save){
        g_iCharacterSlot_LastLoad=g_iCharacterSlot_Save;
        llMessageLinked(LINK_SET,CMD_OWNER,"mood ooc",g_kWearer);
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+"slotsave="+(string)g_iCharacterSlot_Save,"");
        llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"slotsave="+(string)g_iCharacterSlot_Save,"");
    }
    
    CharacterRequest();
}
integer iCharacterInit;
CharacterInit(){
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME, sCollarName]);
    iCharacterInit=FALSE;
    if(g_iCharacterSlot_Save==0){
        g_iCharacterSlot_Save=1;
        return;
    }
    llSetTimerEvent(10);
    TIME_MOOD="characterinit";
    
}
TrusteeCommand(string sValue, key kID, integer iNum){
    integer iValue=0;
    if(iNum!=CMD_OWNER){
        return;
    }else
    if(sValue=="1"||sValue=="☐"){
        iValue=1;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Trustee Inmate="+(string)iValue, kID);
    g_iTrustee=iValue;
    
    Querry_DoDescritpion();     
    CharacterUpdate();
    CharacterSave();   
}
CharacterSubmenu(integer iNum, key kID, integer iMenu){
    if(iMenu==3)
        InmateThreatMenu(kID, iNum);   
    else if(iMenu==2)
        InmateTypeMenu(kID, iNum); 
    else if(iMenu==4)
        SlotSaveMenu(kID, iNum);  
    else if(iMenu==1)
        CharacterMenu(kID, iNum);  
}
CharacterCommand(integer iNum, string sStr, key kID, integer iMenu){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llList2String(lParams, 1);
    
    if(~llListFindList([sStr_rebuild,sStr_refresh,sStr_load,sStr_save,sStr_inmate,sStr_titles], [sCommand])){
        if (iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kID);
            return;
        }
        if(sCommand==sStr_rebuild){
            llMessageLinked(LINK_THIS,CMD_OWNER,"inmatesync reset", g_kWearer);
        }else
        if(sCommand==sStr_refresh){
            CharacterLoad(); 
        }else
        if(sCommand==sStr_load||iMenu==5){
            if(1<=(integer)sValue&&(integer)sValue<=6){
                g_iCharacterSlot_Save=(integer)sValue;
                CharacterLoad(); 
            }
        }else
        if(sCommand==sStr_save){
            if(1<=(integer)sValue&&(integer)sValue<=6){
                g_iCharacterSlot_Save=(integer)sValue;
                CharacterSave();
            }
        }else
        if(sCommand==sStr_inmate){
            integer load=0;
            load=(integer)sValue;
            if(1<=load&&load<=6){
                g_iCharacterSlot_Save=load;
                CharacterLoad();
            }else
            if(~llListFindList([g_sSlotName1,g_sSlotName2,g_sSlotName3,g_sSlotName4,g_sSlotName5,g_sSlotName6], [sValue])){
                load=llListFindList([g_sSlotName1,g_sSlotName2,g_sSlotName3,g_sSlotName4,g_sSlotName5,g_sSlotName6], [sValue]);
                ++load;
                g_iCharacterSlot_Save=load;
                CharacterLoad();
            }
            if(iMenu==4){
                Last_kID=kID;
                Last_iNUm=iNum;
            }else if(sValue==""){
                SlotSaveMenu(kID, iNum); 
            }
        }else
        if(sCommand==sStr_titles){
            llMessageLinked(LINK_SET,iNum,"CharacterTitles",kID);
        }
        
    }else
    if(~llListFindList([sStr_type,sStr_threat,"☐","1","☒","0",sStr_BlankButton,sStr_name,sStr_crime,sStr_sentence,sStr_dtype,sStr_dthreat,sStr_trusteepin,sStr_mugshot], [sCommand])){
        if (iNum!=CMD_OWNER&&iNum!=CMD_TRUSTED&&g_kWearer!=llGetOwnerKey(kID)){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kID);
            return;
        }
        if(sCommand==sStr_type){
            InmateTypeMenu(kID, iNum);
        }else
        if(sCommand==sStr_threat){
            InmateThreatMenu(kID, iNum);
        }else
        if(sCommand==sStr_trusteepin){
            TrusteeCommand(sValue,kID,iNum);
        }else
        if(~llListFindList([sStr_name,sStr_crime,sStr_sentence,sStr_dtype,sStr_dthreat,sStr_mugshot], [sCommand])){
            string message;
            if(sCommand==sStr_name){
                gListener_mood=sStr_name;
                message="Current name:"+g_sWearerName+"\Enter new ID";
            }else
            if(sCommand==sStr_crime){
                gListener_mood=sStr_crime;
                if(llToLower(sValue)=="menu"){
                    gListener_mood+="menu";
                }
                message="Current crime:"+g_sWearerCrime+"\nEnter new crime";
            }else
            if(sCommand==sStr_sentence){
                gListener_mood=sStr_sentence;
                message="Current sentence:"+g_sWearerSentence+"\nEnter new sentence";
            }else
            if(sCommand==sStr_dtype){
                gListener_mood=sStr_dtype;
                message="Enter custom inmate type text";
            }else
            if(sCommand==sStr_dthreat){
                gListener_mood=sStr_dthreat;
                message="Enter custom threat level text";
            }else
            if(sCommand==sStr_mugshot){
                gListener_mood=sStr_mugshot;
                message="Enter "+sStr_mugshot+" UUID.";
            }
            
            if(llToLower(sValue)!="menu"&&1<llGetListLength(lParams)){
                InputData(sStr_CharacterInput+gListener_mood, llDumpList2String( llList2List(lParams, 1, -1)," " ),kID);
            }else{
                Dialog(kID, message+" for %WEARERNAMES% in the box and click Submit. Submitting an empty box will resets it. Remember, keep it to the place theme.", [], [], 0, iNum, sStr_CharacterInput+gListener_mood);
            }
            
        }else
        if(sCommand=="☐"||sCommand=="1"){
            if(llToLower(sValue)==sStr_trusteepin){
                TrusteeCommand(sCommand,kID,iNum);
                if(iMenu==1)CharacterMenu(kID, iNum);  
            }else
            if(~llListFindList([sStr_none,sStr_general,sStr_violent,sStr_medical,sStr_deviant,sStr_mental,sStr_mechanic,sStr_deathrow], [llToLower(sValue)])){    
                if(llToLower(sValue)==sStr_none){
                    g_iWearerTypeValue=0;    
                }else
                if(llToLower(sValue)==sStr_general){
                    g_iWearerTypeValue=1;    
                }else
                if(llToLower(sValue)==sStr_violent){
                    g_iWearerTypeValue=2;    
                }else
                if(llToLower(sValue)==sStr_medical){
                    g_iWearerTypeValue=3;    
                }else
                if(llToLower(sValue)==sStr_deviant){
                    g_iWearerTypeValue=4;
                }else
                if(llToLower(sValue)==sStr_mental){
                    g_iWearerTypeValue=5; 
                }else
                if(llToLower(sValue)==sStr_mechanic){
                    g_iWearerTypeValue=6;            
                }else
                if(llToLower(sValue)==sStr_deathrow){
                    g_iWearerTypeValue=7;            
                }
                
                Querry_DoDescritpion();        
                g_sWearerType="0";
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Inmate type saved:"+GetCharacterType()+".", kID);
                CharacterUpdate();
                CharacterSave();      
                if(iMenu==2)InmateTypeMenu(kID, iNum);
            }else
            if(~llListFindList([sStr_unknown,sStr_low,sStr_moderate,sStr_trouble,sStr_dangerous,sStr_extreme], [llToLower(sValue)])){    
                if(llToLower(sValue)==sStr_unknown){
                    g_iWearerThreatValue=0;    
                }else
                if(llToLower(sValue)==sStr_low){
                    g_iWearerThreatValue=1;    
                }else
                if(llToLower(sValue)==sStr_moderate){
                    g_iWearerThreatValue=2;    
                }else
                if(llToLower(sValue)==sStr_trouble){
                    g_iWearerThreatValue=3;       
                }else
                if(llToLower(sValue)==sStr_dangerous){
                    g_iWearerThreatValue=4;  
                }else
                if(llToLower(sValue)==sStr_extreme){
                    g_iWearerThreatValue=5;      
                }
                g_sWearerThreat="0";
                
                Querry_DoDescritpion();     
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Inmate threat saved:"+GetCharacterRisk()+".", kID);
                CharacterUpdate();
                CharacterSave();      
                if(iMenu==3)InmateThreatMenu(kID, iNum);    
            }else{
                if (iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kID);
                        return;
                }
                integer load=0;
                if(iMenu==4){
                    load=(integer)sValue;
                }
                if(1<=load&&load<=6){
                    g_iCharacterSlot_Save=load;
                    CharacterLoad();
                }else
                if(~llListFindList([g_sSlotName1,g_sSlotName2,g_sSlotName3,g_sSlotName4,g_sSlotName5,g_sSlotName6], [sValue])){
                    load=llListFindList([g_sSlotName1,g_sSlotName2,g_sSlotName3,g_sSlotName4,g_sSlotName5,g_sSlotName6], [sValue]);
                    ++load;
                    g_iCharacterSlot_Save=load;
                    CharacterLoad();
                }
                if(iMenu==4){
                    Last_kID=kID;
                    Last_iNUm=iNum;
                }
            }
        }else
        if(sCommand=="☒"||sCommand=="0"){
            if(llToLower(sValue)==sStr_trusteepin){
                TrusteeCommand(sCommand,kID,iNum);
            }
            if(iMenu==4){
                Last_kID=kID;
                Last_iNUm=iNum;
                CharacterLoad();
            }else CharacterSubmenu(iNum,kID, iMenu);
        }else
        if(sCommand==sStr_BlankButton){
            CharacterSubmenu(iNum,kID, iMenu);                 
        }
    }
}

CharacterClear(){
    g_sWearerName="";
    g_sWearerNumber="";
    g_sWearerCrime="";
    g_sWearerSentence="";
    g_sWearerType="";
    g_sWearerThreat="";
    g_iWearerTypeValue=1;
    g_iWearerThreatValue=1;
    g_iTrustee=0;
    g_sWearerMugshot="";
    
    inmate_sWearerNumber="";
    inmate_sWearerCrime="";
    inmate_sWearerSentence="";
}

default {
    on_rez(integer param) { 
        initialize();
        if(g_kWearer==llGetOwner()){
            CharacterInit();
        }
        g_kWearer=llGetOwner();
    }

    state_entry() {
        initialize();
        if(g_kWearer==llGetOwner()){
            CharacterInit();
        }
        g_kWearer=llGetOwner();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum >= CMD_OWNER && iNum <= CMD_WEARER)
            UserCommand(iNum, sStr, kID);
        else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAV = llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
               
                if (sMessage == UPMENU) { 
                    submenu=(integer)sMenuType;
                    if(submenu==1){
                        llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        return;
                    }
                        
                    if(submenu==2||submenu==3||submenu==4)
                        CharacterMenu(kAV, iAuth);
                   
                }else{
                    if(llSubStringIndex(sMenuType,sStr_CharacterInput)==0){
                        InputData(sMenuType,sMessage,kAV);
                        if(llSubStringIndex(sMenuType,"menu")){
                            llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        }else{
                            CharacterMenu(kAV, iAuth);
                        }
                    }else{
                        if(sMessage==sStr_Custom&&submenu==2){
                            sMessage=sStr_dtype;
                        }else
                        if(sMessage==sStr_Custom&&submenu==3){
                            sMessage=sStr_dthreat;
                        }
                        CharacterCommand(iAuth,sMessage,kAV,submenu);
                    }
                }
                
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_CHARACTER") LINK_CHARACTER = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
        else if (iNum == LM_SETTING_RESPONSE||iNum == CHARACTER_LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            lParams=[];
            if (llSubStringIndex(sToken,g_sAuthToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sAuthToken),-1);
                if (sToken =="iaccess"){
                    iAccess=(integer)sValue ;
                    Querry_DoDescritpion();
                }
            }else
            if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                if (sToken =="moodvalue"){
                    mood=(integer)sValue ;
                    
                    Querry_DoDescritpion();
                }
                else if (sToken =="locked") {
                    g_iLocked = (integer)sValue;
                    
                    Querry_DoDescritpion();
                }
            }else
            if (llSubStringIndex(sToken,g_sInmateToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sInmateToken),-1);
                if (sToken ==sStr_InmateNumber)
                {
                    inmate_sWearerNumber = sValue;
                    if(3<llStringLength(sValue)){
                        if(0<=llSubStringIndex(sValue,"P-6")){
                            g_sWearerNumber=sValue;
                        }else if(llSubStringIndex(g_sWearerNumber,"P-6")==-1||llStringLength(g_sWearerNumber)==0){
                            g_sWearerNumber=sValue;
                        }
                    }
                }
                else if (sToken ==sStr_InmateCrime)
                {
                    inmate_sWearerCrime = sValue;
                }
                else if (sToken == sStr_InmateSentence)
                {
                    inmate_sWearerSentence = sValue;
                }
                else if (sToken =="checked") 
                {
                    if(sValue=="1"){
                        Querry_UpdateCharacter();
                    }
                }
            }else
            if (llSubStringIndex(sToken,g_sCharacterToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sCharacterToken),-1);
                if (sToken =="slotsave")
                {
                    g_iCharacterSlot_Save = (integer)sValue;
                }else
                if(g_iCharacterSlot_Save!=0){
                    if (sToken ==sStr_InmateNumber+(string)g_iCharacterSlot_Save)
                    {
                        g_sWearerNumber = sValue;
                       Querry_UpdateCharacter();
                    }
                    else if (sToken ==sStr_InmateCrime+(string)g_iCharacterSlot_Save)
                    {
                        g_sWearerCrime = sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_InmateName+(string)g_iCharacterSlot_Save)
                    {
                        g_sWearerName = sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_InmateSentence+(string)g_iCharacterSlot_Save)
                    {
                        g_sWearerSentence = sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_InmateType+(string)g_iCharacterSlot_Save)
                    {
                        g_sWearerType = sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_InmateThreat+(string)g_iCharacterSlot_Save)
                    {
                        g_sWearerThreat = sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_InmateTypeV+(string)g_iCharacterSlot_Save)
                    {
                        g_iWearerTypeValue = (integer)sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_InmateThreatV+(string)g_iCharacterSlot_Save)
                    {
                        g_iWearerThreatValue = (integer)sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_Trustee+(string)g_iCharacterSlot_Save) 
                    {
                        g_iTrustee = (integer)sValue;
                        Querry_UpdateCharacter(); 
                    }
                    else if (sToken ==sStr_InmateMugshot+(string)g_iCharacterSlot_Save) 
                    {
                        g_sWearerMugshot =sValue;
                        Querry_UpdateCharacter(); 
                    }
                }
            }else
            if (sToken == g_sEnviromentToken+"enviroment"){
                g_iEnviroment=(integer)sValue ;
                
                Querry_DoDescritpion();
            }else 
            if (sToken == g_sEscortToken+"escort") {
                g_iEscort = (integer)sValue;
                
                Querry_DoDescritpion();
            }else 
            if (sToken== g_sBGLockToken+"autolock"){
                g_iAutoLock=(integer)sValue;
                
                Querry_DoDescritpion();
            }else
            if (sStr == "settings=sent") {
              if(g_iSettingsSent==FALSE){
                  
                  Querry_DoDescritpion();
              }
              g_iSettingsSent=1;
              llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sGlobalToken+"BGN="+sCollarName,"");
              llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sGlobalToken+"BGV="+sVersion,"");
              llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sGlobalToken+"BGV2="+(string)g_fBGVersion,"");
              llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sGlobalToken+"BGV1="+sLConVersion,"");
              llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sGlobalToken+"BGB="+sLConBuild,"");
              
              
            }else 
            if (sStr == "intern_integrity=homemade") {
              g_iSettingsSent=0;
            }
            
            sValue="";
            sToken="";
        }
    }


    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) {
            TIME_MOOD="";
            llSetTimerEvent(0.0); 

            CharacterClear();
            g_sWearerType_Backup="";
            g_sWearerThreat_Backup="";

            g_iCharacterSlot_Save=1;
            g_iCharacterSlot_LastLoad=-1;

            mood=0;

            g_sContraband="";
            Last_kID=NULL_KEY;
            Last_iNUm=CMD_BLOCKED;

            g_sSlotName1="1";
            g_sSlotName2="2";
            g_sSlotName3="3";
            g_sSlotName4="4";
            g_sSlotName5="5";
            g_sSlotName6="6";
            g_iEscort=1;
            g_iLocked=0;
            g_iAutoLock=1;
            g_iTrustee=0;
            
            initialize();
            g_iCharacterSlot_LastLoad=-1;
            g_iCharacterSlot_Save=1;
        }
    }
    timer() {
        llSetTimerEvent(0.0);  
        if(TIME_MOOD=="characterinit"){
            CharacterLoad();
        }else
        if(TIME_MOOD=="character_update"){
            if(!iCharacterInit){
                CharacterRequest();
            }
            CharacterUpdate();
            if(Last_kID!=NULL_KEY&&Last_iNUm!=CMD_BLOCKED)
                SlotSaveMenu(Last_kID, Last_iNUm);
        }else
        if(TIME_MOOD=="descritpion_update"){
            if(!iCharacterInit){
                CharacterRequest();
            }
            CharacterUpdate();
        }else
        if(TIME_MOOD=="character_update_0"){
            if(!iCharacterInit){
                CharacterRequest();
            }
            CharacterUpdate();
        }
    }
}

*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 12/29/2017 23:44:28
//mono




string sCollarName="L-CON 3.2 (d10.2.5)";
string sVersion="3d10.2.5";
float g_fBGVersion=10.25;
string sLConVersion="10.2.5";
string sLConBuild="3.2";

string g_sSubMenu = "Character";
string g_sParentMenu = "";
list g_lMenuIDs;  
integer submenu;
integer g_iMenuStride = 3;

key g_kWearer; 

integer g_iSettingsSent;

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;
integer CMD_BLOCKED = 520;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_CHARACTER = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;
integer CHARACTER_LM_SETTING_SAVE = 2010;
integer CHARACTER_LM_SETTING_REQUEST = 2011;
integer CHARACTER_LM_SETTING_RESPONSE = 2012;
integer CHARACTER_LM_SETTING_DELETE = 2013;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

string UPMENU = "BACK";


string g_sGlobalToken = "global_";
string g_sInmateToken = "inmate_";
string g_sBGLockToken = "bglock_";
string g_sCharacterToken = "character_";
string g_sEnviromentToken = "enviroment_";
string g_sEscortToken = "escort_"; 
string g_sAuthToken = "auth_";
integer iAccess=1;
string TIME_MOOD;
string gListener_mood;

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;

string g_sWearerName;
string g_sWearerNumber;
string g_sWearerCrime;
string g_sWearerSentence;
string g_sWearerType;
string g_sWearerType_Backup;
string g_sWearerThreat;
string g_sWearerThreat_Backup;
integer g_iWearerTypeValue;
integer g_iWearerThreatValue;
string g_sWearerMugshot;

integer g_iCharacterSlot_Save;
integer  g_iCharacterSlot_LastLoad;

string inmate_sWearerNumber;
string inmate_sWearerCrime;
string inmate_sWearerSentence;
integer mood;


string g_sContraband;
key Last_kID;
integer Last_iNUm;

string g_sSlotName1="1";
string g_sSlotName2="2";
string g_sSlotName3="3";
string g_sSlotName4="4";
string g_sSlotName5="5";
string g_sSlotName6="6";
integer g_iEscort=-1;
integer g_iLocked=0;
integer g_iEnviroment=1;
integer g_iAutoLock=1;
integer g_iTrustee;
string sInmateTypeNull="N/A";
string sInmateTypeOrange="General\nRobbers, muggers.";
string sInmateTypeBlue="Violent\nKillers & Troublemakers.\nBound and punished 24/7.";
string sInmateTypeGreen="Medical\nMedical staffs experimental test subject.";
string sInmateTypePink="Deviant\nSex toys for Guards enjoyment.";
string sInmateTypeWhite="Mental\nConfined to the Mental Ward.";
string sInmateTypeRed="Mechanic\nDrafted into Mechanics Guild service.";
string sInmateTypeBlack="";
string sInmateRisk0="N/A";
string sInmateRisk1="Low. No need to worry.";
string sInmateRisk2="Moderate. Still no need to worry.";
string sInmateRisk3="Known troublemaker. Yeah, have the stunner ready for them.";
string sInmateRisk4="Dangerous. Lock them up 24/7.";
string sInmateRisk5="Extreme. Fuck... D: ";
string sStr_InmateSentence="InmateSentence";
string sStr_InmateCrime="InmateCrime";
string sStr_InmateNumber="InmateNumber";
string sStr_InmateName="InmateName";
string sStr_InmateType="InmateType";
string sStr_InmateThreat="InmateThreat";
string sStr_InmateTypeV="InmateTypeV";
string sStr_InmateThreatV="InmateThreatV";
string sStr_Trustee="Trustee";
string sStr_InmateMugshot="Mugshot";
string sStr_CharacterInput="CharacterInput_";
string sStr_rebuild="rebuild";
string sStr_refresh="refresh";
string sStr_load="load";
string sStr_save="save";
string sStr_inmate="inmate";
string sStr_titles="titles";
string sStr_denied="DENIED silly person. (Character)";
string sStr_type="type";
string sStr_threat="threat";
string sStr_BlankButton="-";
string sStr_name="name";
string sStr_crime="crime";
string sStr_sentence="sentence";
string sStr_dtype="dtype";
string sStr_dthreat="dthreat";
string sStr_trusteepin="trustee";
string sStr_none="none";
string sStr_general="general";
string sStr_violent="violent";
string sStr_medical="medical";
string sStr_deviant="deviant";
string sStr_mental="mental";
string sStr_mechanic="mechanic";
string sStr_deathrow="deathrow";
string sStr_unknown="unknown";
string sStr_low="low";
string sStr_moderate="moderate";
string sStr_trouble="trouble";
string sStr_dangerous="dangerous";
string sStr_extreme="extreme";
string sStr_mugshot="mugshot";
string sStr_Custom="Custom";
integer iCharacterInit;

initialize(){
    TIME_MOOD="";
    g_iSettingsSent=0;
    CharacterClear();
    
    g_iEscort=-1;
    submenu=0;
    mood=0;
    
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME, sCollarName]);
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_DESC,sVersion+","+(string)mood+","+(string)g_iWearerTypeValue+","+(string)g_iWearerThreatValue+","+(string)g_iLocked+","+(string)g_iEscort+","+(string)g_iEnviroment+","+(string)g_iAutoLock+","+(string)g_iTrustee+",0"]);
}

UserCommand(integer iNum, string sStr, key kID) { 
   
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,character(d),17,12,30,129");
    }else
    if (llToLower(sStr) == "menu "+llToLower(g_sSubMenu)||llToLower(sStr) == llToLower(g_sSubMenu))
        CharacterMenu(kID, iNum);
    else if (llSubStringIndex(llToLower(sStr),llToLower(g_sSubMenu))==0) {
        submenu=0;
        sStr=llGetSubString(sStr,llStringLength(g_sSubMenu)+1,-1);
        CharacterCommand(iNum,sStr, kID,0);
    }
}
TrusteeCommand(string sValue, key kID, integer iNum){
    integer iValue=0;
    if(iNum!=CMD_OWNER){
        return;
    }else
    if(sValue=="1"||sValue=="☐"){
        iValue=1;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Trustee Inmate="+(string)iValue, kID);
    g_iTrustee=iValue;
    
    Querry_DoDescritpion();     
    CharacterUpdate();
    CharacterSave();   
}
SlotSaveMenu(key kID, integer iAuth) {
    submenu=4;
    Last_kID=NULL_KEY;
    Last_iNUm=CMD_BLOCKED;
    string sPrompt = "Slot to store character\n";
    list lMyButtons; 
   
    
    if(g_iCharacterSlot_Save==1){
        lMyButtons+=["☒ "+g_sSlotName1];
    }else{
        lMyButtons+=["☐ "+g_sSlotName1];
    }
    
    if(g_iCharacterSlot_Save==2){
        lMyButtons+=["☒ "+g_sSlotName2];
    }else{
        lMyButtons+=["☐ "+g_sSlotName2];
    }
    
    if(g_iCharacterSlot_Save==3){
        lMyButtons+=["☒ "+g_sSlotName3];
    }else{
        lMyButtons+=["☐ "+g_sSlotName3];
    }
    
    if(g_iCharacterSlot_Save==4){
        lMyButtons+=["☒ "+g_sSlotName4];
    }else{
        lMyButtons+=["☐ "+g_sSlotName4];
    }
    
    if(g_iCharacterSlot_Save==5){
        lMyButtons+=["☒ "+g_sSlotName5];
    }else{
        lMyButtons+=["☐ "+g_sSlotName5];
    }
    
    if(g_iCharacterSlot_Save==6){
        lMyButtons+=["☒ "+g_sSlotName6];
    }else{
        lMyButtons+=["☐ "+g_sSlotName6];
    }
    
    lMyButtons+=[sStr_BlankButton,sStr_BlankButton];
    

    
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
Querry_UpdateCharacter(){
    
    TIME_MOOD="character_update";
    llSetTimerEvent(2.0);
}
Querry_DoDescritpion(){
    
    TIME_MOOD="descritpion_update";
    llSetTimerEvent(2.0);
}
InputData(string sMenuType, string sMessage, key kAV){
    if(sMenuType==sStr_CharacterInput+sStr_name){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage=inmate_sWearerNumber;
        g_sWearerName=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Name saved: "+sMessage+".", kAV);
        CharacterUpdate();
        CharacterSave();             
    }else
    if(sMenuType==sStr_CharacterInput+sStr_crime||sMenuType==sStr_CharacterInput+sStr_crime+"menu"){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage=inmate_sWearerCrime;
        g_sWearerCrime=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Crime saved: "+sMessage+".", kAV);
        CharacterUpdate();                    
        CharacterSave();
        llMessageLinked(LINK_SET,CMD_OWNER,"inmateupdate","");                     
    }else
    if(sMenuType==sStr_CharacterInput+sStr_sentence){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage=inmate_sWearerSentence;
        g_sWearerSentence=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sentence saved: "+sMessage+".", kAV);
        CharacterUpdate();
        CharacterSave();      
    }else
    if(sMenuType==sStr_CharacterInput+sStr_dtype){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage="0";
        g_sWearerType=sMessage;
        CharacterUpdate();
        CharacterSave();           
    }else
    if(sMenuType==sStr_CharacterInput+sStr_dthreat){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage="0";
        g_sWearerThreat=sMessage;
        CharacterUpdate();
        CharacterSave();                    
    }else
    if(sMenuType==sStr_CharacterInput+sStr_mugshot){
        if(llStringTrim(sMessage, STRING_TRIM )=="")
            sMessage="0";
        g_sWearerMugshot=sMessage;
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Mugshot saved: "+g_sWearerMugshot+".", kAV);
        CharacterUpdate();
        CharacterSave();                    
    }
}
InmateTypeMenu(key kID, integer iAuth) {
    submenu=2;
    string sPrompt = "Character Type Menu";
    list lMyButtons; 
    sPrompt+="\nType: "+GetCharacterType();
    
    if(g_iWearerTypeValue==0){
        lMyButtons+=["☒ None"];
    }else{
        lMyButtons+=["☐ None"];
    }
    
    if(g_iWearerTypeValue==1){
        lMyButtons+=["☒ General"];
    }else{
        lMyButtons+=["☐ General"];
    }
    
    if(g_iWearerTypeValue==2){
        lMyButtons+=["☒ Violent"];
    }else{
        lMyButtons+=["☐ Violent"];
    }
    
    if(g_iWearerTypeValue==3){
        lMyButtons+=["☒ Medical"];
    }else{
        lMyButtons+=["☐ Medical"];
    }
    
    if(g_iWearerTypeValue==4){
        lMyButtons+=["☒ Deviant"];
    }else{
        lMyButtons+=["☐ Deviant"];
    }
    
    if(g_iWearerTypeValue==5){
        lMyButtons+=["☒ Mental"];
    }else{
        lMyButtons+=["☐ Mental"];
    }
    
    if(g_iWearerTypeValue==6){
        lMyButtons+=["☒ Mechanic"];
    }else{
        lMyButtons+=["☐ Mechanic"];
    }
    lMyButtons+=[sStr_Custom];
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
InmateThreatMenu(key kID, integer iAuth) {
    submenu=3;
    string sPrompt = "Character Threat Menu";
    list lMyButtons; 
    sPrompt+="\nThreat: "+GetCharacterRisk();
    
    if(g_iWearerThreatValue==0){
        lMyButtons+=["☒ Unknown"];
    }else{
        lMyButtons+=["☐ Unknown"];
    }
    
    if(g_iWearerThreatValue==1){
        lMyButtons+=["☒ Low"];
    }else{
        lMyButtons+=["☐ Low"];
    }
    
    if(g_iWearerThreatValue==2){
        lMyButtons+=["☒ Moderate"];
    }else{
        lMyButtons+=["☐ Moderate"];
    }
    
    if(g_iWearerThreatValue==3){
        lMyButtons+=["☒ Trouble"];
    }else{
        lMyButtons+=["☐ Trouble"];
    }
    
    if(g_iWearerThreatValue==4){
        lMyButtons+=["☒ Dangerous"];
    }else{
        lMyButtons+=["☐ Dangerous"];
    }
    
    if(g_iWearerThreatValue==5){
        lMyButtons+=["☒ Extreme"];
    }else{
        lMyButtons+=["☐ Extreme"];
    }
    
    lMyButtons+=[sStr_Custom];
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}
string GetCharacterType(){
    string tmp;
    if(g_sWearerType=="0"||llStringTrim(g_sWearerType, STRING_TRIM )==""){
        if(g_iWearerTypeValue==1){
            tmp= sInmateTypeOrange;
        }else
        if(g_iWearerTypeValue==2){
            tmp= sInmateTypeBlue;
        }else
        if(g_iWearerTypeValue==3){
            tmp= sInmateTypeGreen;
        }else
        if(g_iWearerTypeValue==4){
            tmp= sInmateTypePink;
        }else
        if(g_iWearerTypeValue==5){
            tmp= sInmateTypeWhite;
        }else
        if(g_iWearerTypeValue==6){
            tmp= sInmateTypeRed;
        }else
        if(g_iWearerTypeValue==7){
            tmp= sInmateTypeBlack;
        }else{
            tmp=  sInmateTypeNull;
        }
    }else{
        tmp=g_sWearerType;
    }
    if(g_iTrustee){
        tmp="[TRUSTEE] "+tmp;
    }
    return tmp;
    
}
string GetCharacterRisk(){
    if(g_sWearerThreat=="0"||llStringTrim(g_sWearerThreat, STRING_TRIM )==""){
        if(g_iWearerThreatValue==1){
            return sInmateRisk1;
        }
        if(g_iWearerThreatValue==2){
            return sInmateRisk2;
        }
        if(g_iWearerThreatValue==3){
            return sInmateRisk3;
        }
        if(g_iWearerThreatValue==4){
            return sInmateRisk4;
        }
        if(g_iWearerThreatValue==5){
            return sInmateRisk5;
        }
        return sInmateRisk0;
    }
    return g_sWearerThreat;
}
DoDescritpion(){
    if(g_iSettingsSent==0){
        return;
    }
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,"DoDescritpionChange","");
    if(g_iSettingsSent==2){
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,"settings=sent","");
    }
    
    if(1<=mood){
        llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME,g_sWearerNumber]);
    }else{
        llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME,sCollarName]);
    }
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_DESC,sVersion+","+(string)mood+","+(string)g_iWearerTypeValue+","+(string)g_iWearerThreatValue+","+(string)g_iLocked+","+(string)g_iEscort+","+(string)g_iEnviroment+","+(string)g_iAutoLock+","+(string)g_iTrustee+","+(string)g_iCharacterSlot_Save]);
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,desc,"+sVersion+","+g_sWearerNumber+","+(string)mood+","+(string)g_iWearerTypeValue+","+(string)g_iWearerThreatValue+","+(string)g_iLocked+","+(string)g_iEscort+","+(string)g_iEnviroment+","+(string)g_iAutoLock+","+(string)g_iTrustee+","+(string)g_iCharacterSlot_Save);
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COM,iAccess,"+(string)iAccess);
}


Dialog(key kRCPT, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sMenuType) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kRCPT + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);
    integer iIndex = llListFindList(g_lMenuIDs, [kRCPT]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kRCPT, kMenuID, sMenuType], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kRCPT, kMenuID, sMenuType];
}

CharacterUpdateLinkHandling(string sStr){
    llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sGlobalToken+sStr,"");
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sGlobalToken+sStr,"");
}

CharacterUpdate(){
    if(!g_iSettingsSent){
        g_iSettingsSent=2;
    }
    if(llStringTrim(g_sWearerName, STRING_TRIM )==""){
        g_sWearerName=inmate_sWearerNumber;
    }
    if(llStringTrim(g_sWearerNumber, STRING_TRIM )==""){
        g_sWearerNumber=inmate_sWearerNumber;
    }
    if(llStringTrim(g_sWearerCrime, STRING_TRIM )==""){
        g_sWearerCrime=inmate_sWearerCrime;
    }
    if(llStringTrim(g_sWearerSentence, STRING_TRIM )==""){
        g_sWearerSentence=inmate_sWearerSentence;
    }
    CharacterUpdateLinkHandling("InmateSlot="+(string)g_iCharacterSlot_Save);
    DoDescritpion();
    
    CharacterUpdateLinkHandling("InmateType="+GetCharacterType());
    CharacterUpdateLinkHandling("InmateTypeV="+(string)g_iWearerTypeValue);
    CharacterUpdateLinkHandling("InmateThreat="+GetCharacterRisk());
    CharacterUpdateLinkHandling("InmateThreatV="+(string)g_iWearerThreatValue);
    CharacterUpdateLinkHandling("InmateSentence="+g_sWearerSentence);
    CharacterUpdateLinkHandling("InmateName="+g_sWearerName);
    CharacterUpdateLinkHandling("InmateCrime="+g_sWearerCrime);
    CharacterUpdateLinkHandling("InmateNumber" + "=" + g_sWearerNumber);
    CharacterUpdateLinkHandling("InmateMugshot" + "=" + g_sWearerMugshot);
    CharacterUpdateLinkHandling("InmateTrustee" + "=" + (string)g_iTrustee);
}
CharacterSubmenu(integer iNum, key kID, integer iMenu){
    if(iMenu==3)
        InmateThreatMenu(kID, iNum);   
    else if(iMenu==2)
        InmateTypeMenu(kID, iNum); 
    else if(iMenu==4)
        SlotSaveMenu(kID, iNum);  
    else if(iMenu==1)
        CharacterMenu(kID, iNum);  
}


CharacterSave_Information(string sToken, integer iSlot, string sValue){
    if(llStringTrim(sValue, STRING_TRIM )==""||sValue=="0"){
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_DELETE,g_sCharacterToken+sToken+(string)iSlot,"");
    }else{
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+sToken+(string)iSlot+"="+sValue,"");
    }
}
CharacterSaveLinkHandling(string sStr){
    llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+sStr,"");
}
CharacterSave(){
    if(g_iCharacterSlot_Save==0){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Can't store character as a slot was not selected.", g_kWearer);
        return;
    }
    
    CharacterSave_Information(sStr_InmateType,g_iCharacterSlot_Save,g_sWearerType);
    CharacterSaveLinkHandling(sStr_InmateTypeV+(string)g_iCharacterSlot_Save+"="+(string)g_iWearerTypeValue);

    CharacterSave_Information(sStr_InmateThreat,g_iCharacterSlot_Save,g_sWearerThreat);
    CharacterSaveLinkHandling(sStr_InmateThreatV+(string)g_iCharacterSlot_Save+"="+(string)g_iWearerThreatValue);
        
    CharacterSaveLinkHandling(sStr_InmateSentence+(string)g_iCharacterSlot_Save+"="+g_sWearerSentence);

    CharacterSaveLinkHandling(sStr_InmateCrime+(string)g_iCharacterSlot_Save+"="+g_sWearerCrime);
 
    CharacterSaveLinkHandling(sStr_InmateName+(string)g_iCharacterSlot_Save+"="+ g_sWearerName);
    if(inmate_sWearerNumber!="")
        CharacterSaveLinkHandling(sStr_InmateNumber+(string)g_iCharacterSlot_Save+"="+inmate_sWearerNumber );
    
    CharacterSaveLinkHandling(sStr_Trustee+(string)g_iCharacterSlot_Save+"="+(string)g_iTrustee);
    CharacterSaveLinkHandling(sStr_InmateMugshot+(string)g_iCharacterSlot_Save+"="+(string)g_sWearerMugshot);
    
    CharacterSaveLinkHandling("slotsave="+(string)g_iCharacterSlot_Save);
    llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"slotsave="+(string)g_iCharacterSlot_Save,"");
    llSleep(1.0);
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sInmateToken+"runsave="+(string)g_iCharacterSlot_Save,"");
    
}

CharacterRequest(){
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sInmateToken+"runload="+(string)g_iCharacterSlot_Save,"");
    iCharacterInit=1;
}
CharacterMenu(key kID, integer iAuth) {
    
    submenu=1;
    string sPrompt = "Character Menu";
    list lMyButtons; 
    if(g_kWearer==llGetOwnerKey(kID)&&1<=mood){
        sPrompt+="You are an inmate. Inmates don't have access to their records!";
    }
    sPrompt+="\nName: "+g_sWearerName;
    lMyButtons=["Inmate","Name","Crime","Sentence","Type","Threat","Titles","Mugshot"];
    if(iAuth==CMD_OWNER){
        if(g_iTrustee){
            lMyButtons+=["☒ TRUSTEE"];
        }else{
            lMyButtons+=["☐ TRUSTEE"];
        }
    }
    if(iAuth==CMD_OWNER||g_kWearer==llGetOwnerKey(kID)){
        lMyButtons+=["Refresh","Rebuild"];
    }
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iAuth, (string)submenu);
}

CharacterLoadLinkHandling(string sStr){
    llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_REQUEST,g_sCharacterToken+sStr,"");
}
CharacterLoad(){
    
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME, sCollarName]);
    
    if(iCharacterInit&&g_iCharacterSlot_Save==0){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Can't load character as a slot was not selected.", g_kWearer);
        return;
    }
    
    CharacterClear();

    TIME_MOOD="character_update_0";
    llSetTimerEvent(15.0);
    
    llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"request=1","");
    llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+"slotload="+(string)g_iCharacterSlot_Save,"");
    llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"slotload="+(string)g_iCharacterSlot_Save,"");
    
    CharacterLoadLinkHandling(sStr_InmateType+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateTypeV+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateThreat+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateThreatV+(string)g_iCharacterSlot_Save); 
    CharacterLoadLinkHandling(sStr_InmateSentence+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateCrime+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateName+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateNumber+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_Trustee+(string)g_iCharacterSlot_Save);
    CharacterLoadLinkHandling(sStr_InmateMugshot+(string)g_iCharacterSlot_Save);
    if(g_iCharacterSlot_LastLoad!=g_iCharacterSlot_Save){
        g_iCharacterSlot_LastLoad=g_iCharacterSlot_Save;
        llMessageLinked(LINK_SET,CMD_OWNER,"mood ooc",g_kWearer);
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_SAVE,g_sCharacterToken+"slotsave="+(string)g_iCharacterSlot_Save,"");
        llMessageLinked(LINK_SET,CHARACTER_LM_SETTING_RESPONSE,g_sCharacterToken+"slotsave="+(string)g_iCharacterSlot_Save,"");
    }
    
    CharacterRequest();
}
CharacterInit(){
    llSetLinkPrimitiveParamsFast(LINK_ROOT,[PRIM_NAME, sCollarName]);
    iCharacterInit=FALSE;
    if(g_iCharacterSlot_Save==0){
        g_iCharacterSlot_Save=1;
        return;
    }
    llSetTimerEvent(10);
    TIME_MOOD="characterinit";
    
}
CharacterCommand(integer iNum, string sStr, key kID, integer iMenu){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llList2String(lParams, 1);
    
    if(~llListFindList([sStr_rebuild,sStr_refresh,sStr_load,sStr_save,sStr_inmate,sStr_titles], [sCommand])){
        if (iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_denied, kID);
            return;
        }
        if(sCommand==sStr_rebuild){
            llMessageLinked(LINK_THIS,CMD_OWNER,"inmatesync reset", g_kWearer);
        }else
        if(sCommand==sStr_refresh){
            CharacterLoad(); 
        }else
        if(sCommand==sStr_load||iMenu==5){
            if(1<=(integer)sValue&&(integer)sValue<=6){
                g_iCharacterSlot_Save=(integer)sValue;
                CharacterLoad(); 
            }
        }else
        if(sCommand==sStr_save){
            if(1<=(integer)sValue&&(integer)sValue<=6){
                g_iCharacterSlot_Save=(integer)sValue;
                CharacterSave();
            }
        }else
        if(sCommand==sStr_inmate){
            integer load=0;
            load=(integer)sValue;
            if(1<=load&&load<=6){
                g_iCharacterSlot_Save=load;
                CharacterLoad();
            }else
            if(~llListFindList([g_sSlotName1,g_sSlotName2,g_s