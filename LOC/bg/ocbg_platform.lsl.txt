//start_unprocessed_text
/*string SLM_SETTING_SAY_REQUEST = "2005";
string CHARACTER_SLM_SETTING_SAY_REQUEST = "2015";
string TITLES_SLM_SETTING_SAY_REQUEST = "2025";

string SLM_SETTING_SAY_Token;

integer BGCOLLAR_CHANNEL_RESPONSE=-667571900;
string sReporterName="PLATFORM";


key  g_kWearer;
list lParameters;

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_CHARACTER = 5;
integer LINK_TITLES=5;
integer LINK_RLV;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;
integer LM_SETTING_EMPTY = 2004;

integer CHARACTER_LM_SETTING_SAVE = 2010;
integer CHARACTER_LM_SETTING_REQUEST = 2011;
integer CHARACTER_LM_SETTING_RESPONSE = 2012;
integer CHARACTER_LM_SETTING_DELETE = 2013;
integer CHARACTER_LM_SETTING_EMPTY = 2014;

integer TITLES_LM_SETTING_SAVE = 2020;
integer TITLES_LM_SETTING_REQUEST = 2021;
integer TITLES_LM_SETTING_RESPONSE = 2022;
integer TITLES_LM_SETTING_DELETE = 2023;
integer TITLES_LM_SETTING_EMPTY = 2024;

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}

getPrimitiveParams_Parameters(integer link, string sStr){
    lParameters=[];
    list lParams = llParseString2List(sStr, ["|"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    lParams=[];
    if (~llSubStringIndex(sToken, "PRIM_NAME")){
        lParameters+=[PRIM_NAME];
    }else
    if (~llSubStringIndex(sToken, "PRIM_DESC")){
        lParameters+=[PRIM_DESC];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TYPE")){
        lParameters+=[PRIM_TYPE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SLICE")){
        lParameters+=[PRIM_SLICE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS_SHAPE_TYPE")){
        lParameters+=[PRIM_PHYSICS_SHAPE_TYPE];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_MATERIAL")){
        lParameters+=[PRIM_MATERIAL];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS")){
        lParameters+=[PRIM_PHYSICS];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHANTOM")){
        lParameters+=[PRIM_PHANTOM];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POSITION")){
        lParameters+=[PRIM_POSITION];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROTATION")){
        lParameters+=[PRIM_ROTATION];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIZE")){
        lParameters+=[PRIM_SIZE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POS_LOCAL")){
        lParameters+=[PRIM_POS_LOCAL];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROT_LOCAL")){
        lParameters+=[PRIM_ROT_LOCAL];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXTURE")){
        lParameters+=[PRIM_TEXTURE];
        lParameters+=[(integer)sValue];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_TEXT")){
        lParameters+=[PRIM_TEXT];
    }else
    if (~llSubStringIndex(sToken, "PRIM_COLOR")){
        lParameters+=[PRIM_COLOR];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_BUMP_SHINY")){
        lParameters+=[PRIM_BUMP_SHINY];
        lParameters+=[(integer)sValue];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_POINT_LIGHT")){
        lParameters+=[PRIM_POINT_LIGHT];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_FULLBRIGHT")){
        lParameters+=[PRIM_FULLBRIGHT];
        lParameters+=[(integer)sValue];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_FLEXIBLE")){
        lParameters+=[PRIM_FLEXIBLE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXGEN")){
        lParameters+=[PRIM_TEXGEN];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_GLOW")){
        lParameters+=[PRIM_GLOW];
        lParameters+=[(integer)sValue];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_OMEGA")){
        lParameters+=[PRIM_OMEGA];
    }else
    if (~llSubStringIndex(sToken, "PRIM_NORMAL")){
        lParameters+=[PRIM_NORMAL];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_SPECULAR")){
        lParameters+=[PRIM_SPECULAR];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALPHA_MODE")){
        lParameters+=[PRIM_ALPHA_MODE];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_LINK_TARGET")){
        lParameters+=[PRIM_LINK_TARGET];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALLOW_UNSIT")){
        lParameters+=[PRIM_ALLOW_UNSIT];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SCRIPTED_SIT_ONLY")){
        lParameters+=[PRIM_SCRIPTED_SIT_ONLY];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEMP_ON_REZ")){
        lParameters+=[PRIM_TEMP_ON_REZ];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIT_TARGET")){
        lParameters+=[PRIM_SIT_TARGET];
    }else
    if (~llSubStringIndex(sToken, "PRIM_LINK_TARGET")){
        lParameters+=[PRIM_LINK_TARGET];
        lParameters+=[(integer)sValue];
    }     

    if(1<=link&&0<llGetListLength(lParameters)){
            StatusUpdater("getprimitive,"+(string)link+","+llDumpList2String(llGetLinkPrimitiveParams(link,lParameters), "|"));
    }else{
        StatusUpdater("getprimitive,0");
    }
}   
getPrimitiveParams(string sStr){
    list lParams = llParseString2List(sStr, ["@"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if((integer)sToken<=0){
        return;
    }
    
    integer lLength = llGetListLength(lParams);
    sValue = "";
    integer index=1;
    while(index<lLength){
        sValue=llList2String(lParams, index);
        getPrimitiveParams_Parameters((integer)sToken,sValue);
        ++index;
    }
    sValue="";

}

setPrimitiveParams_Parameters(integer link, string sStr){
    
    list lParams = llParseString2List(sStr, ["|"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    
    if (~llSubStringIndex(sToken, "PRIM_NAME")){
        lParameters+=[PRIM_NAME];
        lParameters+=[sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_DESC")){
        lParameters+=[PRIM_DESC];
        lParameters+=[sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TYPE")){
        lParameters+=[PRIM_TYPE];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SLICE")){
        lParameters+=[PRIM_SLICE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS_SHAPE_TYPE")){
        lParameters+=[PRIM_PHYSICS_SHAPE_TYPE];
        lParameters+=[(integer)sValue];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_MATERIAL")){
        lParameters+=[PRIM_MATERIAL];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS")){
        lParameters+=[PRIM_PHYSICS];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHANTOM")){
        lParameters+=[PRIM_PHANTOM];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POSITION")){
        lParameters+=[PRIM_POSITION];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROTATION")){
        lParameters+=[PRIM_ROTATION];
        lParameters+=[( rotation)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIZE")){
        lParameters+=[PRIM_SIZE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POS_LOCAL")){
        lParameters+=[PRIM_POS_LOCAL];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROT_LOCAL")){
        lParameters+=[PRIM_ROT_LOCAL];
        lParameters+=[(rotation)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXTURE")){
        lParameters+=[PRIM_TEXTURE];
        string sValue2 = llList2String(lParams, 2);
        vector sValue3 = llList2Vector(lParams, 3);
        vector sValue4 = llList2Vector(lParams, 4);
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[(integer)sValue];
        lParameters+=[sValue2];
        lParameters+=[sValue3];
        lParameters+=[sValue4];
        lParameters+=[sValue5];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_TEXT")){
        lParameters+=[PRIM_TEXT];
        lParameters+=[sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue2];
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_COLOR")){
        lParameters+=[PRIM_COLOR];
        lParameters+=[(integer)sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue2];
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_BUMP_SHINY")){
        lParameters+=[PRIM_BUMP_SHINY];
        
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_POINT_LIGHT")){
        lParameters+=[PRIM_POINT_LIGHT];
        lParameters+=[(integer)sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        float sValue3 = llList2Float(lParams, 3);
        float sValue4 = llList2Float(lParams, 4);
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue2];
        lParameters+=[sValue3];
        lParameters+=[sValue4];
        lParameters+=[sValue5];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_FULLBRIGHT")){
        lParameters+=[PRIM_FULLBRIGHT];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_FLEXIBLE")){
        lParameters+=[PRIM_FLEXIBLE];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue3];
        float sValue4 = llList2Float(lParams, 4);
        lParameters+=[sValue4];
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue5];
        float sValue6 = llList2Float(lParams, 6);
        lParameters+=[sValue6];
        vector sValue7 = llList2Vector(lParams, 7);
        lParameters+=[sValue7];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXGEN")){
        lParameters+=[PRIM_TEXGEN];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
    }else
    if (~llSubStringIndex(sToken, "PRIM_GLOW")){
        lParameters+=[PRIM_GLOW];
        lParameters+=[(integer)sValue];
        float sValue2 = llList2Float(lParams, 2);
        lParameters+=[sValue2];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_OMEGA")){
        lParameters+=[PRIM_OMEGA];
        vector sValue1 = llList2Vector(lParams, 1);
        lParameters+=[sValue1];
        float sValue2 = llList2Float(lParams, 2);
        lParameters+=[sValue2];
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_NORMAL")){
        lParameters+=[PRIM_NORMAL];
        
        lParameters+=[(integer)sValue];
        string sValue2 = llList2String(lParams, 2);
        lParameters+=[sValue2];
        vector sValue3 = llList2Vector(lParams, 3);
        lParameters+=[sValue3];
        vector sValue4 = llList2Vector(lParams, 4);
        lParameters+=[sValue4];
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue5];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_SPECULAR")){
        lParameters+=[PRIM_SPECULAR];
        
        lParameters+=[(integer)sValue];
        string sValue2 = llList2String(lParams, 2);
        lParameters+=[sValue2];
        vector sValue3 = llList2Vector(lParams, 3);
        lParameters+=[sValue3];
        vector sValue4 = llList2Vector(lParams, 4);
        lParameters+=[sValue4];
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue5];
        vector sValue6 = llList2Vector(lParams, 6);
        lParameters+=[sValue6];
        integer sValue7 = llList2Integer(lParams, 7);
        lParameters+=[sValue7];
        integer sValue8 = llList2Integer(lParams, 8);
        lParameters+=[sValue8];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALPHA_MODE")){
        lParameters+=[PRIM_ALPHA_MODE];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
        integer sValue3 = llList2Integer(lParams, 3);
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_LINK_TARGET")){
        lParameters+=[PRIM_LINK_TARGET];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALLOW_UNSIT")){
        lParameters+=[PRIM_ALLOW_UNSIT];
        
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SCRIPTED_SIT_ONLY")){
        lParameters+=[PRIM_SCRIPTED_SIT_ONLY];
        
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEMP_ON_REZ")){
        lParameters+=[PRIM_TEMP_ON_REZ];
        
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIT_TARGET")){
        lParameters+=[PRIM_SIT_TARGET];
        
        lParameters+=[(integer)sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        lParameters+=[sValue2];
        rotation sValue3 = llList2Rot(lParams, 3);
        lParameters+=[sValue3];
    }    

    if(1<=link&&1<llGetListLength(lParameters)){
        llSetLinkPrimitiveParamsFast(link,lParameters);  
    }
    lParameters=[];
}    
setPrimitiveParams(string sStr){
    lParameters=[];
    list lParams = llParseString2List(sStr, ["@"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if((integer)sToken<=0){
        return;
    }
    
    integer lLength = llGetListLength(lParams);
    sValue = "";
    integer index=1;
    while(index<lLength){
        lParameters=[];
        sValue=llList2String(lParams, index);
        setPrimitiveParams_Parameters((integer)sToken,sValue);
        ++index;
    }
    sValue="";

}


setParticle_Parameters(string sStr){
    list lParams = llParseString2List(sStr, ["|"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    lParams=[];
    if (~llSubStringIndex(sToken, "PSYS_PART_FLAGS")){
        lParameters+=[PSYS_PART_FLAGS];
        integer iValues=PSYS_PART_INTERP_COLOR_MASK | PSYS_PART_INTERP_SCALE_MASK;
        

        if (~llSubStringIndex(sValue, "PSYS_PART_WIND_MASK")){
            iValues=iValues|PSYS_PART_WIND_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_EMISSIVE_MASK")){
            iValues=iValues|PSYS_PART_EMISSIVE_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BOUNCE_MASK")){
            iValues=iValues|PSYS_PART_BOUNCE_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_FOLLOW_SRC_MASK")){
            iValues=iValues|PSYS_PART_FOLLOW_SRC_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_FOLLOW_VELOCITY_MASK")){
            iValues=iValues|PSYS_PART_FOLLOW_VELOCITY_MASK    ;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_RIBBON_MASK")){
            iValues=iValues|PSYS_PART_RIBBON_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_TARGET_LINEAR_MASK")){
            iValues=iValues|PSYS_PART_TARGET_LINEAR_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_TARGET_POS_MASK")){
            iValues=iValues|PSYS_PART_TARGET_POS_MASK;
        }
        
        lParameters+=[iValues];
        iValues=0;
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_PATTERN")){
        lParameters+=[PSYS_SRC_PATTERN];
        integer iValues;
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_EXPLODE")){
            iValues=iValues|PSYS_SRC_PATTERN_EXPLODE;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_ANGLE_CONE")){
            iValues=iValues|PSYS_SRC_PATTERN_ANGLE_CONE;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_ANGLE")){
            iValues=iValues|PSYS_SRC_PATTERN_ANGLE;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_DROP")){
            iValues=iValues|PSYS_SRC_PATTERN_DROP;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY")){
            iValues=iValues|PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY;
        }
        lParameters+=[iValues];
        iValues=0;
        
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_RADIUS")){
        lParameters+=[PSYS_SRC_BURST_RADIUS];
        lParameters+=[(float)sValue];
    }else    
    if (~llSubStringIndex(sToken, "PSYS_SRC_ANGLE_BEGIN")){
        lParameters+=[PSYS_SRC_ANGLE_BEGIN];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_ANGLE_END")){
        lParameters+=[PSYS_SRC_ANGLE_END];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_TARGET_KEY")){
        lParameters+=[PSYS_SRC_TARGET_KEY];
        lParameters+=[(key)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_COLOR")){
        lParameters+=[PSYS_PART_START_COLOR];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_COLOR")){
        lParameters+=[PSYS_PART_END_COLOR];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_ALPHA")){
        lParameters+=[PSYS_PART_START_ALPHA];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_ALPHA")){
        lParameters+=[PSYS_PART_END_ALPHA];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_SCALE")){
        lParameters+=[PSYS_PART_START_SCALE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_SCALE")){
        lParameters+=[PSYS_PART_END_SCALE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_TEXTURE")){
        lParameters+=[PSYS_SRC_TEXTURE];
        lParameters+=[sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_GLOW")){
        lParameters+=[PSYS_PART_START_GLOW];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_GLOW")){
        lParameters+=[PSYS_PART_END_GLOW];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_BLEND_FUNC_SOURCE")){
        lParameters+=[PSYS_PART_BLEND_FUNC_SOURCE];
        integer iValues;
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE")){
            iValues=iValues|PSYS_PART_BF_ONE;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ZERO")){
            iValues=iValues|PSYS_PART_BF_ZERO;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_SOURCE_ALPHA;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA;
        }
        
        if(iValues==0){
            lParameters+=[(integer)sValue];
        }else{
            lParameters+=[iValues];
        }
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_BLEND_FUNC_DEST")){
        lParameters+=[PSYS_PART_BLEND_FUNC_DEST];
        integer iValues;
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE")){
            iValues=iValues|PSYS_PART_BF_ONE;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ZERO")){
            iValues=iValues|PSYS_PART_BF_ZERO;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_SOURCE_ALPHA;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA;
        }
        
        if(iValues==0){
            lParameters+=[(integer)sValue];
        }else{
            lParameters+=[iValues];
        }
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_MAX_AGE")){
        lParameters+=[PSYS_SRC_MAX_AGE];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_MAX_AGE")){
        lParameters+=[PSYS_PART_MAX_AGE];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_RATE")){
        lParameters+=[PSYS_SRC_BURST_RATE];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_PART_COUNT")){
        lParameters+=[PSYS_SRC_BURST_PART_COUNT];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_ACCEL")){
        lParameters+=[PSYS_SRC_ACCEL];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_OMEGA")){
        lParameters+=[PSYS_SRC_OMEGA];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_SPEED_MIN")){
        lParameters+=[PSYS_SRC_BURST_SPEED_MIN];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_SPEED_MAX")){
        lParameters+=[PSYS_SRC_BURST_SPEED_MAX];
        lParameters+=[(float)sValue];
    }
}
setParticle(string sStr){
    lParameters=[];
    list lParams = llParseString2List(sStr, ["@"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if(sValue=="clear"&&1<=(integer)sToken){
        llLinkParticleSystem((integer)sToken,[]);
        StatusUpdater("particle,clear,"+sToken);
        return;
    }else if(sToken=="clear"){
        llLinkParticleSystem(LINK_SET,[]);
        StatusUpdater("particle,clear");
        return;
    }
    
    if((integer)sToken<=0){
        return;
    }
    
    integer lLength = llGetListLength(lParams);
    sValue = "";
    integer index=1;
    while(index<lLength){
        sValue=llList2String(lParams, index);
        setParticle_Parameters(sValue);
        ++index;
    }
    sValue="";
    llLinkParticleSystem((integer)sToken,lParameters);
    StatusUpdater("particle,set,"+sToken);
    lParameters=[];

}   
integer iSRequest_All; 
integer iCRequest_All; 
UserCommand_Platform(integer iNum, string sStr, key kID) { 
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llToLower(llList2String(lParams, 0));
    
    if(sToken=="s-send-all-attachment"){
        iSRequest_All=0;iCRequest_All=0; llSetTimerEvent(30.0);
        llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,"ALL","");
    }else
    if(sToken=="s-send-all"){
        iSRequest_All=1;iCRequest_All=0; llSetTimerEvent(30.0);
        llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,"ALL","");
    }else
    if(sToken=="c-send-all"){
        iSRequest_All=0;iCRequest_All=1;llSetTimerEvent(30.0);
       llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_REQUEST,"ALL","");
    }else
    if(sToken==SLM_SETTING_SAY_REQUEST){
        sStr=llGetSubString(sStr,llStringLength(SLM_SETTING_SAY_REQUEST)+1,-1);
        SLM_SETTING_SAY_Token=sStr;
        llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,sStr,"");
    }else
    if(sToken==CHARACTER_SLM_SETTING_SAY_REQUEST){
        sStr=llGetSubString(sStr,llStringLength(CHARACTER_SLM_SETTING_SAY_REQUEST)+1,-1);
        SLM_SETTING_SAY_Token=sStr;
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_REQUEST,sStr,"");
    }else
    if(sToken==TITLES_SLM_SETTING_SAY_REQUEST){
        sStr=llGetSubString(sStr,llStringLength(CHARACTER_SLM_SETTING_SAY_REQUEST)+1,-1);
        SLM_SETTING_SAY_Token=sStr;
        llMessageLinked(LINK_TITLES,TITLES_LM_SETTING_REQUEST,sStr,"");
    }else
    if(LM_SETTING_SAVE<=(integer)sToken&&(integer)sToken<=LM_SETTING_EMPTY){
        sStr=llGetSubString(sStr,llStringLength(sToken)+1,-1);
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,setting,"+sToken+","+sStr);
        llMessageLinked(LINK_SAVE,(integer)sToken,sStr,"");
    }else
    if(CHARACTER_LM_SETTING_SAVE<=(integer)sToken&&(integer)sToken<=CHARACTER_LM_SETTING_EMPTY){
        sStr=llGetSubString(sStr,llStringLength(sToken)+1,-1);
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,character,"+sToken+","+sStr);
        llMessageLinked(LINK_CHARACTER,(integer)sToken,sStr,"");
    }else
    if(TITLES_LM_SETTING_SAVE<=(integer)sToken&&(integer)sToken<=TITLES_LM_SETTING_EMPTY){
        sStr=llGetSubString(sStr,llStringLength(sToken)+1,-1);
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,titles,"+sToken+","+sStr);
        llMessageLinked(LINK_TITLES,(integer)sToken,sStr,"");
    }else
    if(sToken=="playsound"||sToken=="triggersound"){
        llMessageLinked(LINK_SET,iNum,"enviroment "+sStr,kID);
    }else
    if(sToken=="particle"){
        integer strlen = llStringLength("particle");
        StatusUpdater("particle");
        sStr=llGetSubString(sStr,strlen+1,-1);
        setParticle(sStr);
    }else
    if(sToken=="primitive"){
        integer strlen = llStringLength("primitive");
        StatusUpdater("primitive");
        sStr=llGetSubString(sStr,strlen+1,-1);
        setPrimitiveParams(sStr);
    }else
    if(sToken=="getprimitive"){
        integer strlen = llStringLength("getprimitive");
        StatusUpdater("getprimitive");
        sStr=llGetSubString(sStr,strlen+1,-1);
        getPrimitiveParams(sStr);
    }
}

UserCommand(integer iNum, string sStr, key kID){
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,platform,17,06,09,109");
    }else
    if (llSubStringIndex(llToLower(sStr),"platform")==0) {
        if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
            return;
        }
        sStr=llGetSubString(sStr,llStringLength("platform"),-1);
        UserCommand_Platform(iNum, sStr, kID);
    }

}
init(){
     g_kWearer = llGetOwner();iSRequest_All=0;iCRequest_All=0;SLM_SETTING_SAY_Token="";
}
default{
    on_rez(integer param) {
      init();
    }

    state_entry() {
       init();
       
    }
    timer() {
        llSetTimerEvent(0.0);init();
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if(iNum == LM_SETTING_EMPTY||iNum==CHARACTER_LM_SETTING_EMPTY||iNum==TITLES_LM_SETTING_EMPTY) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if(SLM_SETTING_SAY_Token!=""&&llSubStringIndex(llToLower(sStr),llToLower(SLM_SETTING_SAY_Token))==0){
                if(iNum==LM_SETTING_RESPONSE){
                     llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,0,S="+sStr);
                }else
                if(iNum==CHARACTER_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,0,C="+sStr);
                }else
                if(iNum==TITLES_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,0,T="+sStr);
                }
            }
        }else
        if(iNum == LM_SETTING_RESPONSE||iNum==CHARACTER_LM_SETTING_RESPONSE||iNum==TITLES_LM_SETTING_RESPONSE) {
            if(SLM_SETTING_SAY_Token!=""&&llSubStringIndex(llToLower(sStr),llToLower(SLM_SETTING_SAY_Token))==0){
                if(iNum==LM_SETTING_RESPONSE){
                     llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,1,S="+sStr);
                }else
                if(iNum==CHARACTER_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,1,C="+sStr);
                }else
                if(iNum==TITLES_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,1,T="+sStr);
                }
                SLM_SETTING_SAY_Token="";
            }else if(iSRequest_All||iCRequest_All){
                if(iNum==LM_SETTING_RESPONSE){
                     llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,A,S="+sStr);
                }else
                if(iNum==CHARACTER_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,A,C="+sStr);
                }else
                if(iNum==TITLES_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,A,T="+sStr);
                }
                if (sStr == "settings=sent"){
                    iSRequest_All=0;iCRequest_All=0;
                }
            }else{
                list lParams = llParseString2List(sStr, ["="], []);
                string sToken = llList2String(lParams, 0);
                string sValue = llList2String(lParams, 1);
            }
        }else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER){
            UserCommand(iNum, sStr, kID);
        }else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_CHARACTER") LINK_CHARACTER = iSender;
            else if (sStr == "LINK_TITLES") LINK_TITLES = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }
    
    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) {
            llResetScript();
        }
    }
}
*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 09/22/2017 05:34:43
//mono




string SLM_SETTING_SAY_REQUEST = "2005";
string CHARACTER_SLM_SETTING_SAY_REQUEST = "2015";
string TITLES_SLM_SETTING_SAY_REQUEST = "2025";

string SLM_SETTING_SAY_Token;

integer BGCOLLAR_CHANNEL_RESPONSE=-667571900;
string sReporterName="PLATFORM";


key  g_kWearer;
list lParameters;

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_CHARACTER = 5;
integer LINK_TITLES=5;
integer LINK_RLV;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_EMPTY = 2004;

integer CHARACTER_LM_SETTING_SAVE = 2010;
integer CHARACTER_LM_SETTING_REQUEST = 2011;
integer CHARACTER_LM_SETTING_RESPONSE = 2012;
integer CHARACTER_LM_SETTING_EMPTY = 2014;

integer TITLES_LM_SETTING_SAVE = 2020;
integer TITLES_LM_SETTING_REQUEST = 2021;
integer TITLES_LM_SETTING_RESPONSE = 2022;
integer TITLES_LM_SETTING_EMPTY = 2024;   
integer iSRequest_All; 
integer iCRequest_All;

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}

setPrimitiveParams_Parameters(integer link, string sStr){
    
    list lParams = llParseString2List(sStr, ["|"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    
    if (~llSubStringIndex(sToken, "PRIM_NAME")){
        lParameters+=[PRIM_NAME];
        lParameters+=[sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_DESC")){
        lParameters+=[PRIM_DESC];
        lParameters+=[sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TYPE")){
        lParameters+=[PRIM_TYPE];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SLICE")){
        lParameters+=[PRIM_SLICE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS_SHAPE_TYPE")){
        lParameters+=[PRIM_PHYSICS_SHAPE_TYPE];
        lParameters+=[(integer)sValue];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_MATERIAL")){
        lParameters+=[PRIM_MATERIAL];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS")){
        lParameters+=[PRIM_PHYSICS];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHANTOM")){
        lParameters+=[PRIM_PHANTOM];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POSITION")){
        lParameters+=[PRIM_POSITION];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROTATION")){
        lParameters+=[PRIM_ROTATION];
        lParameters+=[( rotation)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIZE")){
        lParameters+=[PRIM_SIZE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POS_LOCAL")){
        lParameters+=[PRIM_POS_LOCAL];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROT_LOCAL")){
        lParameters+=[PRIM_ROT_LOCAL];
        lParameters+=[(rotation)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXTURE")){
        lParameters+=[PRIM_TEXTURE];
        string sValue2 = llList2String(lParams, 2);
        vector sValue3 = llList2Vector(lParams, 3);
        vector sValue4 = llList2Vector(lParams, 4);
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[(integer)sValue];
        lParameters+=[sValue2];
        lParameters+=[sValue3];
        lParameters+=[sValue4];
        lParameters+=[sValue5];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_TEXT")){
        lParameters+=[PRIM_TEXT];
        lParameters+=[sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue2];
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_COLOR")){
        lParameters+=[PRIM_COLOR];
        lParameters+=[(integer)sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue2];
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_BUMP_SHINY")){
        lParameters+=[PRIM_BUMP_SHINY];
        
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_POINT_LIGHT")){
        lParameters+=[PRIM_POINT_LIGHT];
        lParameters+=[(integer)sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        float sValue3 = llList2Float(lParams, 3);
        float sValue4 = llList2Float(lParams, 4);
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue2];
        lParameters+=[sValue3];
        lParameters+=[sValue4];
        lParameters+=[sValue5];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_FULLBRIGHT")){
        lParameters+=[PRIM_FULLBRIGHT];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_FLEXIBLE")){
        lParameters+=[PRIM_FLEXIBLE];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue3];
        float sValue4 = llList2Float(lParams, 4);
        lParameters+=[sValue4];
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue5];
        float sValue6 = llList2Float(lParams, 6);
        lParameters+=[sValue6];
        vector sValue7 = llList2Vector(lParams, 7);
        lParameters+=[sValue7];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXGEN")){
        lParameters+=[PRIM_TEXGEN];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
    }else
    if (~llSubStringIndex(sToken, "PRIM_GLOW")){
        lParameters+=[PRIM_GLOW];
        lParameters+=[(integer)sValue];
        float sValue2 = llList2Float(lParams, 2);
        lParameters+=[sValue2];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_OMEGA")){
        lParameters+=[PRIM_OMEGA];
        vector sValue1 = llList2Vector(lParams, 1);
        lParameters+=[sValue1];
        float sValue2 = llList2Float(lParams, 2);
        lParameters+=[sValue2];
        float sValue3 = llList2Float(lParams, 3);
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_NORMAL")){
        lParameters+=[PRIM_NORMAL];
        
        lParameters+=[(integer)sValue];
        string sValue2 = llList2String(lParams, 2);
        lParameters+=[sValue2];
        vector sValue3 = llList2Vector(lParams, 3);
        lParameters+=[sValue3];
        vector sValue4 = llList2Vector(lParams, 4);
        lParameters+=[sValue4];
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue5];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_SPECULAR")){
        lParameters+=[PRIM_SPECULAR];
        
        lParameters+=[(integer)sValue];
        string sValue2 = llList2String(lParams, 2);
        lParameters+=[sValue2];
        vector sValue3 = llList2Vector(lParams, 3);
        lParameters+=[sValue3];
        vector sValue4 = llList2Vector(lParams, 4);
        lParameters+=[sValue4];
        float sValue5 = llList2Float(lParams, 5);
        lParameters+=[sValue5];
        vector sValue6 = llList2Vector(lParams, 6);
        lParameters+=[sValue6];
        integer sValue7 = llList2Integer(lParams, 7);
        lParameters+=[sValue7];
        integer sValue8 = llList2Integer(lParams, 8);
        lParameters+=[sValue8];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALPHA_MODE")){
        lParameters+=[PRIM_ALPHA_MODE];
        lParameters+=[(integer)sValue];
        integer sValue2 = llList2Integer(lParams, 2);
        lParameters+=[sValue2];
        integer sValue3 = llList2Integer(lParams, 3);
        lParameters+=[sValue3];
    }else
    if (~llSubStringIndex(sToken, "PRIM_LINK_TARGET")){
        lParameters+=[PRIM_LINK_TARGET];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALLOW_UNSIT")){
        lParameters+=[PRIM_ALLOW_UNSIT];
        
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SCRIPTED_SIT_ONLY")){
        lParameters+=[PRIM_SCRIPTED_SIT_ONLY];
        
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEMP_ON_REZ")){
        lParameters+=[PRIM_TEMP_ON_REZ];
        
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIT_TARGET")){
        lParameters+=[PRIM_SIT_TARGET];
        
        lParameters+=[(integer)sValue];
        vector sValue2 = llList2Vector(lParams, 2);
        lParameters+=[sValue2];
        rotation sValue3 = llList2Rot(lParams, 3);
        lParameters+=[sValue3];
    }    

    if(1<=link&&1<llGetListLength(lParameters)){
        llSetLinkPrimitiveParamsFast(link,lParameters);  
    }
    lParameters=[];
}    
setPrimitiveParams(string sStr){
    lParameters=[];
    list lParams = llParseString2List(sStr, ["@"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if((integer)sToken<=0){
        return;
    }
    
    integer lLength = llGetListLength(lParams);
    sValue = "";
    integer index=1;
    while(index<lLength){
        lParameters=[];
        sValue=llList2String(lParams, index);
        setPrimitiveParams_Parameters((integer)sToken,sValue);
        ++index;
    }
    sValue="";

}


setParticle_Parameters(string sStr){
    list lParams = llParseString2List(sStr, ["|"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    lParams=[];
    if (~llSubStringIndex(sToken, "PSYS_PART_FLAGS")){
        lParameters+=[PSYS_PART_FLAGS];
        integer iValues=PSYS_PART_INTERP_COLOR_MASK | PSYS_PART_INTERP_SCALE_MASK;
        

        if (~llSubStringIndex(sValue, "PSYS_PART_WIND_MASK")){
            iValues=iValues|PSYS_PART_WIND_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_EMISSIVE_MASK")){
            iValues=iValues|PSYS_PART_EMISSIVE_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BOUNCE_MASK")){
            iValues=iValues|PSYS_PART_BOUNCE_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_FOLLOW_SRC_MASK")){
            iValues=iValues|PSYS_PART_FOLLOW_SRC_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_FOLLOW_VELOCITY_MASK")){
            iValues=iValues|PSYS_PART_FOLLOW_VELOCITY_MASK    ;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_RIBBON_MASK")){
            iValues=iValues|PSYS_PART_RIBBON_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_TARGET_LINEAR_MASK")){
            iValues=iValues|PSYS_PART_TARGET_LINEAR_MASK;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_TARGET_POS_MASK")){
            iValues=iValues|PSYS_PART_TARGET_POS_MASK;
        }
        
        lParameters+=[iValues];
        iValues=0;
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_PATTERN")){
        lParameters+=[PSYS_SRC_PATTERN];
        integer iValues;
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_EXPLODE")){
            iValues=iValues|PSYS_SRC_PATTERN_EXPLODE;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_ANGLE_CONE")){
            iValues=iValues|PSYS_SRC_PATTERN_ANGLE_CONE;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_ANGLE")){
            iValues=iValues|PSYS_SRC_PATTERN_ANGLE;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_DROP")){
            iValues=iValues|PSYS_SRC_PATTERN_DROP;
        }
        if (~llSubStringIndex(sValue, "PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY")){
            iValues=iValues|PSYS_SRC_PATTERN_ANGLE_CONE_EMPTY;
        }
        lParameters+=[iValues];
        iValues=0;
        
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_RADIUS")){
        lParameters+=[PSYS_SRC_BURST_RADIUS];
        lParameters+=[(float)sValue];
    }else    
    if (~llSubStringIndex(sToken, "PSYS_SRC_ANGLE_BEGIN")){
        lParameters+=[PSYS_SRC_ANGLE_BEGIN];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_ANGLE_END")){
        lParameters+=[PSYS_SRC_ANGLE_END];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_TARGET_KEY")){
        lParameters+=[PSYS_SRC_TARGET_KEY];
        lParameters+=[(key)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_COLOR")){
        lParameters+=[PSYS_PART_START_COLOR];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_COLOR")){
        lParameters+=[PSYS_PART_END_COLOR];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_ALPHA")){
        lParameters+=[PSYS_PART_START_ALPHA];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_ALPHA")){
        lParameters+=[PSYS_PART_END_ALPHA];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_SCALE")){
        lParameters+=[PSYS_PART_START_SCALE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_SCALE")){
        lParameters+=[PSYS_PART_END_SCALE];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_TEXTURE")){
        lParameters+=[PSYS_SRC_TEXTURE];
        lParameters+=[sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_START_GLOW")){
        lParameters+=[PSYS_PART_START_GLOW];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_END_GLOW")){
        lParameters+=[PSYS_PART_END_GLOW];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_BLEND_FUNC_SOURCE")){
        lParameters+=[PSYS_PART_BLEND_FUNC_SOURCE];
        integer iValues;
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE")){
            iValues=iValues|PSYS_PART_BF_ONE;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ZERO")){
            iValues=iValues|PSYS_PART_BF_ZERO;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_SOURCE_ALPHA;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA;
        }
        
        if(iValues==0){
            lParameters+=[(integer)sValue];
        }else{
            lParameters+=[iValues];
        }
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_BLEND_FUNC_DEST")){
        lParameters+=[PSYS_PART_BLEND_FUNC_DEST];
        integer iValues;
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE")){
            iValues=iValues|PSYS_PART_BF_ONE;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ZERO")){
            iValues=iValues|PSYS_PART_BF_ZERO;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_DEST_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_DEST_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_COLOR;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_SOURCE_ALPHA;
        }
        if (~llSubStringIndex(sValue, "PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA")){
            iValues=iValues|PSYS_PART_BF_ONE_MINUS_SOURCE_ALPHA;
        }
        
        if(iValues==0){
            lParameters+=[(integer)sValue];
        }else{
            lParameters+=[iValues];
        }
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_MAX_AGE")){
        lParameters+=[PSYS_SRC_MAX_AGE];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_PART_MAX_AGE")){
        lParameters+=[PSYS_PART_MAX_AGE];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_RATE")){
        lParameters+=[PSYS_SRC_BURST_RATE];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_PART_COUNT")){
        lParameters+=[PSYS_SRC_BURST_PART_COUNT];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_ACCEL")){
        lParameters+=[PSYS_SRC_ACCEL];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_OMEGA")){
        lParameters+=[PSYS_SRC_OMEGA];
        lParameters+=[(vector)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_SPEED_MIN")){
        lParameters+=[PSYS_SRC_BURST_SPEED_MIN];
        lParameters+=[(float)sValue];
    }else
    if (~llSubStringIndex(sToken, "PSYS_SRC_BURST_SPEED_MAX")){
        lParameters+=[PSYS_SRC_BURST_SPEED_MAX];
        lParameters+=[(float)sValue];
    }
}
setParticle(string sStr){
    lParameters=[];
    list lParams = llParseString2List(sStr, ["@"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if(sValue=="clear"&&1<=(integer)sToken){
        llLinkParticleSystem((integer)sToken,[]);
        StatusUpdater("particle,clear,"+sToken);
        return;
    }else if(sToken=="clear"){
        llLinkParticleSystem(LINK_SET,[]);
        StatusUpdater("particle,clear");
        return;
    }
    
    if((integer)sToken<=0){
        return;
    }
    
    integer lLength = llGetListLength(lParams);
    sValue = "";
    integer index=1;
    while(index<lLength){
        sValue=llList2String(lParams, index);
        setParticle_Parameters(sValue);
        ++index;
    }
    sValue="";
    llLinkParticleSystem((integer)sToken,lParameters);
    StatusUpdater("particle,set,"+sToken);
    lParameters=[];

}
init(){
     g_kWearer = llGetOwner();iSRequest_All=0;iCRequest_All=0;SLM_SETTING_SAY_Token="";
}

getPrimitiveParams_Parameters(integer link, string sStr){
    lParameters=[];
    list lParams = llParseString2List(sStr, ["|"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    lParams=[];
    if (~llSubStringIndex(sToken, "PRIM_NAME")){
        lParameters+=[PRIM_NAME];
    }else
    if (~llSubStringIndex(sToken, "PRIM_DESC")){
        lParameters+=[PRIM_DESC];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TYPE")){
        lParameters+=[PRIM_TYPE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SLICE")){
        lParameters+=[PRIM_SLICE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS_SHAPE_TYPE")){
        lParameters+=[PRIM_PHYSICS_SHAPE_TYPE];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_MATERIAL")){
        lParameters+=[PRIM_MATERIAL];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHYSICS")){
        lParameters+=[PRIM_PHYSICS];
    }else
    if (~llSubStringIndex(sToken, "PRIM_PHANTOM")){
        lParameters+=[PRIM_PHANTOM];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POSITION")){
        lParameters+=[PRIM_POSITION];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROTATION")){
        lParameters+=[PRIM_ROTATION];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIZE")){
        lParameters+=[PRIM_SIZE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_POS_LOCAL")){
        lParameters+=[PRIM_POS_LOCAL];
    }else
    if (~llSubStringIndex(sToken, "PRIM_ROT_LOCAL")){
        lParameters+=[PRIM_ROT_LOCAL];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXTURE")){
        lParameters+=[PRIM_TEXTURE];
        lParameters+=[(integer)sValue];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_TEXT")){
        lParameters+=[PRIM_TEXT];
    }else
    if (~llSubStringIndex(sToken, "PRIM_COLOR")){
        lParameters+=[PRIM_COLOR];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_BUMP_SHINY")){
        lParameters+=[PRIM_BUMP_SHINY];
        lParameters+=[(integer)sValue];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_POINT_LIGHT")){
        lParameters+=[PRIM_POINT_LIGHT];
    }else                
    if (~llSubStringIndex(sToken, "PRIM_FULLBRIGHT")){
        lParameters+=[PRIM_FULLBRIGHT];
        lParameters+=[(integer)sValue];
    }else    
    if (~llSubStringIndex(sToken, "PRIM_FLEXIBLE")){
        lParameters+=[PRIM_FLEXIBLE];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEXGEN")){
        lParameters+=[PRIM_TEXGEN];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_GLOW")){
        lParameters+=[PRIM_GLOW];
        lParameters+=[(integer)sValue];
    }else        
    if (~llSubStringIndex(sToken, "PRIM_OMEGA")){
        lParameters+=[PRIM_OMEGA];
    }else
    if (~llSubStringIndex(sToken, "PRIM_NORMAL")){
        lParameters+=[PRIM_NORMAL];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_SPECULAR")){
        lParameters+=[PRIM_SPECULAR];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALPHA_MODE")){
        lParameters+=[PRIM_ALPHA_MODE];
        lParameters+=[(integer)sValue];
    }else
    if (~llSubStringIndex(sToken, "PRIM_LINK_TARGET")){
        lParameters+=[PRIM_LINK_TARGET];
        lParameters+=[(integer)sValue];
    }else                    
    if (~llSubStringIndex(sToken, "PRIM_ALLOW_UNSIT")){
        lParameters+=[PRIM_ALLOW_UNSIT];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SCRIPTED_SIT_ONLY")){
        lParameters+=[PRIM_SCRIPTED_SIT_ONLY];
    }else
    if (~llSubStringIndex(sToken, "PRIM_TEMP_ON_REZ")){
        lParameters+=[PRIM_TEMP_ON_REZ];
    }else
    if (~llSubStringIndex(sToken, "PRIM_SIT_TARGET")){
        lParameters+=[PRIM_SIT_TARGET];
    }else
    if (~llSubStringIndex(sToken, "PRIM_LINK_TARGET")){
        lParameters+=[PRIM_LINK_TARGET];
        lParameters+=[(integer)sValue];
    }     

    if(1<=link&&0<llGetListLength(lParameters)){
            StatusUpdater("getprimitive,"+(string)link+","+llDumpList2String(llGetLinkPrimitiveParams(link,lParameters), "|"));
    }else{
        StatusUpdater("getprimitive,0");
    }
}   
getPrimitiveParams(string sStr){
    list lParams = llParseString2List(sStr, ["@"], []);    
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if((integer)sToken<=0){
        return;
    }
    
    integer lLength = llGetListLength(lParams);
    sValue = "";
    integer index=1;
    while(index<lLength){
        sValue=llList2String(lParams, index);
        getPrimitiveParams_Parameters((integer)sToken,sValue);
        ++index;
    }
    sValue="";

} 
UserCommand_Platform(integer iNum, string sStr, key kID) { 
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llToLower(llList2String(lParams, 0));
    
    if(sToken=="s-send-all-attachment"){
        iSRequest_All=0;iCRequest_All=0; llSetTimerEvent(30.0);
        llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,"ALL","");
    }else
    if(sToken=="s-send-all"){
        iSRequest_All=1;iCRequest_All=0; llSetTimerEvent(30.0);
        llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,"ALL","");
    }else
    if(sToken=="c-send-all"){
        iSRequest_All=0;iCRequest_All=1;llSetTimerEvent(30.0);
       llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_REQUEST,"ALL","");
    }else
    if(sToken==SLM_SETTING_SAY_REQUEST){
        sStr=llGetSubString(sStr,llStringLength(SLM_SETTING_SAY_REQUEST)+1,-1);
        SLM_SETTING_SAY_Token=sStr;
        llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,sStr,"");
    }else
    if(sToken==CHARACTER_SLM_SETTING_SAY_REQUEST){
        sStr=llGetSubString(sStr,llStringLength(CHARACTER_SLM_SETTING_SAY_REQUEST)+1,-1);
        SLM_SETTING_SAY_Token=sStr;
        llMessageLinked(LINK_CHARACTER,CHARACTER_LM_SETTING_REQUEST,sStr,"");
    }else
    if(sToken==TITLES_SLM_SETTING_SAY_REQUEST){
        sStr=llGetSubString(sStr,llStringLength(CHARACTER_SLM_SETTING_SAY_REQUEST)+1,-1);
        SLM_SETTING_SAY_Token=sStr;
        llMessageLinked(LINK_TITLES,TITLES_LM_SETTING_REQUEST,sStr,"");
    }else
    if(LM_SETTING_SAVE<=(integer)sToken&&(integer)sToken<=LM_SETTING_EMPTY){
        sStr=llGetSubString(sStr,llStringLength(sToken)+1,-1);
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,setting,"+sToken+","+sStr);
        llMessageLinked(LINK_SAVE,(integer)sToken,sStr,"");
    }else
    if(CHARACTER_LM_SETTING_SAVE<=(integer)sToken&&(integer)sToken<=CHARACTER_LM_SETTING_EMPTY){
        sStr=llGetSubString(sStr,llStringLength(sToken)+1,-1);
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,character,"+sToken+","+sStr);
        llMessageLinked(LINK_CHARACTER,(integer)sToken,sStr,"");
    }else
    if(TITLES_LM_SETTING_SAVE<=(integer)sToken&&(integer)sToken<=TITLES_LM_SETTING_EMPTY){
        sStr=llGetSubString(sStr,llStringLength(sToken)+1,-1);
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,titles,"+sToken+","+sStr);
        llMessageLinked(LINK_TITLES,(integer)sToken,sStr,"");
    }else
    if(sToken=="playsound"||sToken=="triggersound"){
        llMessageLinked(LINK_SET,iNum,"enviroment "+sStr,kID);
    }else
    if(sToken=="particle"){
        integer strlen = llStringLength("particle");
        StatusUpdater("particle");
        sStr=llGetSubString(sStr,strlen+1,-1);
        setParticle(sStr);
    }else
    if(sToken=="primitive"){
        integer strlen = llStringLength("primitive");
        StatusUpdater("primitive");
        sStr=llGetSubString(sStr,strlen+1,-1);
        setPrimitiveParams(sStr);
    }else
    if(sToken=="getprimitive"){
        integer strlen = llStringLength("getprimitive");
        StatusUpdater("getprimitive");
        sStr=llGetSubString(sStr,strlen+1,-1);
        getPrimitiveParams(sStr);
    }
}

UserCommand(integer iNum, string sStr, key kID){
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,platform,17,06,09,109");
    }else
    if (llSubStringIndex(llToLower(sStr),"platform")==0) {
        if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
            return;
        }
        sStr=llGetSubString(sStr,llStringLength("platform"),-1);
        UserCommand_Platform(iNum, sStr, kID);
    }

}
default{
    on_rez(integer param) {
      init();
    }

    state_entry() {
       init();
       
    }
    timer() {
        llSetTimerEvent(0.0);init();
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if(iNum == LM_SETTING_EMPTY||iNum==CHARACTER_LM_SETTING_EMPTY||iNum==TITLES_LM_SETTING_EMPTY) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if(SLM_SETTING_SAY_Token!=""&&llSubStringIndex(llToLower(sStr),llToLower(SLM_SETTING_SAY_Token))==0){
                if(iNum==LM_SETTING_RESPONSE){
                     llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,0,S="+sStr);
                }else
                if(iNum==CHARACTER_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,0,C="+sStr);
                }else
                if(iNum==TITLES_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,0,T="+sStr);
                }
            }
        }else
        if(iNum == LM_SETTING_RESPONSE||iNum==CHARACTER_LM_SETTING_RESPONSE||iNum==TITLES_LM_SETTING_RESPONSE) {
            if(SLM_SETTING_SAY_Token!=""&&llSubStringIndex(llToLower(sStr),llToLower(SLM_SETTING_SAY_Token))==0){
                if(iNum==LM_SETTING_RESPONSE){
                     llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,1,S="+sStr);
                }else
                if(iNum==CHARACTER_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,1,C="+sStr);
                }else
                if(iNum==TITLES_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,1,T="+sStr);
                }
                SLM_SETTING_SAY_Token="";
            }else if(iSRequest_All||iCRequest_All){
                if(iNum==LM_SETTING_RESPONSE){
                     llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,A,S="+sStr);
                }else
                if(iNum==CHARACTER_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,A,C="+sStr);
                }else
                if(iNum==TITLES_LM_SETTING_RESPONSE){
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SETTINGSREPORT,response,A,T="+sStr);
                }
                if (sStr == "settings=sent"){
                    iSRequest_All=0;iCRequest_All=0;
                }
            }else{
                list lParams = llParseString2List(sStr, ["="], []);
                string sToken = llList2String(lParams, 0);
                string sValue = llList2String(lParams, 1);
            }
        }else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER){
            UserCommand(iNum, sStr, kID);
        }else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_CHARACTER") LINK_CHARACTER = iSender;
            else if (sStr == "LINK_TITLES") LINK_TITLES = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }
    
    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) {
            llResetScript();
        }
    }
}

