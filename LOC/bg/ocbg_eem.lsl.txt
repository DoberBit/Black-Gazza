//start_unprocessed_text
/*integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="EEM";

key  g_kWearer;

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_RLV;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;
integer CHARACTER_LM_SETTING_RESPONSE = 2012;

integer RLV_CMD = 6000;


string g_sGlobalToken = "global_";
string g_sEscortToken = "escort_";
string g_sEnviromentToken = "enviroment_";
string g_sAuthToken = "auth_";
list g_lTrustGroup;
list g_lSpecialGroup;

string g_sTurned = "turned";
integer g_iTurned=0;
integer g_iEnable=0;
integer mood;

string g_sRestrictedZone;
integer g_iRestrictedZone;
integer g_iEscorted;

integer iRequest_Sensor;
integer iRequest_Collision;

integer iPunishHold;

integer g_iEnviroment=1;
integer g_iEnviroment_Used=0;

string sStr_escort="escort";


integer group(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    string group=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, 0) ,[OBJECT_GROUP]);
     
    integer length = llGetListLength(g_lTrustGroup);
    integer found = llListFindList(g_lTrustGroup, [group]);
    if (length>0 && ~found){
        return 2;
    }
    
    length = llGetListLength(g_lSpecialGroup);
    found = llListFindList(g_lSpecialGroup, [group]);
    if (length>0 && ~found){
        return 1;
    }
    
    return 0;
}
string sStr_WEARERNAMES="%WEARERNAMES%";
UserCommand_Escort(integer iNum, string sStr, key kID) { 
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);   
    if(llToLower(sToken)=="enable"){
        if(sValue=="1"||sValue=="0"){
            g_iTurned=(integer)sValue;
        }else{
            if(g_iTurned){
                g_iTurned=0;
            }else{
                g_iTurned=1;
            }
        }
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + g_sTurned+"="+(string)g_iTurned,"");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + g_sTurned+"="+(string)g_iTurned,"");
        if(g_iTurned){
            if(g_kWearer!=llGetOwnerKey(kID)){
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Escort Turned On. They cant now enter restricted area without an escort or they get punished.",kID);
            }
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Escort Turned On. You cant now enter restricted area without an escort or you get punished.",g_kWearer);
        }else{
            if(g_kWearer!=llGetOwnerKey(kID)){
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Escort Turned Off. They can now enter restricted area without an escort and wont get punished.",kID);
            }
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Escort Turned Off. You can now enter restricted area without an escort and wont get punished.",g_kWearer);
        }
        if(sValue=="main"){
            llMessageLinked(LINK_SET,iNum,"options",kID);
        }
        
    }else
     if(llToLower(sToken)=="request"){
        if(g_iTurned==0){
            return;
        }
        IsRequest((float) sValue);
    }else
    if(llToLower(sToken)=="restrictedzone"){
        if(g_iTurned==0){
            return;
        }
        if(1<mood&&g_iEnable){
            sStr=llGetSubString(sStr,llStringLength("escort restrictedzone")+1,-1);
            if(g_sRestrictedZone!=sStr){
                iPunishHold=0;
            }
            g_sRestrictedZone=sStr;
            if(g_sRestrictedZone==""||g_sRestrictedZone==" "||g_sRestrictedZone=="none"){
                g_iRestrictedZone=0;
            }else{
                g_iRestrictedZone=1;
            }
            
        }    
    }
}

IsSitting(){
    list lParams = llGetObjectDetails(llGetOwner(), [OBJECT_ROOT,OBJECT_POS] );
    string sRoot = llList2String(lParams, 0);
    string sPos = llList2String(lParams, 1);
    if(sRoot!=(string)g_kWearer){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SIT,1,"+sRoot+","+sPos);
    }else{
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SIT,0");
    }
}
IsSensor(float fRange){
    if(fRange<=1){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,-1");
    }else{
        llSensor("", NULL_KEY, AGENT, fRange, PI);
    }
}
IsRequest(float fValue){
    iRequest_Sensor=1;
    iRequest_Collision=1;
    IsSitting();
    IsSensor(fValue);
}

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}
integer iMoveEnforced;
integer iMoveMessage;
vector g_vPos = ZERO_VECTOR;
key g_kLeashedTo = NULL_KEY;
integer g_iPoseTo = FALSE;
integer g_iJustMoved;
integer g_iTargetHandle;
float g_fLength;
integer g_iTurnModeOn;
MoveToTarget(key kTarget, float fLength, integer iTurn){
    StatusUpdater("movetotarget,"+(string)kTarget+","+(string)fLength+","+(string)iTurn);
    MoveClear();
    if(g_iStay){
        StatusUpdater("movetotarget,stay");
        return;
    }
    iMoveMessage=FALSE;
    g_kLeashedTo=kTarget;
    g_fLength=fLength;
    g_iTurnModeOn=iTurn;
    g_vPos = llList2Vector(llGetObjectDetails(g_kLeashedTo, [OBJECT_POS]), 0);
    llTargetRemove(g_iTargetHandle);
    llStopMoveToTarget();
    g_iTargetHandle = llTarget(g_vPos,g_fLength);
    if (g_vPos != ZERO_VECTOR||g_fLength<0.3) {
        g_iPoseTo = FALSE;
        StatusUpdater("movetotarget,valid");
        iMoveEnforced=TRUE;
        llMoveToTarget(g_vPos, g_fLength);
    }else{
        StatusUpdater("movetotarget,invalid");
        MoveClear();
    }
}
MoveToPos(float x, float y, float z, float fLength, integer iTurn){
    
    MoveClear();
    if(g_iStay){
        StatusUpdater("movetopos,stay");
        return;
    }
    g_fLength=fLength;
    g_iTurnModeOn=iTurn;
    iMoveMessage=FALSE;               
    g_vPos = (vector)("<"+(string)x+","+(string)y+","+(string)z+">");
    StatusUpdater("movetopos,"+(string)g_vPos+","+(string)fLength+","+(string)iTurn);
    llTargetRemove(g_iTargetHandle);
    llStopMoveToTarget();
    g_iTargetHandle = llTarget(g_vPos,g_fLength);
    if (g_vPos != ZERO_VECTOR||g_fLength<0.3) {
        g_iPoseTo = TRUE;
        StatusUpdater("movetopos,valid");
        iMoveEnforced=TRUE;
        llMoveToTarget(g_vPos, g_fLength);
    }else{
        StatusUpdater("movetopos,invalid");
        MoveClear();
    }
}
MoveClear(){
    StatusUpdater("move,clear");
    iMoveEnforced=FALSE;
    iMoveMessage=FALSE;
    g_kLeashedTo=NULL_KEY;
    g_iPoseTo = FALSE;
    g_fLength=0;
    g_iTurnModeOn=FALSE;
    g_vPos = ZERO_VECTOR;
    llTargetRemove(g_iTargetHandle);
    llStopMoveToTarget();
    g_iTargetHandle = 0;
}
integer iPERMISSION_TAKE_CONTROLS;
integer g_iStay;
integer g_iDoStay;
Stay(string sValue){
    StatusUpdater("stay,cmd,"+sValue);
    if((sValue=="stay"&&g_iStay==FALSE)||sValue=="stayop"){
        g_iStay=TRUE;
        StatusUpdater("stay,status,-1");
        llRequestPermissions(g_kWearer, PERMISSION_TAKE_CONTROLS);
    }else
    if((sValue=="clear"||sValue=="unstay"||sValue=="unstayop"||mood<1)&&g_iStay==TRUE){
        StatusUpdater("stay,status,0");
        g_iStay=FALSE;
        if(iPERMISSION_TAKE_CONTROLS){
            iPERMISSION_TAKE_CONTROLS=FALSE;
            llReleaseControls();
        }
    }
    
}

integer iAttached;
integer g_iCameraControl;
CameraControl(string sValue){
    if(sValue=="info"){
        StatusUpdater("camera,isattached,"+(string)iAttached);
        StatusUpdater("camera,mood,"+(string)mood);
        if (llGetPermissions() & PERMISSION_CONTROL_CAMERA){
            StatusUpdater("camera,permission,control_camera,1");
        }else{
            StatusUpdater("camera,permission,control_camera,0");
        }
        if (llGetPermissions() & PERMISSION_TRACK_CAMERA){
            StatusUpdater("camera,permission,track_camera,1");
        }else{
            StatusUpdater("camera,permission,track_camera,0");
        }
        StatusUpdater("camera,cameracontrol,"+(string)g_iCameraControl);
    }else
    if(sValue=="request"){
        StatusUpdater("camera,permission,request");
        lCameraSettings=[];g_iCameraControl=FALSE;
        if(iAttached){
            StatusUpdater("camera,permission,status,request");
            llRequestPermissions(g_kWearer, PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA);
        }else{
            StatusUpdater("camera,control,status,notattached");
        }
    }else
    if(sValue=="clear"){
        StatusUpdater("camera,control,clear");
        lCameraSettings=[];
        if(!iAttached){
            StatusUpdater("camera,control,status,notattached");
        }else
        if(!g_iCameraControl){
            StatusUpdater("camera,control,status,notcontrol");
        }else
        if (llGetPermissions() & PERMISSION_CONTROL_CAMERA) {
            StatusUpdater("camera,control,status,clear");
            llClearCameraParams();
        }else{
            StatusUpdater("camera,control,status,0");
        }
        g_iCameraControl=FALSE;
    }
}

CameraTrack(string sValue){
    StatusUpdater("camera,track,cmd,"+sValue);
    if(sValue=="track"||sValue=="trackop"){
        StatusUpdater("camera,track,status,-1");
        if(!iAttached){
            StatusUpdater("camera,track,status,notattached");
        }else
        if (llGetPermissions() & PERMISSION_TRACK_CAMERA) {
            StatusUpdater("camera,track,status,1");
            StatusUpdater("camera,track,pos,"+(string)llGetCameraPos());
            StatusUpdater("camera,track,rot,"+(string)llGetCameraRot());
        }else{
            StatusUpdater("camera,track,status,0");
        }
    }
}

list lCameraSettings;
setCamera(string sStr){

    StatusUpdater("camera,control,setting,init");
    if(!iAttached){
        StatusUpdater("camera,control,status,notattached");
        return;
    }

    list lParams = llParseString2List(sStr, ["@"], []);    
    integer index=0;
    lCameraSettings=[];
    while(index<llGetListLength(lParams)){
        list lTmp=llParseString2List(llList2String(lParams, index), ["|"], []);   
        string sToken = llList2String(lTmp, 0);
        string sValue = llList2String(lTmp, 1);
        lTmp=[];
        
        if(sToken=="CAMERA_ACTIVE"){
            lCameraSettings+=[CAMERA_ACTIVE,(integer)sValue];
        }
        if(sToken=="CAMERA_BEHINDNESS_ANGLE"){
            lCameraSettings+=[CAMERA_BEHINDNESS_ANGLE,(float)sValue];
        }
        if(sToken=="CAMERA_BEHINDNESS_LAG"){
            lCameraSettings+=[CAMERA_BEHINDNESS_LAG,(float)sValue];
        }
        if(sToken=="CAMERA_DISTANCE"){
            lCameraSettings+=[CAMERA_DISTANCE,(float)sValue];
        }
        if(sToken=="CAMERA_FOCUS"){
            lCameraSettings+=[CAMERA_FOCUS,(vector)sValue];
        }
        if(sToken=="CAMERA_FOCUS_LAG"){
            lCameraSettings+=[CAMERA_FOCUS_LAG,(float)sValue];
        }
        if(sToken=="CAMERA_FOCUS_LOCKED"){
            lCameraSettings+=[CAMERA_FOCUS_LOCKED,(integer)sValue];
        }
        if(sToken=="CAMERA_FOCUS_OFFSET"){
            lCameraSettings+=[CAMERA_FOCUS_OFFSET,(vector)sValue];
        }
        if(sToken=="CAMERA_FOCUS_THRESHOLD"){
            lCameraSettings+=[CAMERA_FOCUS_THRESHOLD,(float)sValue];
        }
        if(sToken=="CAMERA_PITCH"){
            lCameraSettings+=[CAMERA_PITCH,(float)sValue];
        }
        if(sToken=="CAMERA_POSITION"){
            lCameraSettings+=[CAMERA_POSITION,(vector)sValue];
        }
        if(sToken=="CAMERA_POSITION_LAG"){
            lCameraSettings+=[CAMERA_POSITION_LAG,(float)sValue];
        }
        if(sToken=="CAMERA_POSITION_LOCKED"){
            lCameraSettings+=[CAMERA_POSITION_LOCKED,(integer)sValue];
        }
        if(sToken=="CAMERA_POSITION_THRESHOLD"){
            lCameraSettings+=[CAMERA_POSITION_THRESHOLD,(float)sValue];
        }
        ++index;
    }
    lParams=[];
    if(2<=llGetListLength(lCameraSettings)){
        StatusUpdater("camera,control,setting,"+llDumpList2String(lCameraSettings,"|"));
        if (llGetPermissions() & PERMISSION_CONTROL_CAMERA) {
            StatusUpdater("camera,control,status,1");
            g_iCameraControl=TRUE;
            llSetCameraParams(lCameraSettings);
        }else{
            StatusUpdater("camera,control,status,0");
        }
    }else{
        StatusUpdater("camera,control,setting,too few");
    }
    
}
PlaySound(string sValue, float fVolume){
    StatusUpdater("playsound,play,"+sValue+","+(string)fVolume);
    if(sValue=="clear"||(key)sValue==NULL_KEY){
        llPlaySound(NULL_KEY,0.0);
    }else{
        llPlaySound(sValue,fVolume);
    }    
}

TriggerSound(string sValue, float fVolume){
    StatusUpdater("triggersound,play,"+sValue+","+(string)fVolume);
    if(sValue=="clear"||(key)sValue==NULL_KEY){
        llTriggerSound(NULL_KEY,0.0);
    }else{
        llTriggerSound(sValue,fVolume);
    }
}

UserCommand_Enviroment(integer iNum, string sStr, key kID) { 
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    
    if(llToLower(sToken)=="request"){
        IsRequest((float) sValue);
    }else
    if(llToLower(sToken)=="set"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("set,mood");
            return;
        }
        Command(LINK_SET,iNum,sStr,"set",kID);    
    }else
    if(llToLower(sToken)=="force"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("force,mood");
            return;
        }
        g_iEnviroment_Used=1;
        Command(LINK_RLV,RLV_CMD,sStr,"force","Enviroment");    
    }else
    if(llToLower(sToken)=="stay"||llToLower(sToken)=="unstay"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("stay,mood");
            return;
        }
        Stay(llToLower(sToken));
    }else
    if(llToLower(sToken)=="movetotarget"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("movetotarget,mood");
            return;
        }
       MoveToTarget(llList2Key(lParams, 1), llList2Float(lParams, 2), llList2Integer(lParams, 3));
    }else
    if(llToLower(sToken)=="movetopos"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("movetopos,mood");
            return;
        }
        MoveToPos(llList2Float(lParams, 1),llList2Float(lParams, 2),llList2Float(lParams, 3), llList2Float(lParams, 4), llList2Integer(lParams, 5));
    }else
    if(llToLower(sToken)=="moveclear"){
       MoveClear();
    }else
    if(llToLower(sToken)=="moveinfo"){
        StatusUpdater("move,info,enforced,"+(string)iMoveEnforced);
        StatusUpdater("move,info,message,"+(string)iMoveMessage);
        StatusUpdater("move,info,vPos,"+(string)g_vPos);
        StatusUpdater("move,info,kLeashedTo,"+(string)g_kLeashedTo);
        StatusUpdater("move,info,iPoseTo,"+(string)g_iPoseTo);
        StatusUpdater("move,info,fLength,"+(string)g_fLength);
        StatusUpdater("move,info,iTurnModeOn,"+(string)g_iTurnModeOn);
    }else
    if(llToLower(sToken)=="track"||llToLower(sToken)=="untrack"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("track,mood");
            return;
        }
        CameraTrack(llToLower(sToken));
    }else
    if(llToLower(sToken)=="control"){
        if(mood<=1){
            StatusUpdater("controlcamera,mood");
            return;
        }
        CameraControl(llToLower(sValue));
    }else
    if(llToLower(sToken)=="setcamera"){
        if(mood<=1){
            StatusUpdater("setcamera,mood");
            return;
        }
        integer strlen = llStringLength("setcamera");
        StatusUpdater("setcamera");
        sStr=llGetSubString(sStr,strlen+1,-1);
        setCamera(sStr);
    }else
    if(llToLower(sToken)=="release"){
        g_iEnviroment_Used=1;
        Enviroment_SafeWord(); 
    }else
    if(llToLower(sToken)=="playsound"){
        if(mood<=1){
            StatusUpdater("playsound,mood");
            return;
        }
       PlaySound(sValue,llList2Float(lParams,2));
    }else
    if(llToLower(sToken)=="triggersound"){
        if(mood<=1){
            StatusUpdater("triggersound,mood");
            return;
        }
        TriggerSound(sValue, llList2Float(lParams,2));
    }
    else{
        if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
        }
        
        if(llToLower(sToken)=="enable"){
            if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            if(sValue=="1"||sValue=="0"){
                g_iEnviroment=(integer)sValue;
            }else{
                g_iEnviroment=!g_iEnviroment;
            }
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE, g_sEnviromentToken+"enviroment="+(string)g_iEnviroment,"");
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE, g_sEnviromentToken+"enviroment="+(string)g_iEnviroment,"");
            if(g_iEnviroment){
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Environment Turned On.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Environment Turned On.",g_kWearer);
            }else{
                Enviroment_SafeWord();
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Environment Turned Off.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Environment Turned Off.",g_kWearer);
            }
            if(sValue=="main"){
                llMessageLinked(LINK_SET,iNum,"options",kID);
            }
            
        }else
        if(llToLower(sToken)=="override"){
            g_iEnviroment_Used=1;
            Command(LINK_RLV,RLV_CMD,sStr,"override","Enviroment");    
        }else
        if(llToLower(sToken)=="unset"){
            Command(LINK_SET,iNum,sStr,"unset",kID); 
        }else
        if(llToLower(sToken)=="playsoundop"){
           PlaySound(sValue,llList2Float(lParams,2));
        }else
        if(llToLower(sToken)=="triggersoundop"){
            TriggerSound(sValue, llList2Float(lParams,2));
        }else
        if(llToLower(sToken)=="stayop"||llToLower(sToken)=="unstayop"){
            Stay(llToLower(sToken));
        }else
        if(llToLower(sToken)=="movetotargetop"){
           MoveToTarget(llList2Key(lParams, 1), llList2Float(lParams, 2), llList2Integer(lParams, 3));
        }else
        if(llToLower(sToken)=="movetoposop"){
            MoveToPos(llList2Float(lParams, 1),llList2Float(lParams, 2),llList2Float(lParams, 3), llList2Float(lParams, 4), llList2Integer(lParams, 5));
        }else
        if(llToLower(sToken)=="trackop"||llToLower(sToken)=="untrackop"){
            CameraTrack(llToLower(sToken));
        }else
        if(llToLower(sToken)=="controlop"){
            CameraControl(llToLower(sValue));
        }else
        if(llToLower(sToken)=="setcameraop"){
            integer strlen = llStringLength("setcameraop");
            StatusUpdater("setcameraop");
            sStr=llGetSubString(sStr,strlen+1,-1);
            setCamera(sStr);
        }
    
    
    }
    
}
UserCommand(integer iNum, string sStr, key kID){
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,enviroment&escort module,17,09,28,115");
    }else{
        if (llSubStringIndex(llToLower(sStr),"enviroment")==0) {
            if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            sStr=llGetSubString(sStr,llStringLength("enviroment")+1,-1);
            UserCommand_Enviroment(iNum, sStr, kID);
        }else
        if (llSubStringIndex(llToLower(sStr),"environment")==0) {
            if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            sStr=llGetSubString(sStr,llStringLength("environment")+1,-1);
            UserCommand_Enviroment(iNum, sStr, kID);
        }else
        if (llSubStringIndex(llToLower(sStr),sStr_escort)==0) {
            if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            sStr=llGetSubString(sStr,llStringLength(sStr_escort)+1,-1);
            UserCommand_Escort(iNum, sStr, kID);
        }
        else{
            if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            if (llSubStringIndex(llToLower(sStr),"menu escort")==0) {
                
                UserCommand_Escort(iNum, "enable main", kID);
            }else
            if (llSubStringIndex(llToLower(sStr),"menu enviroment")==0) {
            
                UserCommand_Enviroment(iNum, "enable main", kID);
            }else
            if (llSubStringIndex(llToLower(sStr),"menu environment")==0) {
            
                UserCommand_Enviroment(iNum, "enable main", kID);
            }
        }
    }
}
Enviroment_SafeWord(){
    if(!g_iEnviroment_Used){
        return;
    }
    StatusUpdater("enviroment,safeword");
    llMessageLinked(LINK_RLV,RLV_CMD, "clear","Enviroment");
    llMessageLinked(LINK_RLV,RLV_CMD, "setdebug_RenderResolutionDivisor:0=force,setenv_daytime:-1=force","Enviroment");
    g_iEnviroment_Used=0;
}
Command(integer LINK,integer CMD,string sStr, string sCut, key kID){
    integer strlen = llStringLength(sCut);
    sStr=llGetSubString(sStr,strlen+1,-1);
    llMessageLinked(LINK, CMD, sStr,kID);
}
default{
    on_rez(integer param) {
        g_kWearer = llGetOwner();
        iPERMISSION_TAKE_CONTROLS=FALSE;
        iAttached=llGetAttached();
        Stay("clear");CameraTrack("clear");CameraControl("request");
        MoveClear();
    }

    state_entry() {
       g_kWearer = llGetOwner();
       
    }
    
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        
        if(iNum == LM_SETTING_RESPONSE||iNum==CHARACTER_LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);

            if (sToken == g_sEnviromentToken+"enviroment"){
                g_iEnviroment=(integer)sValue ;
                if(g_iEnviroment==0){
                    Enviroment_SafeWord();Stay("clear");CameraTrack("clear");CameraControl("clear");MoveClear();
                }
            }    
            else if (sToken == g_sAuthToken+"trustgroup") {g_lTrustGroup = llParseString2List(sValue, [","], [""]); }
            else if (sToken == g_sAuthToken+"specialgroup") {g_lSpecialGroup = llParseString2List(sValue, [","], [""]); }
            else if (sToken == g_sEscortToken+g_sTurned) { 
                g_iTurned=(integer)sValue;
                if(g_iTurned){
                    if(mood>1){
                    g_iEnable=1;
                    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
                    llSetTimerEvent(10.0); 
                    }else{
                        
                        llSetTimerEvent(0.0); 
                        g_iEnable=0;  
                        g_iRestrictedZone=0;    
                        iRequest_Collision=0; iRequest_Sensor=0;                    
                    }
                }else{
                    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=-1", "");
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=-1", "");
                    llSetTimerEvent(0.0); 
                    g_iRestrictedZone=0;
                    g_iEnable=0;                      
                    iRequest_Collision=0; iRequest_Sensor=0;    
                }
            }else if (sToken == g_sGlobalToken+"moodvalue"){
                mood=(integer)sValue;
                if(mood<1){
                    Enviroment_SafeWord();Stay("clear");CameraTrack("clear");CameraControl("clear");MoveClear();
                }
                if(g_iTurned){
                    if(mood>1){
                        g_iEnable=1;
                        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
                        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
                        llSetTimerEvent(10.0); 
                    }else{
                        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=-1", "");
                        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=-1", "");
                        llSetTimerEvent(0.0); 
                        g_iEnable=0;  
                        g_iRestrictedZone=0;
                        iRequest_Collision=0; iRequest_Sensor=0;                    
                    }
                }else{
                    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=-1", "");
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=-1", "");
                }
            }
        }else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER){
            UserCommand(iNum, sStr, kID);
        }else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }
    timer()
    {  
        if(g_iTurned==0){
            llSetTimerEvent(0.0);
        }else
        if(iRequest_Sensor==1){
            llSensor("", NULL_KEY, AGENT, 5.0, PI);
        }else
        if(g_iRestrictedZone==0){
            llSetTimerEvent(0.0);
        }
    }
    sensor( integer detected )
    {

        if(iRequest_Sensor){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,1,N,"+(string)detected);
            while(detected--)
            {
                key sKey=llDetectedKey(detected);
                integer role=group(sKey);
                vector currentPos = llGetPos();
                integer distance=llRound(llVecDist(currentPos,llList2Vector(llGetObjectDetails(sKey, [OBJECT_POS]), 0)));
                llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,1,A,"+(string)sKey+","+(string)role+","+(string)distance);
                
            }
            iRequest_Sensor=0;
        }else if(g_iTurned){
            g_iEscorted=0;
            if(0<iPunishHold){
                iPunishHold--;
            }
            while(detected--&&g_iEscorted==0)
            {
                key kKey=llDetectedKey(detected);
                if(kKey!=g_kWearer){
                    integer role=group(kKey);
                    if(role==2){
                        g_iEscorted=1;
                    }
                }
            }
            if(g_iEscorted){
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=1", "");
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=1", "");
            }else{
                if(g_iRestrictedZone&&iPunishHold==0){
                    iPunishHold=90;
                    llMessageLinked(LINK_ROOT,CMD_TRUSTED,g_sRestrictedZone,g_kWearer);
                }
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
            }
            g_iRestrictedZone=0;
        }
        
    }
    no_sensor(){
        if(iRequest_Sensor){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,0");
            iRequest_Sensor=0;
        }else 
        if(g_iTurned){
            if(0<iPunishHold){
                iPunishHold--;
            }
            g_iEscorted=0;
            if(g_iRestrictedZone&&iPunishHold==0){
                iPunishHold=90;
                llMessageLinked(LINK_ROOT,CMD_TRUSTED,g_sRestrictedZone,g_kWearer);
            }
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
            g_iRestrictedZone=0;
        }
        
    }
    collision(integer iIntCollided ){
        if(iRequest_Collision){
            integer vBitType;
            string vStrType;
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COLLISION,N,"+(string)iIntCollided);
            do
            {
                vBitType = llDetectedType( --iIntCollided );
                if (vBitType & AGENT_BY_LEGACY_NAME){
                    
                    vStrType = "avatar";
                    key sKey=llDetectedKey( iIntCollided );
                    integer role=group(sKey);
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COLLISION,C,"+(string)sKey+","+(string)role+","+vStrType+","+(string)vBitType);
                    
                }else{
                    vStrType = "object";
                    integer role=0;
                    key sKey=llDetectedKey( iIntCollided );
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COLLISION,C,"+(string)sKey+","+(string)role+","+vStrType+","+(string)vBitType); 
                }    
            }
            while (iIntCollided);
            iRequest_Collision=0;
        }
    }
    run_time_permissions(integer iPerm) {
        if(g_iStay&&iPERMISSION_TAKE_CONTROLS==FALSE){
            if (iPerm & PERMISSION_TAKE_CONTROLS) {
                llTakeControls(CONTROL_ROT_LEFT | CONTROL_ROT_RIGHT | CONTROL_LBUTTON | CONTROL_ML_LBUTTON, FALSE, FALSE);/|/disbale all controls but left mouse button (for stay cmd)
                iPERMISSION_TAKE_CONTROLS=TRUE;StatusUpdater("stay,status,1");
            }else{
                g_iStay=FALSE;
                StatusUpdater("stay,status,0");
            }
        }
        if (iPerm & (PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA)){
                StatusUpdater("camera,permission,status,confirmed");
                llClearCameraParams();
        }
        
    }
    at_target(integer iNum, vector vTarget, vector vMe) {
        if(!iMoveEnforced){
            return;
        }
        if(iMoveMessage!=2){
            StatusUpdater("move,at_target");
        }
        
        llStopMoveToTarget();
        llTargetRemove(g_iTargetHandle);
        if(g_iPoseTo){
            if(iMoveMessage!=2){
                StatusUpdater("move,at_target,pose");
            }
        }else
        if(g_kLeashedTo) {
            if(iMoveMessage!=2){
                StatusUpdater("move,at_target,target");
            }
            g_vPos = llList2Vector(llGetObjectDetails(g_kLeashedTo,[OBJECT_POS]),0);
            g_iTargetHandle = llTarget(g_vPos,g_fLength);
            if(g_iJustMoved) {
                vector pointTo = llList2Vector(llGetObjectDetails(g_kLeashedTo,[OBJECT_POS]),0) - llGetPos();
                float  turnAngle = llAtan2(pointTo.x, pointTo.y);/|/ - myAngle;
                if (g_iTurnModeOn) llMessageLinked(LINK_RLV, RLV_CMD, "setrot:" + (string)(turnAngle) + "=force", NULL_KEY);   /|/transient command, doesn;t need our fakekey
                g_iJustMoved = 0;
            }
        }
        if(iMoveMessage!=2){
            iMoveMessage=2;
        }
    }

    not_at_target() {
        if(!iMoveEnforced){
            return;
        }
        g_iJustMoved = 1;
        if(iMoveMessage!=1){
            StatusUpdater("move,not_at_target");
            iMoveMessage=1;
        }
        if(g_iPoseTo){
            g_iTargetHandle = llTarget(g_vPos, g_fLength);
            if (g_vPos != ZERO_VECTOR) llMoveToTarget(g_vPos,1.0);
        }else
        if(g_kLeashedTo) {
            vector vNewPos = llList2Vector(llGetObjectDetails(g_kLeashedTo,[OBJECT_POS]),0);
            if (g_vPos != vNewPos) {
                llTargetRemove(g_iTargetHandle);
                g_vPos = vNewPos;
                g_iTargetHandle = llTarget(g_vPos, g_fLength);
            }
            if (g_vPos != ZERO_VECTOR) llMoveToTarget(g_vPos,1.0);
            else llStopMoveToTarget();
        }
    }
    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) {
            llResetScript();
        }else 
        if(iChange & CHANGED_REGION){
            StatusUpdater("change,region");
            Stay("clear");CameraTrack("clear");CameraControl("clear");MoveClear();
            g_iEscorted=0;
            g_iRestrictedZone=0;
            iRequest_Collision=0; iRequest_Sensor=0;
            Enviroment_SafeWord();
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
        }else 
        if (iChange & CHANGED_TELEPORT){
            StatusUpdater("change,teleport");
            Stay("clear");CameraTrack("clear");CameraControl("clear");MoveClear();
            g_iEscorted=0;
            g_iRestrictedZone=0;
            iRequest_Collision=0; iRequest_Sensor=0;
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
        }
    }
}
*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 09/28/2017 11:40:10
//mono




integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="EEM";

key  g_kWearer;

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_RLV;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;
integer CHARACTER_LM_SETTING_RESPONSE = 2012;

integer RLV_CMD = 6000;


string g_sGlobalToken = "global_";
string g_sEscortToken = "escort_";
string g_sEnviromentToken = "enviroment_";
string g_sAuthToken = "auth_";
list g_lTrustGroup;
list g_lSpecialGroup;

string g_sTurned = "turned";
integer g_iTurned=0;
integer g_iEnable=0;
integer mood;

string g_sRestrictedZone;
integer g_iRestrictedZone;
integer g_iEscorted;

integer iRequest_Sensor;
integer iRequest_Collision;

integer iPunishHold;

integer g_iEnviroment=1;
integer g_iEnviroment_Used=0;

string sStr_escort="escort";
string sStr_WEARERNAMES="%WEARERNAMES%";
integer iMoveEnforced;
integer iMoveMessage;
vector g_vPos = ZERO_VECTOR;
key g_kLeashedTo = NULL_KEY;
integer g_iPoseTo = FALSE;
integer g_iJustMoved;
integer g_iTargetHandle;
float g_fLength;
integer g_iTurnModeOn;
integer iPERMISSION_TAKE_CONTROLS;
integer g_iStay;

integer iAttached;
integer g_iCameraControl;

list lCameraSettings;

TriggerSound(string sValue, float fVolume){
    StatusUpdater("triggersound,play,"+sValue+","+(string)fVolume);
    if(sValue=="clear"||(key)sValue==NULL_KEY){
        llTriggerSound(NULL_KEY,0.0);
    }else{
        llTriggerSound(sValue,fVolume);
    }
}
PlaySound(string sValue, float fVolume){
    StatusUpdater("playsound,play,"+sValue+","+(string)fVolume);
    if(sValue=="clear"||(key)sValue==NULL_KEY){
        llPlaySound(NULL_KEY,0.0);
    }else{
        llPlaySound(sValue,fVolume);
    }    
}
MoveToPos(float x, float y, float z, float fLength, integer iTurn){
    
    MoveClear();
    if(g_iStay){
        StatusUpdater("movetopos,stay");
        return;
    }
    g_fLength=fLength;
    g_iTurnModeOn=iTurn;
    iMoveMessage=FALSE;               
    g_vPos = (vector)("<"+(string)x+","+(string)y+","+(string)z+">");
    StatusUpdater("movetopos,"+(string)g_vPos+","+(string)fLength+","+(string)iTurn);
    llTargetRemove(g_iTargetHandle);
    llStopMoveToTarget();
    g_iTargetHandle = llTarget(g_vPos,g_fLength);
    if (g_vPos != ZERO_VECTOR||g_fLength<0.3) {
        g_iPoseTo = TRUE;
        StatusUpdater("movetopos,valid");
        iMoveEnforced=TRUE;
        llMoveToTarget(g_vPos, g_fLength);
    }else{
        StatusUpdater("movetopos,invalid");
        MoveClear();
    }
}

IsSitting(){
    list lParams = llGetObjectDetails(llGetOwner(), [OBJECT_ROOT,OBJECT_POS] );
    string sRoot = llList2String(lParams, 0);
    string sPos = llList2String(lParams, 1);
    if(sRoot!=(string)g_kWearer){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SIT,1,"+sRoot+","+sPos);
    }else{
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SIT,0");
    }
}
IsSensor(float fRange){
    if(fRange<=1){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,-1");
    }else{
        llSensor("", NULL_KEY, AGENT, fRange, PI);
    }
}
IsRequest(float fValue){
    iRequest_Sensor=1;
    iRequest_Collision=1;
    IsSitting();
    IsSensor(fValue);
}
setCamera(string sStr){

    StatusUpdater("camera,control,setting,init");
    if(!iAttached){
        StatusUpdater("camera,control,status,notattached");
        return;
    }

    list lParams = llParseString2List(sStr, ["@"], []);    
    integer index=0;
    lCameraSettings=[];
    while(index<llGetListLength(lParams)){
        list lTmp=llParseString2List(llList2String(lParams, index), ["|"], []);   
        string sToken = llList2String(lTmp, 0);
        string sValue = llList2String(lTmp, 1);
        lTmp=[];
        
        if(sToken=="CAMERA_ACTIVE"){
            lCameraSettings+=[CAMERA_ACTIVE,(integer)sValue];
        }
        if(sToken=="CAMERA_BEHINDNESS_ANGLE"){
            lCameraSettings+=[CAMERA_BEHINDNESS_ANGLE,(float)sValue];
        }
        if(sToken=="CAMERA_BEHINDNESS_LAG"){
            lCameraSettings+=[CAMERA_BEHINDNESS_LAG,(float)sValue];
        }
        if(sToken=="CAMERA_DISTANCE"){
            lCameraSettings+=[CAMERA_DISTANCE,(float)sValue];
        }
        if(sToken=="CAMERA_FOCUS"){
            lCameraSettings+=[CAMERA_FOCUS,(vector)sValue];
        }
        if(sToken=="CAMERA_FOCUS_LAG"){
            lCameraSettings+=[CAMERA_FOCUS_LAG,(float)sValue];
        }
        if(sToken=="CAMERA_FOCUS_LOCKED"){
            lCameraSettings+=[CAMERA_FOCUS_LOCKED,(integer)sValue];
        }
        if(sToken=="CAMERA_FOCUS_OFFSET"){
            lCameraSettings+=[CAMERA_FOCUS_OFFSET,(vector)sValue];
        }
        if(sToken=="CAMERA_FOCUS_THRESHOLD"){
            lCameraSettings+=[CAMERA_FOCUS_THRESHOLD,(float)sValue];
        }
        if(sToken=="CAMERA_PITCH"){
            lCameraSettings+=[CAMERA_PITCH,(float)sValue];
        }
        if(sToken=="CAMERA_POSITION"){
            lCameraSettings+=[CAMERA_POSITION,(vector)sValue];
        }
        if(sToken=="CAMERA_POSITION_LAG"){
            lCameraSettings+=[CAMERA_POSITION_LAG,(float)sValue];
        }
        if(sToken=="CAMERA_POSITION_LOCKED"){
            lCameraSettings+=[CAMERA_POSITION_LOCKED,(integer)sValue];
        }
        if(sToken=="CAMERA_POSITION_THRESHOLD"){
            lCameraSettings+=[CAMERA_POSITION_THRESHOLD,(float)sValue];
        }
        ++index;
    }
    lParams=[];
    if(2<=llGetListLength(lCameraSettings)){
        StatusUpdater("camera,control,setting,"+llDumpList2String(lCameraSettings,"|"));
        if (llGetPermissions() & PERMISSION_CONTROL_CAMERA) {
            StatusUpdater("camera,control,status,1");
            g_iCameraControl=TRUE;
            llSetCameraParams(lCameraSettings);
        }else{
            StatusUpdater("camera,control,status,0");
        }
    }else{
        StatusUpdater("camera,control,setting,too few");
    }
    
}


integer group(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    string group=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, 0) ,[OBJECT_GROUP]);
     
    integer length = llGetListLength(g_lTrustGroup);
    integer found = llListFindList(g_lTrustGroup, [group]);
    if (length>0 && ~found){
        return 2;
    }
    
    length = llGetListLength(g_lSpecialGroup);
    found = llListFindList(g_lSpecialGroup, [group]);
    if (length>0 && ~found){
        return 1;
    }
    
    return 0;
}
UserCommand_Escort(integer iNum, string sStr, key kID) { 
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);   
    if(llToLower(sToken)=="enable"){
        if(sValue=="1"||sValue=="0"){
            g_iTurned=(integer)sValue;
        }else{
            if(g_iTurned){
                g_iTurned=0;
            }else{
                g_iTurned=1;
            }
        }
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + g_sTurned+"="+(string)g_iTurned,"");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + g_sTurned+"="+(string)g_iTurned,"");
        if(g_iTurned){
            if(g_kWearer!=llGetOwnerKey(kID)){
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Escort Turned On. They cant now enter restricted area without an escort or they get punished.",kID);
            }
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Escort Turned On. You cant now enter restricted area without an escort or you get punished.",g_kWearer);
        }else{
            if(g_kWearer!=llGetOwnerKey(kID)){
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Escort Turned Off. They can now enter restricted area without an escort and wont get punished.",kID);
            }
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Escort Turned Off. You can now enter restricted area without an escort and wont get punished.",g_kWearer);
        }
        if(sValue=="main"){
            llMessageLinked(LINK_SET,iNum,"options",kID);
        }
        
    }else
     if(llToLower(sToken)=="request"){
        if(g_iTurned==0){
            return;
        }
        IsRequest((float) sValue);
    }else
    if(llToLower(sToken)=="restrictedzone"){
        if(g_iTurned==0){
            return;
        }
        if(1<mood&&g_iEnable){
            sStr=llGetSubString(sStr,llStringLength("escort restrictedzone")+1,-1);
            if(g_sRestrictedZone!=sStr){
                iPunishHold=0;
            }
            g_sRestrictedZone=sStr;
            if(g_sRestrictedZone==""||g_sRestrictedZone==" "||g_sRestrictedZone=="none"){
                g_iRestrictedZone=0;
            }else{
                g_iRestrictedZone=1;
            }
            
        }    
    }
}

UserCommand_Enviroment(integer iNum, string sStr, key kID) { 
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    
    if(llToLower(sToken)=="request"){
        IsRequest((float) sValue);
    }else
    if(llToLower(sToken)=="set"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("set,mood");
            return;
        }
        Command(LINK_SET,iNum,sStr,"set",kID);    
    }else
    if(llToLower(sToken)=="force"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("force,mood");
            return;
        }
        g_iEnviroment_Used=1;
        Command(LINK_RLV,RLV_CMD,sStr,"force","Enviroment");    
    }else
    if(llToLower(sToken)=="stay"||llToLower(sToken)=="unstay"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("stay,mood");
            return;
        }
        Stay(llToLower(sToken));
    }else
    if(llToLower(sToken)=="movetotarget"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("movetotarget,mood");
            return;
        }
       MoveToTarget(llList2Key(lParams, 1), llList2Float(lParams, 2), llList2Integer(lParams, 3));
    }else
    if(llToLower(sToken)=="movetopos"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("movetopos,mood");
            return;
        }
        MoveToPos(llList2Float(lParams, 1),llList2Float(lParams, 2),llList2Float(lParams, 3), llList2Float(lParams, 4), llList2Integer(lParams, 5));
    }else
    if(llToLower(sToken)=="moveclear"){
       MoveClear();
    }else
    if(llToLower(sToken)=="moveinfo"){
        StatusUpdater("move,info,enforced,"+(string)iMoveEnforced);
        StatusUpdater("move,info,message,"+(string)iMoveMessage);
        StatusUpdater("move,info,vPos,"+(string)g_vPos);
        StatusUpdater("move,info,kLeashedTo,"+(string)g_kLeashedTo);
        StatusUpdater("move,info,iPoseTo,"+(string)g_iPoseTo);
        StatusUpdater("move,info,fLength,"+(string)g_fLength);
        StatusUpdater("move,info,iTurnModeOn,"+(string)g_iTurnModeOn);
    }else
    if(llToLower(sToken)=="track"||llToLower(sToken)=="untrack"){
        if(mood<=1||g_iEnviroment==FALSE){
            StatusUpdater("track,mood");
            return;
        }
        CameraTrack(llToLower(sToken));
    }else
    if(llToLower(sToken)=="control"){
        if(mood<=1){
            StatusUpdater("controlcamera,mood");
            return;
        }
        CameraControl(llToLower(sValue));
    }else
    if(llToLower(sToken)=="setcamera"){
        if(mood<=1){
            StatusUpdater("setcamera,mood");
            return;
        }
        integer strlen = llStringLength("setcamera");
        StatusUpdater("setcamera");
        sStr=llGetSubString(sStr,strlen+1,-1);
        setCamera(sStr);
    }else
    if(llToLower(sToken)=="release"){
        g_iEnviroment_Used=1;
        Enviroment_SafeWord(); 
    }else
    if(llToLower(sToken)=="playsound"){
        if(mood<=1){
            StatusUpdater("playsound,mood");
            return;
        }
       PlaySound(sValue,llList2Float(lParams,2));
    }else
    if(llToLower(sToken)=="triggersound"){
        if(mood<=1){
            StatusUpdater("triggersound,mood");
            return;
        }
        TriggerSound(sValue, llList2Float(lParams,2));
    }
    else{
        if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
        }
        
        if(llToLower(sToken)=="enable"){
            if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            if(sValue=="1"||sValue=="0"){
                g_iEnviroment=(integer)sValue;
            }else{
                g_iEnviroment=!g_iEnviroment;
            }
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE, g_sEnviromentToken+"enviroment="+(string)g_iEnviroment,"");
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE, g_sEnviromentToken+"enviroment="+(string)g_iEnviroment,"");
            if(g_iEnviroment){
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Environment Turned On.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Environment Turned On.",g_kWearer);
            }else{
                Enviroment_SafeWord();
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Environment Turned Off.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Environment Turned Off.",g_kWearer);
            }
            if(sValue=="main"){
                llMessageLinked(LINK_SET,iNum,"options",kID);
            }
            
        }else
        if(llToLower(sToken)=="override"){
            g_iEnviroment_Used=1;
            Command(LINK_RLV,RLV_CMD,sStr,"override","Enviroment");    
        }else
        if(llToLower(sToken)=="unset"){
            Command(LINK_SET,iNum,sStr,"unset",kID); 
        }else
        if(llToLower(sToken)=="playsoundop"){
           PlaySound(sValue,llList2Float(lParams,2));
        }else
        if(llToLower(sToken)=="triggersoundop"){
            TriggerSound(sValue, llList2Float(lParams,2));
        }else
        if(llToLower(sToken)=="stayop"||llToLower(sToken)=="unstayop"){
            Stay(llToLower(sToken));
        }else
        if(llToLower(sToken)=="movetotargetop"){
           MoveToTarget(llList2Key(lParams, 1), llList2Float(lParams, 2), llList2Integer(lParams, 3));
        }else
        if(llToLower(sToken)=="movetoposop"){
            MoveToPos(llList2Float(lParams, 1),llList2Float(lParams, 2),llList2Float(lParams, 3), llList2Float(lParams, 4), llList2Integer(lParams, 5));
        }else
        if(llToLower(sToken)=="trackop"||llToLower(sToken)=="untrackop"){
            CameraTrack(llToLower(sToken));
        }else
        if(llToLower(sToken)=="controlop"){
            CameraControl(llToLower(sValue));
        }else
        if(llToLower(sToken)=="setcameraop"){
            integer strlen = llStringLength("setcameraop");
            StatusUpdater("setcameraop");
            sStr=llGetSubString(sStr,strlen+1,-1);
            setCamera(sStr);
        }
    
    
    }
    
}
UserCommand(integer iNum, string sStr, key kID){
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,enviroment&escort module,17,09,28,115");
    }else{
        if (llSubStringIndex(llToLower(sStr),"enviroment")==0) {
            if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            sStr=llGetSubString(sStr,llStringLength("enviroment")+1,-1);
            UserCommand_Enviroment(iNum, sStr, kID);
        }else
        if (llSubStringIndex(llToLower(sStr),"environment")==0) {
            if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            sStr=llGetSubString(sStr,llStringLength("environment")+1,-1);
            UserCommand_Enviroment(iNum, sStr, kID);
        }else
        if (llSubStringIndex(llToLower(sStr),sStr_escort)==0) {
            if(iNum!=CMD_TRUSTED&&iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            sStr=llGetSubString(sStr,llStringLength(sStr_escort)+1,-1);
            UserCommand_Escort(iNum, sStr, kID);
        }
        else{
            if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                return;
            }
            if (llSubStringIndex(llToLower(sStr),"menu escort")==0) {
                
                UserCommand_Escort(iNum, "enable main", kID);
            }else
            if (llSubStringIndex(llToLower(sStr),"menu enviroment")==0) {
            
                UserCommand_Enviroment(iNum, "enable main", kID);
            }else
            if (llSubStringIndex(llToLower(sStr),"menu environment")==0) {
            
                UserCommand_Enviroment(iNum, "enable main", kID);
            }
        }
    }
}
Stay(string sValue){
    StatusUpdater("stay,cmd,"+sValue);
    if((sValue=="stay"&&g_iStay==FALSE)||sValue=="stayop"){
        g_iStay=TRUE;
        StatusUpdater("stay,status,-1");
        llRequestPermissions(g_kWearer, PERMISSION_TAKE_CONTROLS);
    }else
    if((sValue=="clear"||sValue=="unstay"||sValue=="unstayop"||mood<1)&&g_iStay==TRUE){
        StatusUpdater("stay,status,0");
        g_iStay=FALSE;
        if(iPERMISSION_TAKE_CONTROLS){
            iPERMISSION_TAKE_CONTROLS=FALSE;
            llReleaseControls();
        }
    }
    
}

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}
MoveToTarget(key kTarget, float fLength, integer iTurn){
    StatusUpdater("movetotarget,"+(string)kTarget+","+(string)fLength+","+(string)iTurn);
    MoveClear();
    if(g_iStay){
        StatusUpdater("movetotarget,stay");
        return;
    }
    iMoveMessage=FALSE;
    g_kLeashedTo=kTarget;
    g_fLength=fLength;
    g_iTurnModeOn=iTurn;
    g_vPos = llList2Vector(llGetObjectDetails(g_kLeashedTo, [OBJECT_POS]), 0);
    llTargetRemove(g_iTargetHandle);
    llStopMoveToTarget();
    g_iTargetHandle = llTarget(g_vPos,g_fLength);
    if (g_vPos != ZERO_VECTOR||g_fLength<0.3) {
        g_iPoseTo = FALSE;
        StatusUpdater("movetotarget,valid");
        iMoveEnforced=TRUE;
        llMoveToTarget(g_vPos, g_fLength);
    }else{
        StatusUpdater("movetotarget,invalid");
        MoveClear();
    }
}
MoveClear(){
    StatusUpdater("move,clear");
    iMoveEnforced=FALSE;
    iMoveMessage=FALSE;
    g_kLeashedTo=NULL_KEY;
    g_iPoseTo = FALSE;
    g_fLength=0;
    g_iTurnModeOn=FALSE;
    g_vPos = ZERO_VECTOR;
    llTargetRemove(g_iTargetHandle);
    llStopMoveToTarget();
    g_iTargetHandle = 0;
}
Enviroment_SafeWord(){
    if(!g_iEnviroment_Used){
        return;
    }
    StatusUpdater("enviroment,safeword");
    llMessageLinked(LINK_RLV,RLV_CMD, "clear","Enviroment");
    llMessageLinked(LINK_RLV,RLV_CMD, "setdebug_RenderResolutionDivisor:0=force,setenv_daytime:-1=force","Enviroment");
    g_iEnviroment_Used=0;
}
Command(integer LINK,integer CMD,string sStr, string sCut, key kID){
    integer strlen = llStringLength(sCut);
    sStr=llGetSubString(sStr,strlen+1,-1);
    llMessageLinked(LINK, CMD, sStr,kID);
}

CameraTrack(string sValue){
    StatusUpdater("camera,track,cmd,"+sValue);
    if(sValue=="track"||sValue=="trackop"){
        StatusUpdater("camera,track,status,-1");
        if(!iAttached){
            StatusUpdater("camera,track,status,notattached");
        }else
        if (llGetPermissions() & PERMISSION_TRACK_CAMERA) {
            StatusUpdater("camera,track,status,1");
            StatusUpdater("camera,track,pos,"+(string)llGetCameraPos());
            StatusUpdater("camera,track,rot,"+(string)llGetCameraRot());
        }else{
            StatusUpdater("camera,track,status,0");
        }
    }
}
CameraControl(string sValue){
    if(sValue=="info"){
        StatusUpdater("camera,isattached,"+(string)iAttached);
        StatusUpdater("camera,mood,"+(string)mood);
        if (llGetPermissions() & PERMISSION_CONTROL_CAMERA){
            StatusUpdater("camera,permission,control_camera,1");
        }else{
            StatusUpdater("camera,permission,control_camera,0");
        }
        if (llGetPermissions() & PERMISSION_TRACK_CAMERA){
            StatusUpdater("camera,permission,track_camera,1");
        }else{
            StatusUpdater("camera,permission,track_camera,0");
        }
        StatusUpdater("camera,cameracontrol,"+(string)g_iCameraControl);
    }else
    if(sValue=="request"){
        StatusUpdater("camera,permission,request");
        lCameraSettings=[];g_iCameraControl=FALSE;
        if(iAttached){
            StatusUpdater("camera,permission,status,request");
            llRequestPermissions(g_kWearer, PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA);
        }else{
            StatusUpdater("camera,control,status,notattached");
        }
    }else
    if(sValue=="clear"){
        StatusUpdater("camera,control,clear");
        lCameraSettings=[];
        if(!iAttached){
            StatusUpdater("camera,control,status,notattached");
        }else
        if(!g_iCameraControl){
            StatusUpdater("camera,control,status,notcontrol");
        }else
        if (llGetPermissions() & PERMISSION_CONTROL_CAMERA) {
            StatusUpdater("camera,control,status,clear");
            llClearCameraParams();
        }else{
            StatusUpdater("camera,control,status,0");
        }
        g_iCameraControl=FALSE;
    }
}
default{
    on_rez(integer param) {
        g_kWearer = llGetOwner();
        iPERMISSION_TAKE_CONTROLS=FALSE;
        iAttached=llGetAttached();
        Stay("clear");CameraTrack("clear");CameraControl("request");
        MoveClear();
    }

    state_entry() {
       g_kWearer = llGetOwner();
       
    }
    
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        
        if(iNum == LM_SETTING_RESPONSE||iNum==CHARACTER_LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);

            if (sToken == g_sEnviromentToken+"enviroment"){
                g_iEnviroment=(integer)sValue ;
                if(g_iEnviroment==0){
                    Enviroment_SafeWord();Stay("clear");CameraTrack("clear");CameraControl("clear");MoveClear();
                }
            }    
            else if (sToken == g_sAuthToken+"trustgroup") {g_lTrustGroup = llParseString2List(sValue, [","], [""]); }
            else if (sToken == g_sAuthToken+"specialgroup") {g_lSpecialGroup = llParseString2List(sValue, [","], [""]); }
            else if (sToken == g_sEscortToken+g_sTurned) { 
                g_iTurned=(integer)sValue;
                if(g_iTurned){
                    if(mood>1){
                    g_iEnable=1;
                    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
                    llSetTimerEvent(10.0); 
                    }else{
                        
                        llSetTimerEvent(0.0); 
                        g_iEnable=0;  
                        g_iRestrictedZone=0;    
                        iRequest_Collision=0; iRequest_Sensor=0;                    
                    }
                }else{
                    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=-1", "");
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=-1", "");
                    llSetTimerEvent(0.0); 
                    g_iRestrictedZone=0;
                    g_iEnable=0;                      
                    iRequest_Collision=0; iRequest_Sensor=0;    
                }
            }else if (sToken == g_sGlobalToken+"moodvalue"){
                mood=(integer)sValue;
                if(mood<1){
                    Enviroment_SafeWord();Stay("clear");CameraTrack("clear");CameraControl("clear");MoveClear();
                }
                if(g_iTurned){
                    if(mood>1){
                        g_iEnable=1;
                        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
                        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
                        llSetTimerEvent(10.0); 
                    }else{
                        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=-1", "");
                        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=-1", "");
                        llSetTimerEvent(0.0); 
                        g_iEnable=0;  
                        g_iRestrictedZone=0;
                        iRequest_Collision=0; iRequest_Sensor=0;                    
                    }
                }else{
                    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=-1", "");
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=-1", "");
                }
            }
        }else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER){
            UserCommand(iNum, sStr, kID);
        }else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }
    timer()
    {  
        if(g_iTurned==0){
            llSetTimerEvent(0.0);
        }else
        if(iRequest_Sensor==1){
            llSensor("", NULL_KEY, AGENT, 5.0, PI);
        }else
        if(g_iRestrictedZone==0){
            llSetTimerEvent(0.0);
        }
    }
    sensor( integer detected )
    {

        if(iRequest_Sensor){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,1,N,"+(string)detected);
            while(detected--)
            {
                key sKey=llDetectedKey(detected);
                integer role=group(sKey);
                vector currentPos = llGetPos();
                integer distance=llRound(llVecDist(currentPos,llList2Vector(llGetObjectDetails(sKey, [OBJECT_POS]), 0)));
                llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,1,A,"+(string)sKey+","+(string)role+","+(string)distance);
                
            }
            iRequest_Sensor=0;
        }else if(g_iTurned){
            g_iEscorted=0;
            if(0<iPunishHold){
                iPunishHold--;
            }
            while(detected--&&g_iEscorted==0)
            {
                key kKey=llDetectedKey(detected);
                if(kKey!=g_kWearer){
                    integer role=group(kKey);
                    if(role==2){
                        g_iEscorted=1;
                    }
                }
            }
            if(g_iEscorted){
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=1", "");
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=1", "");
            }else{
                if(g_iRestrictedZone&&iPunishHold==0){
                    iPunishHold=90;
                    llMessageLinked(LINK_ROOT,CMD_TRUSTED,g_sRestrictedZone,g_kWearer);
                }
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
            }
            g_iRestrictedZone=0;
        }
        
    }
    no_sensor(){
        if(iRequest_Sensor){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"SENSOR,0");
            iRequest_Sensor=0;
        }else 
        if(g_iTurned){
            if(0<iPunishHold){
                iPunishHold--;
            }
            g_iEscorted=0;
            if(g_iRestrictedZone&&iPunishHold==0){
                iPunishHold=90;
                llMessageLinked(LINK_ROOT,CMD_TRUSTED,g_sRestrictedZone,g_kWearer);
            }
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sEscortToken + sStr_escort + "=0", "");
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sEscortToken + sStr_escort + "=0", "");
            g_iRestrictedZone=0;
        }
        
    }
    collision(integer iIntCollided ){
        if(iRequest_Collision){
            integer vBitType;
            string vStrType;
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COLLISION,N,"+(string)iIntCollided);
            do
            {
                vBitType = llDetectedType( --iIntCollided );
                if (vBitType & AGENT_BY_LEGACY_NAME){
                    
                    vStrType = "avatar";
                    key sKey=llDetectedKey( iIntCollided );
                    integer role=group(sKey);
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COLLISION,C,"+(string)sKey+","+(string)role+","+vStrType+","+(string)vBitType);
                    
                }else{
                    vStrType = "object";
                    integer role=0;
                    key sKey=llDetectedKey( iIntCollided );
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"COLLISION,C,"+(string)sKey+","+(string)role+","+vStrType+","+(string)vBitType); 
                }    
            }
            while (iIntCollided);
            iRequest_Collision=0;
        }
    }
    run_time_permissions(integer iPerm) {
        if(g_iStay&&iPERMISSION_TAKE_CONTROLS==FALSE){
            if (iPerm & PERMISSION_TAKE_CONTROLS) {
                llTakeControls(CONTROL_ROT_LEFT | CONTROL_ROT_RIGHT | CONTROL_LBUTTON | CONTROL_ML_LBUTTON, FALSE, FALSE);
                iPERMISSION_TAKE_CONTROLS=TRUE;StatusUpdater("stay,status,1");
            }else{
                g_iStay=FALSE;
                StatusUpdater("stay,status,0");
            }
        }
        if (iPerm & (PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA)){
                StatusUpdater("camera,permission,status,confirmed");
                llClearCameraParams();
        }
        
    }
    at_target(integer iNum, vector vTarget, vector vMe) {
        if(!iMoveEnforced){
            return;
        }
        if(iMoveMessage!=2){
            StatusUpdater("move,at_target");
        }
        
        llStopMoveToTarget();
        llTargetRemove(g_iTargetHandle);
        if(g_iPoseTo){
            if(iMoveMessage!=2){
                StatusUpdater("move,at_target,pose");
            }
        }else
        if(g_kLeashedTo) {
            if(iMoveMessage!=2){
                StatusUpdater("move,at_target,target");
            }
            g_vPos = llList2Vector(llGetObjectDetails(g_kLeashedTo,[OBJECT_POS]),0);
            g_iTargetHandle = llTarget(g_vPos,g_fLength);
            if(g_iJustMoved) {
                vector pointTo = llList2Vector(llGetObjectDetail