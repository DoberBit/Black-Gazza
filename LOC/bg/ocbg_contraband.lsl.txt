//start_unprocessed_text
/*integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_EVERYONE = 504;
integer CMD_SAFEWORD = 510;
integer NOTIFY = 1002;
integer REBOOT = -1000;
integer LINK_DIALOG = 3;

integer LINK_SAVE = 5;
integer LINK_ANIM = 6;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer MENUNAME_REQUEST = 3000;
integer ANIM_STOP = 7001;
integer ANIM_LIST_RESPONSE = 7003;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

string g_sParentMenu = "";

list g_lContraband;


key g_kWearer;
list g_lMenuIDs;
integer g_iMenuStride=3;
integer g_iIsEnabled=1;

string g_sContrabandToken = "contraband_";
integer mood;
string g_sGlobalToken = "global_";
integer iSettingSent;

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
integer CONTRABAND_CHANNEL_RESPONSE =-667571969;
string sReporterName="CONTRABAND";

integer g_iInmateSlot;
SendUpdate(){
    string sMsg=llEscapeURL(llDumpList2String(g_lContraband,","));
    sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%2C"], []), "!2C");
    if(sMsg==""){
        sMsg="!0!";
    }
    llHTTPRequest( "https:/|/goriest-fastener.000webhostapp.com/inmate/contrabandset.php?key="+(string)g_kWearer+"&slot="+(string)g_iInmateSlot+"&word="+sMsg,[],"");
}
Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [kID]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kID, kMenuID, sName];
    
}

string DePunctuate(string sStr) {
    string sLastChar = llGetSubString(sStr, -1, -1);
    if (sLastChar == "," || sLastChar == "." || sLastChar == "!" || sLastChar == "?") sStr = llGetSubString(sStr, 0, -2);
    return sStr;
}

integer iAccess=1;
string g_sAuthToken = "auth_";
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess=3){
        return TRUE;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Contraband)", kCmdGiver);
    return FALSE;
}

string WordPrompt() {
    string sPrompt = "%WEARERNAMES% has the following contrabands: ";
    integer iLength = llGetListLength(g_lContraband);
    if (!iLength) sPrompt = "%WEARERNAMES% has no contraband.";
    else if (iLength == 1) sPrompt += llList2String(g_lContraband, 0);
    else if (iLength == 2) sPrompt += llList2String(g_lContraband, 0) + " and " + llList2String(g_lContraband, 1);
    else sPrompt += llDumpList2String(llDeleteSubList(g_lContraband, -1, -1), ", ") + ", and " + llList2String(g_lContraband, -1);

    return sPrompt;
}

UserCommand(integer iNum, string sStr, key kID, integer remenu) { 
    
    sStr=llStringTrim(sStr,STRING_TRIM);
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llList2String(lParams, 0);
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,contraband,17,12,29,120");
    }else
    if (llToLower(sStr) == "contraband" || llToLower(sStr) == "menu contraband"||llToLower(sStr) == "contrabands" || llToLower(sStr) == "menu contrabands") {
        if (!CheckCommandAuth(kID,iNum)) return;
        MenuContraband(kID, iNum);
    }else if (llToLower(sCommand)=="contraband"||llToLower(sCommand)=="contrabands"){
        if (!CheckCommandAuth(kID,iNum)) return;
        sCommand = llToLower(llList2String(lParams, 1));
        if ((sCommand == "add"&&((mood>1&&g_iIsEnabled)||kID==g_kWearer))||sCommand =="adddeb") {  
            list lNewBadWords = llDeleteSubList(lParams, 0, 1);
            if (llGetListLength(lNewBadWords)){
                while (llGetListLength(lNewBadWords)){
                    string sNewWord=DePunctuate(llList2String(lNewBadWords,-1));
                    if (remenu) {
                        string sCRLF= llUnescapeURL("%0A");
                        if (~llSubStringIndex(sNewWord, sCRLF)) {
                            list lTemp = llParseString2List(sNewWord, [sCRLF], []);
                            lNewBadWords = llDeleteSubList(lNewBadWords,-1,-1);
                            lNewBadWords = lTemp + lNewBadWords;
                            sNewWord=DePunctuate(llList2String(lNewBadWords,-1));
                        }
                    }
                    if (llListFindList(g_lContraband, [sNewWord]) == -1) g_lContraband += [sNewWord];
                    lNewBadWords=llDeleteSubList(lNewBadWords,-1,-1);
                }
                if (llGetListLength(g_lContraband)) {
                    if(6<llGetListLength(g_lContraband)){
                        g_lContraband=llList2List( g_lContraband,0, 5);
                    }
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sContrabandToken+"words=" + llDumpList2String(g_lContraband, ","), "");
                    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+WordPrompt(),kID);
                }
                if (remenu) MenuContraband(kID,iNum);
            } else {
                string sText = "\n- Submit the new badword in the field below.\n- Submit a blank field to go back.";
                Dialog(kID, sText, [], [], 0, iNum, "ContrabandsAdd");
            }
            SendUpdate();
        }else if ((sCommand == "remove"&&((mood>1&&g_iIsEnabled)||kID==g_kWearer))||sCommand=="removedeb") {
            list lNewBadWords = llDeleteSubList(lParams, 0, 1);
            if (llGetListLength(lNewBadWords)){
                while (llGetListLength(lNewBadWords)){
                    string sNewWord=DePunctuate(llList2String(lNewBadWords,-1));
                    integer iIndex=llListFindList(g_lContraband, [sNewWord]);
                    if (~iIndex) g_lContraband = llDeleteSubList(g_lContraband,iIndex,iIndex);
                    lNewBadWords=llDeleteSubList(lNewBadWords,-1,-1);
                }
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sContrabandToken+"words=" + llDumpList2String(g_lContraband, ","), "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+WordPrompt() ,kID);
                if (remenu) MenuContraband(kID,iNum);
            } else {
                if (g_lContraband) Dialog(kID, "Select a contraband to remove or clear them all.", g_lContraband, ["Clear", "BACK"],0, iNum, "ContrabandsRemove");
                else {
                    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"The list of badwords is currently empty.",kID);
                    MenuContraband(kID,iNum);
                }
            }
            SendUpdate();
        }  
        else if (sCommand == "on") {
            g_iIsEnabled = 1;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sContrabandToken+"on=1", "");
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Contraband system is ON.",kID);
            if (remenu) MenuContraband(kID,iNum);
        } else if(sCommand == "off") {
            g_iIsEnabled = 0;
            llSetTimerEvent(0.0);
            llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sContrabandToken+"on","");
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Contraband system is OFF.",kID);
            if (remenu) MenuContraband(kID,iNum);
        }else if((sCommand == "clear"&&((mood>1&&g_iIsEnabled)||kID==g_kWearer))||sCommand == "cleardeb") {
                g_lContraband = [];SendUpdate();
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sContrabandToken+"words","");
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"The list of bad words has been cleared.",kID);
                if (remenu) MenuContraband(kID,iNum);
        }else if(sCommand == "requestdeb"||(sCommand == "request"&&mood>1&&g_iIsEnabled)) {
            llRegionSayTo(kID,CONTRABAND_CHANNEL_RESPONSE,"contrabands_list|"+llList2CSV(g_lContraband));
        }  
    }
}

string NameURI(key kID){
    if (llGetAgentSize(kID))
        return "[secondlife:/|/|/app/agent/"+(string)kID+"/inspect "+llGetDisplayName(kID)+"]";
    else
        return "secondlife:/|/|/app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
}

integer RequestPermission(key kID, integer iNum){
    if(kID==g_kWearer||iNum==CMD_OWNER){
        return TRUE;
    }
    kRequestPermission=kID;
    Dialog(kID, NameURI(kID)+" wants to edit your contraband list.\Do you allow it?", ["Yes", "No"], ["-"],0, iNum, "ContrabandsPerm");
    return FALSE;
}

MenuContraband(key kID, integer iNum){
    list lButtons = ["-"];
    if(kID==g_kWearer||iNum==CMD_OWNER){
        if (g_iIsEnabled) lButtons = ["OFF"];
        else lButtons = ["ON"];
        lButtons += ["Remove","Clear"];
    }else
    if(iNum==CMD_TRUSTED||iNum==CMD_GROUP){
        lButtons = ["Remove","Clear"];
    }
  
    string sText;
    sText+= "Contrabands:" + llList2CSV(g_lContraband) + "\n";
    Dialog(kID, sText, lButtons, ["BACK"],0, iNum, "ContrabandsMenu");
}


default {
    on_rez(integer iParam) {
        g_kWearer = llGetOwner();
    }

    state_entry() {
        g_kWearer = llGetOwner();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
   
        if (iNum>=CMD_OWNER && iNum <= CMD_EVERYONE) UserCommand(iNum, sStr, kID, FALSE);
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            integer i = llSubStringIndex(sToken, "_");
            if (llGetSubString(sToken, 0, i) == g_sContrabandToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "on") g_iIsEnabled = (integer)sValue;
                else if (sToken == "words"){
                    g_lContraband = llParseString2List(sValue, [","], []);
                    if(6<llGetListLength(g_lContraband)){
                        g_lContraband=llList2List( g_lContraband,0, 5);
                    }
                }
            }else if (sToken == g_sGlobalToken+"moodvalue"){
                mood=(integer)sValue;
                if(2<=mood){
                    SendUpdate();
                }
            }else if (sToken == g_sGlobalToken+"InmateSlot"){
               g_iInmateSlot=(integer)sValue;
            }
        } else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAv = (key)llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                string sMenu=llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                if (sMenu=="ContrabandsMenu") {
                    if (sMessage == "BACK") llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAv);
                    else UserCommand(iAuth, "contraband "+sMessage, kAv, TRUE);
                }else if (sMenu=="ContrabandsAdd") {
                    if (sMessage != " ") UserCommand(iAuth, "contrabands add " + sMessage, kAv, TRUE);
                    else MenuContraband(kAv,iAuth);
                } else if (sMenu=="ContrabandsRemove") {
                    if (sMessage == "BACK") MenuContraband(kAv,iAuth);
                    else if (sMessage == "Clear") UserCommand(iAuth, "contrabands clear", kAv, TRUE);
                    else if (sMessage) UserCommand(iAuth, "contrabands remove " + sMessage, kAv, TRUE);
                    else MenuContraband(kAv,iAuth);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_ANIM") LINK_ANIM = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }

    
     changed(integer iChange) {
        if (iChange & CHANGED_OWNER) llResetScript();
    }
}


*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 12/29/2017 13:51:25
//mono




integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_EVERYONE = 504;
integer NOTIFY = 1002;
integer REBOOT = -1000;
integer LINK_DIALOG = 3;

integer LINK_SAVE = 5;
integer LINK_ANIM = 6;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

string g_sParentMenu = "";

list g_lContraband;


key g_kWearer;
list g_lMenuIDs;
integer g_iMenuStride=3;
integer g_iIsEnabled=1;

string g_sContrabandToken = "contraband_";
integer mood;
string g_sGlobalToken = "global_";

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
integer CONTRABAND_CHANNEL_RESPONSE =-667571969;

integer g_iInmateSlot;

integer iAccess=1;
Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [kID]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kID, kMenuID, sName];
    
}

string DePunctuate(string sStr) {
    string sLastChar = llGetSubString(sStr, -1, -1);
    if (sLastChar == "," || sLastChar == "." || sLastChar == "!" || sLastChar == "?") sStr = llGetSubString(sStr, 0, -2);
    return sStr;
}
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess=3){
        return TRUE;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Contraband)", kCmdGiver);
    return FALSE;
}

string WordPrompt() {
    string sPrompt = "%WEARERNAMES% has the following contrabands: ";
    integer iLength = llGetListLength(g_lContraband);
    if (!iLength) sPrompt = "%WEARERNAMES% has no contraband.";
    else if (iLength == 1) sPrompt += llList2String(g_lContraband, 0);
    else if (iLength == 2) sPrompt += llList2String(g_lContraband, 0) + " and " + llList2String(g_lContraband, 1);
    else sPrompt += llDumpList2String(llDeleteSubList(g_lContraband, -1, -1), ", ") + ", and " + llList2String(g_lContraband, -1);

    return sPrompt;
}

UserCommand(integer iNum, string sStr, key kID, integer remenu) { 
    
    sStr=llStringTrim(sStr,STRING_TRIM);
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llList2String(lParams, 0);
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,contraband,17,12,29,120");
    }else
    if (llToLower(sStr) == "contraband" || llToLower(sStr) == "menu contraband"||llToLower(sStr) == "contrabands" || llToLower(sStr) == "menu contrabands") {
        if (!CheckCommandAuth(kID,iNum)) return;
        MenuContraband(kID, iNum);
    }else if (llToLower(sCommand)=="contraband"||llToLower(sCommand)=="contrabands"){
        if (!CheckCommandAuth(kID,iNum)) return;
        sCommand = llToLower(llList2String(lParams, 1));
        if ((sCommand == "add"&&((mood>1&&g_iIsEnabled)||kID==g_kWearer))||sCommand =="adddeb") {  
            list lNewBadWords = llDeleteSubList(lParams, 0, 1);
            if (llGetListLength(lNewBadWords)){
                while (llGetListLength(lNewBadWords)){
                    string sNewWord=DePunctuate(llList2String(lNewBadWords,-1));
                    if (remenu) {
                        string sCRLF= llUnescapeURL("%0A");
                        if (~llSubStringIndex(sNewWord, sCRLF)) {
                            list lTemp = llParseString2List(sNewWord, [sCRLF], []);
                            lNewBadWords = llDeleteSubList(lNewBadWords,-1,-1);
                            lNewBadWords = lTemp + lNewBadWords;
                            sNewWord=DePunctuate(llList2String(lNewBadWords,-1));
                        }
                    }
                    if (llListFindList(g_lContraband, [sNewWord]) == -1) g_lContraband += [sNewWord];
                    lNewBadWords=llDeleteSubList(lNewBadWords,-1,-1);
                }
                if (llGetListLength(g_lContraband)) {
                    if(6<llGetListLength(g_lContraband)){
                        g_lContraband=llList2List( g_lContraband,0, 5);
                    }
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sContrabandToken+"words=" + llDumpList2String(g_lContraband, ","), "");
                    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+WordPrompt(),kID);
                }
                if (remenu) MenuContraband(kID,iNum);
            } else {
                string sText = "\n- Submit the new badword in the field below.\n- Submit a blank field to go back.";
                Dialog(kID, sText, [], [], 0, iNum, "ContrabandsAdd");
            }
            SendUpdate();
        }else if ((sCommand == "remove"&&((mood>1&&g_iIsEnabled)||kID==g_kWearer))||sCommand=="removedeb") {
            list lNewBadWords = llDeleteSubList(lParams, 0, 1);
            if (llGetListLength(lNewBadWords)){
                while (llGetListLength(lNewBadWords)){
                    string sNewWord=DePunctuate(llList2String(lNewBadWords,-1));
                    integer iIndex=llListFindList(g_lContraband, [sNewWord]);
                    if (~iIndex) g_lContraband = llDeleteSubList(g_lContraband,iIndex,iIndex);
                    lNewBadWords=llDeleteSubList(lNewBadWords,-1,-1);
                }
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sContrabandToken+"words=" + llDumpList2String(g_lContraband, ","), "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+WordPrompt() ,kID);
                if (remenu) MenuContraband(kID,iNum);
            } else {
                if (g_lContraband) Dialog(kID, "Select a contraband to remove or clear them all.", g_lContraband, ["Clear", "BACK"],0, iNum, "ContrabandsRemove");
                else {
                    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"The list of badwords is currently empty.",kID);
                    MenuContraband(kID,iNum);
                }
            }
            SendUpdate();
        }  
        else if (sCommand == "on") {
            g_iIsEnabled = 1;
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sContrabandToken+"on=1", "");
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Contraband system is ON.",kID);
            if (remenu) MenuContraband(kID,iNum);
        } else if(sCommand == "off") {
            g_iIsEnabled = 0;
            llSetTimerEvent(0.0);
            llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sContrabandToken+"on","");
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Contraband system is OFF.",kID);
            if (remenu) MenuContraband(kID,iNum);
        }else if((sCommand == "clear"&&((mood>1&&g_iIsEnabled)||kID==g_kWearer))||sCommand == "cleardeb") {
                g_lContraband = [];SendUpdate();
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sContrabandToken+"words","");
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"The list of bad words has been cleared.",kID);
                if (remenu) MenuContraband(kID,iNum);
        }else if(sCommand == "requestdeb"||(sCommand == "request"&&mood>1&&g_iIsEnabled)) {
            llRegionSayTo(kID,CONTRABAND_CHANNEL_RESPONSE,"contrabands_list|"+llList2CSV(g_lContraband));
        }  
    }
}
SendUpdate(){
    string sMsg=llEscapeURL(llDumpList2String(g_lContraband,","));
    sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%2C"], []), "!2C");
    if(sMsg==""){
        sMsg="!0!";
    }
    llHTTPRequest( "https://goriest-fastener.000webhostapp.com/inmate/contrabandset.php?key="+(string)g_kWearer+"&slot="+(string)g_iInmateSlot+"&word="+sMsg,[],"");
}

MenuContraband(key kID, integer iNum){
    list lButtons = ["-"];
    if(kID==g_kWearer||iNum==CMD_OWNER){
        if (g_iIsEnabled) lButtons = ["OFF"];
        else lButtons = ["ON"];
        lButtons += ["Remove","Clear"];
    }else
    if(iNum==CMD_TRUSTED||iNum==CMD_GROUP){
        lButtons = ["Remove","Clear"];
    }
  
    string sText;
    sText+= "Contrabands:" + llList2CSV(g_lContraband) + "\n";
    Dialog(kID, sText, lButtons, ["BACK"],0, iNum, "ContrabandsMenu");
}


default {
    on_rez(integer iParam) {
        g_kWearer = llGetOwner();
    }

    state_entry() {
        g_kWearer = llGetOwner();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
   
        if (iNum>=CMD_OWNER && iNum <= CMD_EVERYONE) UserCommand(iNum, sStr, kID, FALSE);
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            integer i = llSubStringIndex(sToken, "_");
            if (llGetSubString(sToken, 0, i) == g_sContrabandToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "on") g_iIsEnabled = (integer)sValue;
                else if (sToken == "words"){
                    g_lContraband = llParseString2List(sValue, [","], []);
                    if(6<llGetListLength(g_lContraband)){
                        g_lContraband=llList2List( g_lContraband,0, 5);
                    }
                }
            }else if (sToken == g_sGlobalToken+"moodvalue"){
                mood=(integer)sValue;
                if(2<=mood){
                    SendUpdate();
                }
            }else if (sToken == g_sGlobalToken+"InmateSlot"){
               g_iInmateSlot=(integer)sValue;
            }
        } else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAv = (key)llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                string sMenu=llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                if (sMenu=="ContrabandsMenu") {
                    if (sMessage == "BACK") llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAv);
                    else UserCommand(iAuth, "contraband "+sMessage, kAv, TRUE);
                }else if (sMenu=="ContrabandsAdd") {
                    if (sMessage != " ") UserCommand(iAuth, "contrabands add " + sMessage, kAv, TRUE);
                    else MenuContraband(kAv,iAuth);
                } else if (sMenu=="ContrabandsRemove") {
                    if (sMessage == "BACK") MenuContraband(kAv,iAuth);
                    else if (sMessage == "Clear") UserCommand(iAuth, "contrabands clear", kAv, TRUE);
                    else if (sMessage) UserCommand(iAuth, "contrabands remove " + sMessage, kAv, TRUE);
                    else MenuContraband(kAv,iAuth);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_ANIM") LINK_ANIM = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }

    
     changed(integer iChange) {
        if (iChange & CHANGED_OWNER) llResetScript();
    }
}



