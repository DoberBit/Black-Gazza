//start_unprocessed_text
/*key g_kWearer; 

string g_sGlobalToken = "global_";
string g_sBGLockToken = "bglock_"; 

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;

integer NOTIFY = 1002;
integer SPECIAL_NOTIFY = 1005;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_RLV = 4;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;

integer g_iRLVOn=0;
integer RLV_CLEAR = 6002; 
integer RLV_OFF = 6100; 
integer RLV_ON = 6101; 

integer CHANNEL_HANDLER;
string TIMEMODE;
integer isAttached;
integer iMood;

integer g_iReady;
integer g_iWarden=1;
string sStr_warden="warden";
integer iPublicHandle;
integer iPublicChanel=0;
integer iRPToolHandleI;
integer iRPToolChanelI=3;
integer iRPToolHandleII;
integer iRPToolChanelII=4;
list lNames=["Stranger", "Somebody", "A stranger", "A person", "Someone","..."];
integer iLinked;
integer iLinkedChanel=-9999;
key kLinkedKey;
integer GuardChannel = -5643882;

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="BGLOCK";
integer SOBRIQUETSMS = 778;

string g_sSubMenu = "Welcome";
string g_sParentMenu = "";
list g_lMenuIDs;  
integer g_iMenuStride = 3;
integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
string UPMENU = "OK";
string g_sWelcomeToken = "welcome_";
string g_sFirstRun = "first";
string g_sFirstOpen = "open";
integer g_iEnable=0;
integer g_iFirstOpen=0;
integer g_iFirstRun=1;
integer submenu;
integer g_iImmersion=1; 
integer g_iImmersionLocked;
key g_kImmersionLocked;

string IMMERSION_OFF = "Immersion ☐"; 
string IMMERSION_ON = "Immersion ☑";


string sStr_WEARERNAMES="%WEARERNAMES%";
OwnerNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID!=g_kWearer){
        return;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
Notification(string sMessage, key kID){
    
}
string NameURI(key kID)
{
    if (llGetAgentSize(kID))
        return "[secondlife:/|/|/app/agent/"+(string)kID+"/inspect "+llGetDisplayName(kID)+"]";
    else
        return "secondlife:/|/|/app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
}
Listen_Stop(){
    StatusUpdater("warden,listen,0");
    llListenRemove(iPublicHandle);
    llListenRemove(iRPToolHandleI);
    llListenRemove(iRPToolHandleII);
}
Listen_Start(){
    StatusUpdater("warden,listen,1");
    llListenRemove(iPublicHandle);
    iPublicHandle=llListen(iPublicChanel,"",NULL_KEY,"");
    llListenRemove(iRPToolHandleI);
    iRPToolHandleI=llListen(iRPToolChanelI,"",NULL_KEY,"");
    llListenRemove(iRPToolHandleII);
    iRPToolHandleII=llListen(iRPToolChanelII,"",NULL_KEY,"");
}
GuardNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID==g_kWearer){
        return;
    }
    StatusUpdater("warden,guard,not");
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
GuardHUD(key kID, string sStr){
    StatusUpdater("warden,guard,hud");
    llRegionSayTo(kID,GuardChannel,"warden "+sStr);    
}


Dialog(key kRCPT, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string iMenuType) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kRCPT + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);
    integer iIndex = llListFindList(g_lMenuIDs, [kRCPT]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kRCPT, kMenuID, iMenuType], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kRCPT, kMenuID, iMenuType];
}
BGCommand(integer iAuth, string sStr, key kID, integer iMenu){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);  
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));

    if (sCommand=="immersion"){
        if(g_iImmersionLocked&&kID!=g_kImmersionLocked&&g_iImmersion>0&&iAuth!=CMD_OWNER&&kID!=g_kWearer){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is LOCKED, cant change it.",kID);
        }else
        if(sValue=="☐"||sValue=="on"||sValue=="1"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is ON.",kID);
            g_iImmersion=1;
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
        }else
        if(sValue=="☑"||sValue=="off"||sValue=="0"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is OFF.",kID);
            g_iImmersion=0;
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
        }else
        if(sValue=="strict"||sValue=="2"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is STRICT.",kID);
            g_iImmersion=2;
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
        }else
        if(sValue=="lock"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is LOCKED.",kID);
            g_iImmersionLocked=TRUE;
            g_kImmersionLocked=kID;
        }else
        if(sValue=="unlock"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is UNLOCKED.",kID);
            g_iImmersionLocked=FALSE;
            g_kImmersionLocked=NULL_KEY;
        }
    }else{
        if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
            return;
        }
        if (sCommand==sStr_warden){
            if(sValue=="0"||sValue=="1"){
                g_iWarden=(integer)sValue;
            }else
            if(sValue=="info"){
                
            }else{
                g_iWarden=!g_iWarden;
            }
            StatusUpdater("warden,"+(string)g_iWarden);
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + sStr_warden+"="+(string)g_iWarden,"");
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + sStr_warden+"="+(string)g_iWarden,"");
            if(g_iWarden){
                GuardNotification(sStr_WEARERNAMES+"'s collar Warden Turned On.",kID);
                OwnerNotification("Your collar Warden Turned On.",g_kWearer);
            }else{
                GuardNotification(sStr_WEARERNAMES+"'s collar Warden Turned Off.",kID);
                OwnerNotification("Your collar Warden Turned Off.",g_kWearer);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }
    }  
}


initialize()
{
    g_iReady=0;
    llListenRemove(CHANNEL_HANDLER);
    WardenCommand(CMD_OWNER,"clear",g_kWearer,FALSE);
    submenu=0;
    if(g_iEnable){
        g_iFirstOpen=1;
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+"1","");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+"1","");
    }

}

WelcomeMenu(key kID, integer iNum) {
    string sPrompt=" ";
    list lMyButtons=["-"];
    UPMENU = "OK";
    if(g_iFirstRun==1){
        g_iFirstOpen=0;
        g_iFirstRun=0;
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        sPrompt="Black Gazza Correctional Facilities\n";
        sPrompt+="Database connection...Done\nPunishment function...Done\nTracking...Done\nWarden...Done\nSystem Ready.\n";
        sPrompt+="Registering new record:%WEARERNUMBER%\nRole:Inmate ";
        sPrompt+="No rights, no freedom, no hope\n";
        sPrompt+="Inmate sentencing starts now.\n";
        sPrompt+="Sentence Time:No time set! Using default time, inmate sentence set till they expire.\n";
        sPrompt+="Former citizen is stripped of rights and is registered as Black Gazza Prisoner %WEARERNUMBER%\n";
        sPrompt+="Welcome to Black Gazza, you may stay as long as you deserve! :)\n";
        
    }else
    if(g_iFirstOpen==1){
        g_iFirstOpen=0;
        g_iFirstRun=0;
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        sPrompt="Black Gazza Correctional Facilities\n";
        sPrompt+="Database connection...Done\nPunishment function...Done\nTracking...Done\nWarden...Done\nSystem Ready.\n";
        sPrompt+="Logging Inmate Number: %WEARERNUMBER%\n";
        sPrompt+="Logging Role: Inmate (Property of Black Gazza)\n";
        sPrompt+="No rights, no freedom, no hope\n";
        sPrompt+="Welcome Back to Black Gazza :)\n";
    }else{
        llMessageLinked(LINK_ROOT, iNum, "menu "+g_sParentMenu, kID);
        return;
    }
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iNum, "WelcomeMenu");
}
 
 WelcomeCommand(integer iNum, string sStr, key kID){
    list lParams = llParseString2List(sStr, [" "], []);    
    string sCommand = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if(llToLower(sCommand)=="enable"){
        if(sValue=="1"||sValue=="0"){
                g_iEnable=(integer)sValue;
            }else{
                g_iEnable=!g_iEnable;
            }
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE, g_sWelcomeToken+"enable="+(string)g_iEnable,"");
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE, g_sWelcomeToken+"enable="+(string)g_iEnable,"");
            if(g_iEnable){
                
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Welcome Interface Turned On.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Welcome Interface Turned On.",g_kWearer);
            }else{
                
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Welcome Interface Turned Off.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Welcome Interface Turned Off.",g_kWearer);
            }
            if(sValue=="main"){
                llMessageLinked(LINK_SET,iNum,"options",kID);
            }
    }else
    if(llToLower(sCommand)=="menu"){
        WelcomeMenu(kID, iNum);
    }else
    if(llToLower(sCommand)=="firstrun"){
        g_iFirstRun=(integer)sValue;
      
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstRun+"="+sValue,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstRun+"="+sValue,"");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s firstrun="+sValue,kID);
    }else
    if(llToLower(sCommand)=="firstopen"){
        g_iFirstOpen=(integer)sValue;
      
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+sValue,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+sValue,"");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s firstopen="+sValue,kID);
    }else
    if(llToLower(sCommand)=="-"){
        if(submenu==0){
            WelcomeMenu(kID, iNum);    
        }
    }
}

WardenCommand(integer iAuth, string sStr, key kID, integer iMenu){
    if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth&&CMD_TRUSTED!=iAuth){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        return;
    }
    
    sStr=llToLower(llStringTrim(sStr,STRING_TRIM));
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llList2String(lParams, 0);
    if(sCommand=="info"){
        GuardHUD(kID,"info_warden="+(string)g_iWarden);
        GuardHUD(kID,"info_iMood="+(string)iMood);
        GuardHUD(kID,"info_LinkedKey="+(string)kLinkedKey);
        GuardHUD(kID,"info_LinkedChanel="+(string)iLinkedChanel);
        if(g_iWarden==0){
            GuardNotification(sStr_WEARERNAMES+" warden system is turned off.",kID);
        }
        if(iMood<=1){
            GuardNotification(sStr_WEARERNAMES+" Mood is OOC or DND!",kID);
        }
        
        if(iLinked){
            GuardNotification(sStr_WEARERNAMES+" is linked to"+NameURI(kLinkedKey)+" on channel:"+(string)iLinkedChanel+".",kID);
        }
    }else
    if(sCommand=="link"){
        if(g_iWarden==0){
            StatusUpdater("warden,off");
            GuardNotification(sStr_WEARERNAMES+" warden system is turned off.",kID);
            GuardHUD(kID,"off");
            return;
        }
        if(iMood<=1){
            StatusUpdater("warden,ooc");
            GuardNotification(sStr_WEARERNAMES+" iMood is OOC or DND!",kID);
            GuardHUD(kID,"invalid_iMood");
            return;
        }
        if(iLinked){
            StatusUpdater("warden,link,used,"+(string)kLinkedKey);
            GuardHUD(kID,"used");
            GuardNotification("Already somebody is linked to "+sStr_WEARERNAMES+" warden system.",kID);
            OwnerNotification(NameURI(kID)+ " tried to link to your warden system.",g_kWearer);
        }else{
            GuardNotification("You link to "+sStr_WEARERNAMES+" warden system.",kID);
            OwnerNotification(NameURI(kID)+ " links to your warden system.",g_kWearer);
            iLinked=1;
            iLinkedChanel=llList2Integer(lParams, 1);
            kLinkedKey=kID;
            StatusUpdater("warden,link,take,"+(string)kLinkedKey);
            StatusUpdater("warden,link,channel,"+(string)iLinkedChanel);
            Listen_Start();
            GuardHUD(kID,"linked");
        }
    }else
    if(sCommand=="unlink"){
        if(g_iWarden==0){
            GuardHUD(kID,"off");
            GuardNotification(sStr_WEARERNAMES+" warden system is turned off.",kID);
            return;
        }
        if(iMood<=1){
            GuardHUD(kID,"invalid_iMood");
            GuardNotification(sStr_WEARERNAMES+" Mood is OOC or DND!",kID);
            return;
        }
        if(iLinked){
            
            if(kID==kLinkedKey){
                StatusUpdater("warden,unlink,1,"+(string)kLinkedKey);
                GuardNotification("You unlink from "+sStr_WEARERNAMES+" warden system.",kLinkedKey);
                OwnerNotification(NameURI(kLinkedKey)+ " unlinks from your warden system",g_kWearer);    
            }else{
                StatusUpdater("warden,unlink,2,"+(string)kLinkedKey);
                GuardNotification("You unlink "+NameURI(kLinkedKey)+" from "+sStr_WEARERNAMES+" warden system.",kID);
                GuardNotification(NameURI(kID)+" unlinks you from "+sStr_WEARERNAMES+" warden system.",kLinkedKey);
                OwnerNotification(NameURI(kID)+ " unlinks "+NameURI(kLinkedKey)+" from your warden system",g_kWearer);    
            }
            GuardHUD(kID,"unlink");
        }else{
            
            GuardHUD(kID,"not_linked");
        }
        iLinked=0;
        iLinkedChanel=-9999;
        kLinkedKey=NULL_KEY;
        Listen_Stop();
    }else
    if(sCommand=="clear"){
        iLinked=0;
        iLinkedChanel=-9999;
        kLinkedKey=NULL_KEY;
        Listen_Stop();
    }
 }

UserCommand(integer iAuth, string sStr, key kID)
{
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,bgaddition,17,09,28,124");
    }
    integer iMenu=FALSE;
    if (llToLower(sStr) == "menu "+llToLower(IMMERSION_ON) || llToLower(sStr) == llToLower(IMMERSION_ON)){
       BGCommand(iAuth,IMMERSION_ON, kID,TRUE);      
    }else if (llToLower(sStr) == "menu "+llToLower(IMMERSION_OFF) || llToLower(sStr) == llToLower(IMMERSION_OFF)){
        BGCommand(iAuth,IMMERSION_OFF, kID,TRUE);      
    }else if (llToLower(sStr) == "menu welcome" || sStr == llToLower(g_sSubMenu)){
        submenu=0;
        WelcomeMenu(kID, iAuth);
    }else if (llSubStringIndex(llToLower(sStr),"menu welcome")==0) {
        if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth){
            return;
        }
        WelcomeCommand(iAuth, "enable main",kID);
    }else if (llSubStringIndex(sStr,"welcome")==0) {
        list lParams = llParseString2List(sStr, [" ",","], []);
        string sToken = llList2String(lParams, 1);
        string sValue = llList2String(lParams, 2);  
        WelcomeCommand(iAuth, sToken+" "+sValue,kID);
    }else if (llSubStringIndex(sStr,"rules")==0) {
        list lParams = llParseString2List(sStr, [" ",","], []);
        string sToken = llList2String(lParams, 1);
        string sValue = llList2String(lParams, 2);  
        WelcomeCommand(iAuth, sToken+" "+sValue,kID);
    }else{
        if (llSubStringIndex(llToLower(sStr),"menu")==0) {
            sStr=llGetSubString(sStr,llStringLength("menu")+1,-1);
            iMenu=TRUE;
        }

        if (llSubStringIndex(llToLower(sStr),"warden 0")==0||llSubStringIndex(llToLower(sStr),"warden 1")==0||llSubStringIndex(llToLower(sStr),"warden ☐")==0||llSubStringIndex(llToLower(sStr),"warden ☒")==0) {
            BGCommand(iAuth,sStr_warden, kID,iMenu);      
        }else 
        if (llSubStringIndex(llToLower(sStr),sStr_warden)==0) {
            sStr=llGetSubString(sStr,llStringLength(sStr_warden)+1,-1);
            WardenCommand(iAuth,sStr, kID,iMenu);      
        }
    }
} 

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}


Listen_Message(string sStr, key kID){
    if(g_iWarden&&iLinked&&1<iMood){
        StatusUpdater("warden,message");
        if(llGetOwnerKey(kLinkedKey)==kLinkedKey){
            integer v = (integer)(llFrand(6.0));
            string sName=llList2String(lNames, v);
            sStr=llStringTrim(sStr,STRING_TRIM);
            if (llSubStringIndex(llToLower(sStr),"/me ")==0) {
                sStr=llGetSubString(sStr,llStringLength("/me"),-1);
                if(iLinkedChanel==0){
                    llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar warden|"+sName+sStr,kLinkedKey);
                }else{
                     llRegionSayTo(kLinkedKey,iLinkedChanel, sName+sStr);
                }
            }else{
                if(iLinkedChanel==0){
                    llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar warden|"+sName+":"+sStr,kLinkedKey);
                }else{
                    llRegionSayTo(kLinkedKey,iLinkedChanel, sName+":"+sStr);
                }
            }
        }else{
            llRegionSayTo(kLinkedKey,iLinkedChanel,(string)kID+" "+sStr);
        }
    }
}


default
{
    state_entry()
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }
    on_rez(integer iParam)
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID)
    {
        if(iNum==SOBRIQUETSMS&&g_iWarden&&iLinked&&1<iMood){
            sStr=llGetSubString(sStr,llStringLength("sobriquet message")+1,-1);
            Listen_Message(sStr,kID);
        }else
        if (iNum == RLV_OFF){
            g_iRLVOn=FALSE;
        }else if (iNum == RLV_ON) {
            g_iRLVOn=TRUE;

        }else if (iNum == RLV_CLEAR){
            
        }
        else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER)
        {
            UserCommand(iNum,sStr,kID); 
        }else if (iNum == LINK_UPDATE){
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        }else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            
            if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                if (sToken == "moodvalue"){
                    iMood=(integer)sValue;
                }else if (sToken == "immersion"){
                    g_iImmersion=(integer)sValue;
                }
            }else
            if (llSubStringIndex(sToken,g_sBGLockToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sBGLockToken),-1);
                if (sToken==sStr_warden){
                    g_iWarden=(integer)sValue;
                }
            }else
            if (llSubStringIndex(sToken,g_sWelcomeToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sWelcomeToken),-1);
                 
                if (sToken =="enable") g_iEnable = (integer)sValue;
                else if (sToken ==g_sFirstRun) g_iFirstRun = (integer)sValue;
                else if (sToken ==g_sFirstOpen) g_iFirstOpen = (integer)sValue;
            }
            else if (sStr == "settings=sent") {
                TIMEMODE="init";
                llSetTimerEvent(2.0);
            }
        }else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAV = llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);                
                if (sMessage == UPMENU) {
                    if(submenu==0||submenu==1){
                        llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        return;
                    }
                }else{
                    
                    WelcomeCommand(iAuth ,sMessage, kAV);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        }
    }
    
    listen(integer l_channel, string name, key id, string message) 
    {
        if (1<iMood&&g_iWarden&&iLinked&&(l_channel==iPublicChanel||l_channel==iRPToolChanelI||l_channel==iRPToolChanelII)) {
            Listen_Message(message,id);      
        }
    }
    timer() 
    { 
        llSetTimerEvent(0);
        if(TIMEMODE=="init"){
            if(isAttached==0){
                TIMEMODE="";g_iReady=0;    
            }else{
                TIMEMODE="";
                g_iReady=1;  
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
            }
        }
    }
    
    changed(integer iChange)
    {
        if (iChange & CHANGED_OWNER)
        {
            llResetScript();
        }
        if(iChange & CHANGED_REGION){

        }
    }
}

*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 09/28/2017 12:21:48
//mono




key g_kWearer; 

string g_sGlobalToken = "global_";
string g_sBGLockToken = "bglock_"; 

integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_WEARER = 503;

integer NOTIFY = 1002;
integer SPECIAL_NOTIFY = 1005;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_RLV = 4;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;

integer g_iRLVOn=0;
integer RLV_CLEAR = 6002; 
integer RLV_OFF = 6100; 
integer RLV_ON = 6101; 

integer CHANNEL_HANDLER;
string TIMEMODE;
integer isAttached;
integer iMood;

integer g_iReady;
integer g_iWarden=1;
string sStr_warden="warden";
integer iPublicHandle;
integer iPublicChanel=0;
integer iRPToolHandleI;
integer iRPToolChanelI=3;
integer iRPToolHandleII;
integer iRPToolChanelII=4;
list lNames=["Stranger", "Somebody", "A stranger", "A person", "Someone","..."];
integer iLinked;
integer iLinkedChanel=-9999;
key kLinkedKey;
integer GuardChannel = -5643882;

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="BGLOCK";
integer SOBRIQUETSMS = 778;

string g_sSubMenu = "Welcome";
string g_sParentMenu = "";
list g_lMenuIDs;  
integer g_iMenuStride = 3;
integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
string UPMENU = "OK";
string g_sWelcomeToken = "welcome_";
string g_sFirstRun = "first";
string g_sFirstOpen = "open";
integer g_iEnable=0;
integer g_iFirstOpen=0;
integer g_iFirstRun=1;
integer submenu;
integer g_iImmersion=1; 
integer g_iImmersionLocked;
key g_kImmersionLocked;

string IMMERSION_OFF = "Immersion ☐"; 
string IMMERSION_ON = "Immersion ☑";


string sStr_WEARERNAMES="%WEARERNAMES%";
OwnerNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID!=g_kWearer){
        return;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
Notification(string sMessage, key kID){
    
}
string NameURI(key kID)
{
    if (llGetAgentSize(kID))
        return "[secondlife:///app/agent/"+(string)kID+"/inspect "+llGetDisplayName(kID)+"]";
    else
        return "secondlife:///app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
}
Listen_Stop(){
    StatusUpdater("warden,listen,0");
    llListenRemove(iPublicHandle);
    llListenRemove(iRPToolHandleI);
    llListenRemove(iRPToolHandleII);
}
Listen_Start(){
    StatusUpdater("warden,listen,1");
    llListenRemove(iPublicHandle);
    iPublicHandle=llListen(iPublicChanel,"",NULL_KEY,"");
    llListenRemove(iRPToolHandleI);
    iRPToolHandleI=llListen(iRPToolChanelI,"",NULL_KEY,"");
    llListenRemove(iRPToolHandleII);
    iRPToolHandleII=llListen(iRPToolChanelII,"",NULL_KEY,"");
}
GuardNotification(string sStr,key kID){
    kID=llGetOwnerKey(kID);
    if(kID==g_kWearer){
        return;
    }
    StatusUpdater("warden,guard,not");
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr,kID);
}
GuardHUD(key kID, string sStr){
    StatusUpdater("warden,guard,hud");
    llRegionSayTo(kID,GuardChannel,"warden "+sStr);    
}


Dialog(key kRCPT, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string iMenuType) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kRCPT + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);
    integer iIndex = llListFindList(g_lMenuIDs, [kRCPT]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kRCPT, kMenuID, iMenuType], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kRCPT, kMenuID, iMenuType];
}
BGCommand(integer iAuth, string sStr, key kID, integer iMenu){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);  
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));

    if (sCommand=="immersion"){
        if(g_iImmersionLocked&&kID!=g_kImmersionLocked&&g_iImmersion>0&&iAuth!=CMD_OWNER&&kID!=g_kWearer){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is LOCKED, cant change it.",kID);
        }else
        if(sValue=="☐"||sValue=="on"||sValue=="1"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is ON.",kID);
            g_iImmersion=1;
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
        }else
        if(sValue=="☑"||sValue=="off"||sValue=="0"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is OFF.",kID);
            g_iImmersion=0;
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
        }else
        if(sValue=="strict"||sValue=="2"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is STRICT.",kID);
            g_iImmersion=2;
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
        }else
        if(sValue=="lock"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is LOCKED.",kID);
            g_iImmersionLocked=TRUE;
            g_kImmersionLocked=kID;
        }else
        if(sValue=="unlock"){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Collar Immersion mode is UNLOCKED.",kID);
            g_iImmersionLocked=FALSE;
            g_kImmersionLocked=NULL_KEY;
        }
    }else{
        if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
            return;
        }
        if (sCommand==sStr_warden){
            if(sValue=="0"||sValue=="1"){
                g_iWarden=(integer)sValue;
            }else
            if(sValue=="info"){
                
            }else{
                g_iWarden=!g_iWarden;
            }
            StatusUpdater("warden,"+(string)g_iWarden);
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sBGLockToken + sStr_warden+"="+(string)g_iWarden,"");
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sBGLockToken + sStr_warden+"="+(string)g_iWarden,"");
            if(g_iWarden){
                GuardNotification(sStr_WEARERNAMES+"'s collar Warden Turned On.",kID);
                OwnerNotification("Your collar Warden Turned On.",g_kWearer);
            }else{
                GuardNotification(sStr_WEARERNAMES+"'s collar Warden Turned Off.",kID);
                OwnerNotification("Your collar Warden Turned Off.",g_kWearer);
            }
            if(iMenu){
                llMessageLinked(LINK_SET,iAuth,"options",kID);
            }
        }
    }  
}


initialize()
{
    g_iReady=0;
    llListenRemove(CHANNEL_HANDLER);
    WardenCommand(CMD_OWNER,"clear",g_kWearer,FALSE);
    submenu=0;
    if(g_iEnable){
        g_iFirstOpen=1;
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+"1","");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+"1","");
    }

}

WelcomeMenu(key kID, integer iNum) {
    string sPrompt=" ";
    list lMyButtons=["-"];
    UPMENU = "OK";
    if(g_iFirstRun==1){
        g_iFirstOpen=0;
        g_iFirstRun=0;
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        sPrompt="Black Gazza Correctional Facilities\n";
        sPrompt+="Database connection...Done\nPunishment function...Done\nTracking...Done\nWarden...Done\nSystem Ready.\n";
        sPrompt+="Registering new record:%WEARERNUMBER%\nRole:Inmate ";
        sPrompt+="No rights, no freedom, no hope\n";
        sPrompt+="Inmate sentencing starts now.\n";
        sPrompt+="Sentence Time:No time set! Using default time, inmate sentence set till they expire.\n";
        sPrompt+="Former citizen is stripped of rights and is registered as Black Gazza Prisoner %WEARERNUMBER%\n";
        sPrompt+="Welcome to Black Gazza, you may stay as long as you deserve! :)\n";
        
    }else
    if(g_iFirstOpen==1){
        g_iFirstOpen=0;
        g_iFirstRun=0;
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstRun+"="+(string)g_iFirstRun,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+(string)g_iFirstOpen,"");
        sPrompt="Black Gazza Correctional Facilities\n";
        sPrompt+="Database connection...Done\nPunishment function...Done\nTracking...Done\nWarden...Done\nSystem Ready.\n";
        sPrompt+="Logging Inmate Number: %WEARERNUMBER%\n";
        sPrompt+="Logging Role: Inmate (Property of Black Gazza)\n";
        sPrompt+="No rights, no freedom, no hope\n";
        sPrompt+="Welcome Back to Black Gazza :)\n";
    }else{
        llMessageLinked(LINK_ROOT, iNum, "menu "+g_sParentMenu, kID);
        return;
    }
    Dialog(kID, sPrompt, lMyButtons, [UPMENU], 0, iNum, "WelcomeMenu");
}
 
 WelcomeCommand(integer iNum, string sStr, key kID){
    list lParams = llParseString2List(sStr, [" "], []);    
    string sCommand = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if(llToLower(sCommand)=="enable"){
        if(sValue=="1"||sValue=="0"){
                g_iEnable=(integer)sValue;
            }else{
                g_iEnable=!g_iEnable;
            }
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE, g_sWelcomeToken+"enable="+(string)g_iEnable,"");
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE, g_sWelcomeToken+"enable="+(string)g_iEnable,"");
            if(g_iEnable){
                
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Welcome Interface Turned On.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Welcome Interface Turned On.",g_kWearer);
            }else{
                
                if(g_kWearer!=llGetOwnerKey(kID)){
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s collar Welcome Interface Turned Off.",kID);
                }
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your collar Welcome Interface Turned Off.",g_kWearer);
            }
            if(sValue=="main"){
                llMessageLinked(LINK_SET,iNum,"options",kID);
            }
    }else
    if(llToLower(sCommand)=="menu"){
        WelcomeMenu(kID, iNum);
    }else
    if(llToLower(sCommand)=="firstrun"){
        g_iFirstRun=(integer)sValue;
      
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstRun+"="+sValue,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstRun+"="+sValue,"");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s firstrun="+sValue,kID);
    }else
    if(llToLower(sCommand)=="firstopen"){
        g_iFirstOpen=(integer)sValue;
      
        llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sWelcomeToken + g_sFirstOpen+"="+sValue,"");
        llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sWelcomeToken + g_sFirstOpen+"="+sValue,"");
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sStr_WEARERNAMES+"'s firstopen="+sValue,kID);
    }else
    if(llToLower(sCommand)=="-"){
        if(submenu==0){
            WelcomeMenu(kID, iNum);    
        }
    }
}

WardenCommand(integer iAuth, string sStr, key kID, integer iMenu){
    if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth&&CMD_TRUSTED!=iAuth){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        return;
    }
    
    sStr=llToLower(llStringTrim(sStr,STRING_TRIM));
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llList2String(lParams, 0);
    if(sCommand=="info"){
        GuardHUD(kID,"info_warden="+(string)g_iWarden);
        GuardHUD(kID,"info_iMood="+(string)iMood);
        GuardHUD(kID,"info_LinkedKey="+(string)kLinkedKey);
        GuardHUD(kID,"info_LinkedChanel="+(string)iLinkedChanel);
        if(g_iWarden==0){
            GuardNotification(sStr_WEARERNAMES+" warden system is turned off.",kID);
        }
        if(iMood<=1){
            GuardNotification(sStr_WEARERNAMES+" Mood is OOC or DND!",kID);
        }
        
        if(iLinked){
            GuardNotification(sStr_WEARERNAMES+" is linked to"+NameURI(kLinkedKey)+" on channel:"+(string)iLinkedChanel+".",kID);
        }
    }else
    if(sCommand=="link"){
        if(g_iWarden==0){
            StatusUpdater("warden,off");
            GuardNotification(sStr_WEARERNAMES+" warden system is turned off.",kID);
            GuardHUD(kID,"off");
            return;
        }
        if(iMood<=1){
            StatusUpdater("warden,ooc");
            GuardNotification(sStr_WEARERNAMES+" iMood is OOC or DND!",kID);
            GuardHUD(kID,"invalid_iMood");
            return;
        }
        if(iLinked){
            StatusUpdater("warden,link,used,"+(string)kLinkedKey);
            GuardHUD(kID,"used");
            GuardNotification("Already somebody is linked to "+sStr_WEARERNAMES+" warden system.",kID);
            OwnerNotification(NameURI(kID)+ " tried to link to your warden system.",g_kWearer);
        }else{
            GuardNotification("You link to "+sStr_WEARERNAMES+" warden system.",kID);
            OwnerNotification(NameURI(kID)+ " links to your warden system.",g_kWearer);
            iLinked=1;
            iLinkedChanel=llList2Integer(lParams, 1);
            kLinkedKey=kID;
            StatusUpdater("warden,link,take,"+(string)kLinkedKey);
            StatusUpdater("warden,link,channel,"+(string)iLinkedChanel);
            Listen_Start();
            GuardHUD(kID,"linked");
        }
    }else
    if(sCommand=="unlink"){
        if(g_iWarden==0){
            GuardHUD(kID,"off");
            GuardNotification(sStr_WEARERNAMES+" warden system is turned off.",kID);
            return;
        }
        if(iMood<=1){
            GuardHUD(kID,"invalid_iMood");
            GuardNotification(sStr_WEARERNAMES+" Mood is OOC or DND!",kID);
            return;
        }
        if(iLinked){
            
            if(kID==kLinkedKey){
                StatusUpdater("warden,unlink,1,"+(string)kLinkedKey);
                GuardNotification("You unlink from "+sStr_WEARERNAMES+" warden system.",kLinkedKey);
                OwnerNotification(NameURI(kLinkedKey)+ " unlinks from your warden system",g_kWearer);    
            }else{
                StatusUpdater("warden,unlink,2,"+(string)kLinkedKey);
                GuardNotification("You unlink "+NameURI(kLinkedKey)+" from "+sStr_WEARERNAMES+" warden system.",kID);
                GuardNotification(NameURI(kID)+" unlinks you from "+sStr_WEARERNAMES+" warden system.",kLinkedKey);
                OwnerNotification(NameURI(kID)+ " unlinks "+NameURI(kLinkedKey)+" from your warden system",g_kWearer);    
            }
            GuardHUD(kID,"unlink");
        }else{
            
            GuardHUD(kID,"not_linked");
        }
        iLinked=0;
        iLinkedChanel=-9999;
        kLinkedKey=NULL_KEY;
        Listen_Stop();
    }else
    if(sCommand=="clear"){
        iLinked=0;
        iLinkedChanel=-9999;
        kLinkedKey=NULL_KEY;
        Listen_Stop();
    }
 }

UserCommand(integer iAuth, string sStr, key kID)
{
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,bgaddition,17,09,28,124");
    }
    integer iMenu=FALSE;
    if (llToLower(sStr) == "menu "+llToLower(IMMERSION_ON) || llToLower(sStr) == llToLower(IMMERSION_ON)){
       BGCommand(iAuth,IMMERSION_ON, kID,TRUE);      
    }else if (llToLower(sStr) == "menu "+llToLower(IMMERSION_OFF) || llToLower(sStr) == llToLower(IMMERSION_OFF)){
        BGCommand(iAuth,IMMERSION_OFF, kID,TRUE);      
    }else if (llToLower(sStr) == "menu welcome" || sStr == llToLower(g_sSubMenu)){
        submenu=0;
        WelcomeMenu(kID, iAuth);
    }else if (llSubStringIndex(llToLower(sStr),"menu welcome")==0) {
        if(g_kWearer!=llGetOwnerKey(kID)&&CMD_OWNER!=iAuth){
            return;
        }
        WelcomeCommand(iAuth, "enable main",kID);
    }else if (llSubStringIndex(sStr,"welcome")==0) {
        list lParams = llParseString2List(sStr, [" ",","], []);
        string sToken = llList2String(lParams, 1);
        string sValue = llList2String(lParams, 2);  
        WelcomeCommand(iAuth, sToken+" "+sValue,kID);
    }else if (llSubStringIndex(sStr,"rules")==0) {
        list lParams = llParseString2List(sStr, [" ",","], []);
        string sToken = llList2String(lParams, 1);
        string sValue = llList2String(lParams, 2);  
        WelcomeCommand(iAuth, sToken+" "+sValue,kID);
    }else{
        if (llSubStringIndex(llToLower(sStr),"menu")==0) {
            sStr=llGetSubString(sStr,llStringLength("menu")+1,-1);
            iMenu=TRUE;
        }

        if (llSubStringIndex(llToLower(sStr),"warden 0")==0||llSubStringIndex(llToLower(sStr),"warden 1")==0||llSubStringIndex(llToLower(sStr),"warden ☐")==0||llSubStringIndex(llToLower(sStr),"warden ☒")==0) {
            BGCommand(iAuth,sStr_warden, kID,iMenu);      
        }else 
        if (llSubStringIndex(llToLower(sStr),sStr_warden)==0) {
            sStr=llGetSubString(sStr,llStringLength(sStr_warden)+1,-1);
            WardenCommand(iAuth,sStr, kID,iMenu);      
        }
    }
} 

StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}


Listen_Message(string sStr, key kID){
    if(g_iWarden&&iLinked&&1<iMood){
        StatusUpdater("warden,message");
        if(llGetOwnerKey(kLinkedKey)==kLinkedKey){
            integer v = (integer)(llFrand(6.0));
            string sName=llList2String(lNames, v);
            sStr=llStringTrim(sStr,STRING_TRIM);
            if (llSubStringIndex(llToLower(sStr),"/me ")==0) {
                sStr=llGetSubString(sStr,llStringLength("/me"),-1);
                if(iLinkedChanel==0){
                    llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar warden|"+sName+sStr,kLinkedKey);
                }else{
                     llRegionSayTo(kLinkedKey,iLinkedChanel, sName+sStr);
                }
            }else{
                if(iLinkedChanel==0){
                    llMessageLinked(LINK_DIALOG,SPECIAL_NOTIFY,"0"+sStr_WEARERNAMES+" collar warden|"+sName+":"+sStr,kLinkedKey);
                }else{
                    llRegionSayTo(kLinkedKey,iLinkedChanel, sName+":"+sStr);
                }
            }
        }else{
            llRegionSayTo(kLinkedKey,iLinkedChanel,(string)kID+" "+sStr);
        }
    }
}


default
{
    state_entry()
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }
    on_rez(integer iParam)
    {
        g_kWearer = llGetOwner();
        if(llGetAttached() == 0) {
            isAttached = FALSE;
        } else {
            isAttached = TRUE;
        }
        initialize();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID)
    {
        if(iNum==SOBRIQUETSMS&&g_iWarden&&iLinked&&1<iMood){
            sStr=llGetSubString(sStr,llStringLength("sobriquet message")+1,-1);
            Listen_Message(sStr,kID);
        }else
        if (iNum == RLV_OFF){
            g_iRLVOn=FALSE;
        }else if (iNum == RLV_ON) {
            g_iRLVOn=TRUE;

        }else if (iNum == RLV_CLEAR){
            
        }
        else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER)
        {
            UserCommand(iNum,sStr,kID); 
        }else if (iNum == LINK_UPDATE){
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        }else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            
            if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                if (sToken == "moodvalue"){
                    iMood=(integer)sValue;
                }else if (sToken == "immersion"){
                    g_iImmersion=(integer)sValue;
                }
            }else
            if (llSubStringIndex(sToken,g_sBGLockToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sBGLockToken),-1);
                if (sToken==sStr_warden){
                    g_iWarden=(integer)sValue;
                }
            }else
            if (llSubStringIndex(sToken,g_sWelcomeToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sWelcomeToken),-1);
                 
                if (sToken =="enable") g_iEnable = (integer)sValue;
                else if (sToken ==g_sFirstRun) g_iFirstRun = (integer)sValue;
                else if (sToken ==g_sFirstOpen) g_iFirstOpen = (integer)sValue;
            }
            else if (sStr == "settings=sent") {
                TIMEMODE="init";
                llSetTimerEvent(2.0);
            }
        }else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAV = llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);                
                if (sMessage == UPMENU) {
                    if(submenu==0||submenu==1){
                        llMessageLinked(LINK_ROOT, iAuth, "menu "+g_sParentMenu, kAV);
                        return;
                    }
                }else{
                    
                    WelcomeCommand(iAuth ,sMessage, kAV);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        }
    }
    
    listen(integer l_channel, string name, key id, string message) 
    {
        if (1<iMood&&g_iWarden&&iLinked&&(l_channel==iPublicChanel||l_channel==iRPToolChanelI||l_channel==iRPToolChanelII)) {
            Listen_Message(message,id);      
        }
    }
    timer() 
    { 
        llSetTimerEvent(0);
        if(TIMEMODE=="init"){
            if(isAttached==0){
                TIMEMODE="";g_iReady=0;    
            }else{
                TIMEMODE="";
                g_iReady=1;  
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sGlobalToken+"immersion="+(string)g_iImmersion,"");
            }
        }
    }
    
    changed(integer iChange)
    {
        if (iChange & CHANGED_OWNER)
        {
            llResetScript();
        }
        if(iChange & CHANGED_REGION){

        }
    }
}


