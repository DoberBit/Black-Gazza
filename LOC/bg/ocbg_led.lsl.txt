//start_unprocessed_text
/*/|/start_unprocessed_text

string g_sSubMenu = "Led";
string g_sParentMenu = "";
key g_kWearer;
string g_sWearerNumber;
integer  g_iLocked;


integer CMD_OWNER = 500;
integer CMD_WEARER = 503;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;

integer MENUNAME_REQUEST = 3000;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
string g_sLedToken = "led_";
string g_sGlobalToken = "global_";

integer LOCK_MOOD;
list g_lElementsBlinky;
list g_lElementsBlinky_Set;
list g_lElementsPilotLight;
list g_lElementsFrontDisplay;
list g_lElementsLightBar;
vector black =  <0, 0, 0>;
vector red =    <1, 0, 0>;
vector orange = <1, 0.5, 0>;
vector yellow = <1, 1, 0>;
vector green =  <0, 1, 0>;
vector cyan =   <0, 1, 1>; 
vector white =  <1, 1, 1>;
vector purple=<0.5, 0.0, 1.0>; 
vector grey=<0.5, 0.5, 05>;
vector lime=<0.004, 1.000, 0.439>;
vector magenta = <1, 0, 1>; 

vector COLOR_SET;
vector COLOR_SET_LOCK;



integer g_iElementsFrontDisplay=1;
integer g_iElementsLightBar=1;
integer g_iElementsDDisplay=1;

float FrontDisplay_LIGHT_INTENSITY=0.0;
float FrontDisplay_LIGHT_RADIUS=0.0;
float FrontDisplay_LIGHT_FALLOFF=0.0;
float FrontDisplay_ALPHA=1.0;
float FrontDisplay_GLOW=0.5;
integer FrontDisplay_LIGHT_BOOLEAN=0;
integer FrontDisplay_BRIGHT_BOOLEAN=1;
vector FrontDisplay_COLOR;
vector FrontDisplay_LIGHT_COLOR;
integer iFrontDisplay_COLOR;
integer iFrontDisplay_LIGHT;


float LightBar_LIGHT_INTENSITY=1;
float LightBar_LIGHT_RADIUS=0.1;
float LightBar_LIGHT_FALLOFF=0.75;
float LightBar_ALPHA=1.0;
float LightBar_GLOW=1.0;
integer LightBar_LIGHT_BOOLEAN=1;
integer LightBar_BRIGHT_BOOLEAN=1;
vector LightBar_COLOR;
vector LightBar_LIGHT_COLOR;
integer iLightBar_COLOR;
integer iLightBar_LIGHT;


float Blinky_LIGHT_INTENSITY=0.0;
float Blinky_LIGHT_RADIUS=0.0;
float Blinky_LIGHT_FALLOFF=0.0;
float Blinky_ALPHA=1.0;
float Blinky_GLOW=1.0;
integer Blinky_LIGHT_BOOLEAN=0;
integer Blinky_BRIGHT_BOOLEAN=1;
vector Blinky_COLOR;
vector Blinky_LIGHT_COLOR;
integer iBlinky_COLOR;
integer iBlinky_LIGHT;
vector USED_Blinky_COLOR;
integer iBlinkyOveride;
vector USED_Blinky_LIGHT_COLOR;

float PilotLight_LIGHT_INTENSITY=1;
float PilotLight_LIGHT_RADIUS=0.1;
float PilotLight_LIGHT_FALLOFF=0.75;
float PilotLight_ALPHA=1.0;
float PilotLight_GLOW=1.0;
integer PilotLight_LIGHT_BOOLEAN=1;
integer PilotLight_BRIGHT_BOOLEAN=1;
vector PilotLight_COLOR;
vector PilotLight_LIGHT_COLOR;
integer iPilotLight_COLOR;
integer iPilotLight_LIGHT;

integer g_iBlinkyOveride;
integer g_iMood;

integer g_iStyle=2;
integer g_iWearerTypeValue;

string sStr_ddispaly="ddispaly";
string sStr_backbar="backbar";
string sStr_frontd="frontd";
string sStr_light_intensity="light_intensity";
string sStr_light_radius="light_radius";
string sStr_light_falloff="light_falloff";
string sStr_alpha="alpha";
string sStr_glow="glow";
string sStr_light_boolean="light_boolean";
string sStr_bright_boolean="bright_boolean";
string sStr_light_color="light_color";

string sStr_color="color";
string sStr_savecolor="savecolor";

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="LED";

float GetLSLColor(string sValue){
    float fValue=-1.0;
    if(~llSubStringIndex(sValue,".")){
        fValue=(float)sValue;
        if(0.0<=fValue&&fValue<=1.0){
            return fValue;
        }
    }else{
        integer iValue=(integer)sValue;
        if(0<=iValue&&iValue<=255){
            fValue=fValue/255;
        }
        if(0.0<=fValue&&fValue<=1.0){
            return fValue;
        }
    }
    return -1.0;
}

vector GetColor(integer i){
    vector color=black;
    if(i==1){
        color=red;
    }else
    if(i==2){
        color=orange;
    }else
    if(i==3){
        color=yellow;
    }else
    if(i==4){
        color=green;
    }else
    if(i==5){
        color=cyan;
    }else
    if(i==6){
        color=white;
    }else
    if(i==7){
        color=purple;
    }else
    if(i==8){
        color=grey;
    }else
    if(i==9){
        color=lime;
    }else
    if(i==10){
        color=magenta;
    }
    
    return color;
}

set_plcolor(string sToken, vector color){
    if(llSubStringIndex(sToken,"save")==0){
        PilotLight_COLOR=color;
        iPilotLight_COLOR=1;
        PilotLight_LIGHT_COLOR=color;
        iPilotLight_LIGHT=1;
    }
    /|/llOwnerSay("set_plcolor");
    display_elements_colorset(g_lElementsPilotLight,color,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
    display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,color, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl" );
}

set_lbcolor(string sToken, vector color){
    if(llSubStringIndex(sToken,"save")==0){
        LightBar_COLOR=color;
        iLightBar_COLOR=1;
        LightBar_LIGHT_COLOR=color;
        iLightBar_LIGHT=1;
    }
    /|/llOwnerSay("set_lbcolor");
    if(g_iElementsLightBar){
        display_elements_colorset(g_lElementsLightBar,color,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,LightBar_GLOW,"lb");
        display_elements_lightset(g_lElementsLightBar,ALL_SIDES,LightBar_BRIGHT_BOOLEAN,LightBar_LIGHT_BOOLEAN,color, LightBar_LIGHT_INTENSITY, LightBar_LIGHT_RADIUS,LightBar_LIGHT_FALLOFF,"lb" );
    }
}
set_fdcolor(string sToken, vector color){
    if(llSubStringIndex(sToken,"save")==0){
        FrontDisplay_COLOR=color;
        iFrontDisplay_COLOR=1;
        FrontDisplay_LIGHT_COLOR=color;
        iFrontDisplay_LIGHT=1;
    }
    /|/llOwnerSay("set_fdcolor");
    if(g_iElementsFrontDisplay){
        display_elements_colorset(g_lElementsFrontDisplay,color,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,FrontDisplay_GLOW,"fd");
        display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FrontDisplay_BRIGHT_BOOLEAN,FrontDisplay_LIGHT_BOOLEAN,color, FrontDisplay_LIGHT_INTENSITY, FrontDisplay_LIGHT_RADIUS,FrontDisplay_LIGHT_FALLOFF,"fd" );
    }
}

set_bcolor(string sToken, vector color){
    USED_Blinky_COLOR=color;    USED_Blinky_LIGHT_COLOR=color;
    if(llSubStringIndex(sToken,"save")==0){
        Blinky_COLOR=color;
        iBlinky_COLOR=1;
        Blinky_LIGHT_COLOR=color;
        iBlinky_LIGHT=1;
    }
}
MoodCommand(integer iNum, string sStr, key kID){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    sStr="";
    string sToken = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));
    integer iLength = llGetListLength(lParams);
    if (iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Led)", kID);
        return;
    }

    if((sValue=="1"||sValue=="0")&&iLength==2){
        if(sToken=="number"){
            g_iElementsDDisplay=(integer)sValue;
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sLedToken+sStr_ddispaly+"="+(string)g_iElementsDDisplay,"");
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sLedToken+sStr_ddispaly+"="+(string)g_iElementsDDisplay,"");    
            
        }
        if(sToken==sStr_frontd){
            g_iElementsFrontDisplay=(integer)sValue;
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sLedToken+sStr_frontd+"="+(string)g_iElementsFrontDisplay,"");
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sLedToken+sStr_frontd+"="+(string)g_iElementsFrontDisplay,"");
        }
        if(sToken==sStr_backbar){
            g_iElementsLightBar=(integer)sValue;
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sLedToken+sStr_backbar+"="+(string)g_iElementsLightBar,"");
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sLedToken+sStr_backbar+"="+(string)g_iElementsLightBar,"");
        }
    }else
    if((sToken==sStr_color)||(sToken==sStr_savecolor)||(sToken=="fdcolor")||(sToken=="savefdcolor")||(sToken=="lbcolor")||(sToken=="savelbcolor")||(sToken=="plcolor")||(sToken=="saveplcolor")||(sToken=="bcolor")||(sToken=="savebcolor")){
        integer iOK=0;
        vector color=ZERO_VECTOR;
        if(sValue=="refresh"){
            iOK=1;
        }else{
            if(iLength==2){
                color=GetColor((integer)sValue);
                iOK=1;
            }else
            if(iLength==4){
                string sValue2 = llToLower(llList2String(lParams, 2));
                string sValue3 = llToLower(llList2String(lParams, 3));
                float color_r=GetLSLColor(sValue);float color_g=GetLSLColor(sValue2);float color_b=GetLSLColor(sValue3);
                if(0.0<=color_r&&color_r<=1.0&&0.0<=color_g&&color_g<=1.0&&0.0<=color_b&&color_b<=1.0){
                    string str_Colors="<"+(string)color_r+","+(string)color_g+","+(string)color_b+">";
                    color=(vector)str_Colors;
                    iOK=1;
                }
            }
        }
        
        if(iOK&&sValue=="refresh"){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",setcolor,"+sToken+","+sValue);
            if((sToken==sStr_color)||(sToken=="fdcolor")||(sToken==sStr_savecolor)||(sToken=="savefdcolor")){
                set_fdcolor(sToken,FrontDisplay_COLOR);
            }
            if((sToken==sStr_color)||(sToken=="lbcolor")||(sToken==sStr_savecolor)||(sToken=="savelbcolor")){
                set_lbcolor(sToken,LightBar_COLOR);
            }
            if((sToken==sStr_color)||(sToken=="plcolor")||(sToken==sStr_savecolor)||(sToken=="saveplcolor")){
                set_plcolor(sToken,PilotLight_COLOR);
            }
            if((sToken==sStr_color)||(sToken=="bcolor")||(sToken==sStr_savecolor)||(sToken=="savebcolor")){
                set_bcolor(sToken,Blinky_COLOR);
            }
        }else
        if(iOK){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",setcolor,"+sToken+","+(string)color);
            if((sToken==sStr_color)||(sToken=="fdcolor")||(sToken==sStr_savecolor)||(sToken=="savefdcolor")){
                set_fdcolor(sToken,color);
            }
            if((sToken==sStr_color)||(sToken=="lbcolor")||(sToken==sStr_savecolor)||(sToken=="savelbcolor")){
                set_lbcolor(sToken,color);
            }
            if((sToken==sStr_color)||(sToken=="plcolor")||(sToken==sStr_savecolor)||(sToken=="saveplcolor")){
                set_plcolor(sToken,color);
            }
            if((sToken==sStr_color)||(sToken=="bcolor")||(sToken==sStr_savecolor)||(sToken=="savebcolor")){
                set_bcolor(sToken,color);
            }
        }
        
    }else
    if(sToken=="refresh"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",refresh");
        USED_Blinky_COLOR=Blinky_COLOR;
        USED_Blinky_LIGHT_COLOR=Blinky_LIGHT_COLOR;
        
        display_elements_colorset(g_lElementsPilotLight,PilotLight_COLOR,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
        display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,PilotLight_LIGHT_COLOR, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl" );
        if(g_iElementsFrontDisplay){
            /|/llOwnerSay("refresh:g_iElementsFrontDisplay:"+(string)g_iElementsFrontDisplay);
            display_elements_colorset(g_lElementsFrontDisplay,FrontDisplay_COLOR,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,FrontDisplay_GLOW,"fd");
            display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FrontDisplay_BRIGHT_BOOLEAN,FrontDisplay_LIGHT_BOOLEAN,FrontDisplay_LIGHT_COLOR, FrontDisplay_LIGHT_INTENSITY, FrontDisplay_LIGHT_RADIUS,FrontDisplay_LIGHT_FALLOFF,"fd" );
        
        }
        if(g_iElementsLightBar){
            /|/llOwnerSay("refresh:g_iElementsLightBar:"+(string)g_iElementsLightBar);
            display_elements_colorset(g_lElementsLightBar,LightBar_COLOR,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,LightBar_GLOW,"lb");
            display_elements_lightset(g_lElementsLightBar,ALL_SIDES,LightBar_BRIGHT_BOOLEAN,LightBar_LIGHT_BOOLEAN,LightBar_LIGHT_COLOR, LightBar_LIGHT_INTENSITY, LightBar_LIGHT_RADIUS,LightBar_LIGHT_FALLOFF,"lb" );
            
        }
       
       
    }else
    if(sToken=="reset"){
        
        Blinky_COLOR=COLOR_SET;
        LightBar_COLOR=COLOR_SET;
        FrontDisplay_COLOR=COLOR_SET;
        PilotLight_COLOR=COLOR_SET_LOCK;
        USED_Blinky_COLOR=COLOR_SET;

        Blinky_LIGHT_COLOR=COLOR_SET;
        LightBar_LIGHT_COLOR=COLOR_SET;
        FrontDisplay_LIGHT_COLOR=COLOR_SET;
        PilotLight_LIGHT_COLOR=COLOR_SET_LOCK;
        USED_Blinky_LIGHT_COLOR=COLOR_SET;
        
        iBlinky_COLOR=0;
        iLightBar_COLOR=0;
        iFrontDisplay_COLOR=0;
        iPilotLight_COLOR=0;
        
        iBlinky_LIGHT=0;
        iLightBar_LIGHT=0;
        iFrontDisplay_LIGHT=0;
        iPilotLight_LIGHT=0;
        
        iBlinkyOveride=0;
 
        display_elements_colorset(g_lElementsPilotLight,COLOR_SET_LOCK,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
        display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,COLOR_SET_LOCK, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl" );
        if(g_iElementsLightBar){
            display_elements_colorset(g_lElementsLightBar,COLOR_SET,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,LightBar_GLOW,"lb");
            display_elements_lightset(g_lElementsLightBar,ALL_SIDES,LightBar_BRIGHT_BOOLEAN,LightBar_LIGHT_BOOLEAN,COLOR_SET, LightBar_LIGHT_INTENSITY, LightBar_LIGHT_RADIUS,LightBar_LIGHT_FALLOFF,"lb" );
        }
        if(g_iElementsFrontDisplay){
            display_elements_colorset(g_lElementsFrontDisplay,COLOR_SET,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,FrontDisplay_GLOW,"fd");
            display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FrontDisplay_BRIGHT_BOOLEAN,FrontDisplay_LIGHT_BOOLEAN,COLOR_SET, FrontDisplay_LIGHT_INTENSITY, FrontDisplay_LIGHT_RADIUS,FrontDisplay_LIGHT_FALLOFF,"fd" );
        }
    }else
    if(sToken=="resetv"){
        black =  <0, 0, 0>;
        red =    <1, 0, 0>;
        orange = <1, 0.5, 0>;
        yellow = <1, 1, 0>;
        green =  <0, 1, 0>;
        cyan =   <0, 1, 1>; 
        white =  <1, 1, 1>;
        purple=<0.5, 0.0, 1.0>; 
        grey=<0.5, 0.5, 05>;
        lime=<0.004, 1.000, 0.439>;

        FrontDisplay_LIGHT_INTENSITY=0.0;
        FrontDisplay_LIGHT_RADIUS=0.0;
        FrontDisplay_LIGHT_FALLOFF=0.0;
        FrontDisplay_ALPHA=1.0;
        FrontDisplay_GLOW=0.5;
        FrontDisplay_LIGHT_BOOLEAN=0;
        FrontDisplay_BRIGHT_BOOLEAN=1;

        LightBar_LIGHT_INTENSITY=1;
        LightBar_LIGHT_RADIUS=0.1;
        LightBar_LIGHT_FALLOFF=0.75;
        LightBar_ALPHA=1.0;
        LightBar_GLOW=1.0;
        LightBar_LIGHT_BOOLEAN=1;
        LightBar_BRIGHT_BOOLEAN=1;

        Blinky_LIGHT_INTENSITY=0.0;
        Blinky_LIGHT_RADIUS=0.0;
        Blinky_LIGHT_FALLOFF=0.0;
        Blinky_ALPHA=1.0;
        Blinky_GLOW=1.0;
        Blinky_LIGHT_BOOLEAN=0;
        Blinky_BRIGHT_BOOLEAN=1;

        PilotLight_LIGHT_INTENSITY=1;
        PilotLight_LIGHT_RADIUS=0.1;
        PilotLight_LIGHT_FALLOFF=0.75;
        PilotLight_ALPHA=1.0;
        PilotLight_GLOW=1.0;
        PilotLight_LIGHT_BOOLEAN=1;
        PilotLight_BRIGHT_BOOLEAN=1;
    }else 
    if(sToken=="save"){
        llMessageLinked(LINK_SET,CMD_OWNER,"inmatedisplay save",g_kWearer);
        iBlinky_COLOR=1;
        iLightBar_COLOR=1;
        iFrontDisplay_COLOR=1;
        iPilotLight_COLOR=1;
        
        iBlinky_LIGHT=1;
        iLightBar_LIGHT=1;
        iFrontDisplay_LIGHT=1;
        iPilotLight_LIGHT=1;
        list tmp=[];
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        FrontDisplay_COLOR=llList2Vector(tmp, 0);   FrontDisplay_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        FrontDisplay_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        FrontDisplay_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[PRIM_POINT_LIGHT]); 
        FrontDisplay_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        FrontDisplay_LIGHT_COLOR=llList2Vector(tmp, 1); 
        FrontDisplay_LIGHT_INTENSITY=llList2Float(tmp, 2);
        FrontDisplay_LIGHT_RADIUS=llList2Float(tmp, 3);
        FrontDisplay_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        LightBar_COLOR=llList2Vector(tmp, 0);   LightBar_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        LightBar_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        LightBar_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[PRIM_POINT_LIGHT]); 
        LightBar_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        LightBar_LIGHT_COLOR=llList2Vector(tmp, 1); 
        LightBar_LIGHT_INTENSITY=llList2Float(tmp, 2);
        LightBar_LIGHT_RADIUS=llList2Float(tmp, 3);
        LightBar_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        Blinky_COLOR=llList2Vector(tmp, 0);   Blinky_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        Blinky_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        Blinky_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[PRIM_POINT_LIGHT]); 
        Blinky_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        Blinky_LIGHT_COLOR=llList2Vector(tmp, 1); 
        Blinky_LIGHT_INTENSITY=llList2Float(tmp, 2);
        Blinky_LIGHT_RADIUS=llList2Float(tmp, 3);
        Blinky_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        PilotLight_COLOR=llList2Vector(tmp, 0);  PilotLight_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        PilotLight_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        PilotLight_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[PRIM_POINT_LIGHT]); 
        PilotLight_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        PilotLight_LIGHT_COLOR=llList2Vector(tmp, 1); 
        PilotLight_LIGHT_INTENSITY=llList2Float(tmp, 2);
        PilotLight_LIGHT_RADIUS=llList2Float(tmp, 3);
        PilotLight_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
    }
        
        
}

integer roll(){
    integer v = (integer)(llFrand(4.0)+0);
    
    return v;
}


locklight()
{
    vector color=black; 
    if(g_iLocked==FALSE)
    {
        LOCK_MOOD=0;
        color=green;
        COLOR_SET_LOCK=color;  
    }
    else if(g_iLocked==TRUE)
    {
        LOCK_MOOD=1;
        color=red;
        COLOR_SET_LOCK=color;
    }
    
    if(PilotLight_COLOR==COLOR_SET_LOCK){
        iPilotLight_COLOR=0;
        iPilotLight_LIGHT=0;
    }
    if(iPilotLight_COLOR==0){
        PilotLight_COLOR=color;
    }
    if(iPilotLight_LIGHT==0){
        PilotLight_LIGHT_COLOR=color;
    }
    
    display_elements_colorset(g_lElementsPilotLight,PilotLight_COLOR,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
    display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,PilotLight_LIGHT_COLOR, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl");
}
vector inmate_type(){
    
    if(g_iWearerTypeValue==1){
        return orange;
    }else
    if(g_iWearerTypeValue==2){
         return cyan;
    }else
    if(g_iWearerTypeValue==3){
         return green;
    }else
    if(g_iWearerTypeValue==4){
         return magenta;
    }else
    if(g_iWearerTypeValue==5){
         return white;
    }else
    if(g_iWearerTypeValue==6){
         return red;
    }else{
        return orange;
    }
}
initialize() {
    g_kWearer = llGetOwner();
    g_iBlinkyOveride=0;
    llMessageLinked(LINK_SET, LM_SETTING_REQUEST, g_sGlobalToken+"locked", "");
}
display_elements_lightset(list ELEMENTS, integer BRIGHT_SIDES, integer BRIGHT_BOOLEAN, integer LIGHT_BOOLEAN, vector LIGHT_COLOR, float LIGHT_INTENSITY, float LIGHT_RADIUS, float LIGHT_FALLOFF,string sName){

    
    integer index=0;
    while (index < llGetListLength(ELEMENTS))
    {
        integer link=llList2Integer(ELEMENTS, index);

        llSetLinkPrimitiveParamsFast( link,[
                PRIM_FULLBRIGHT, BRIGHT_SIDES, BRIGHT_BOOLEAN,
                PRIM_POINT_LIGHT, LIGHT_BOOLEAN, LIGHT_COLOR, LIGHT_INTENSITY, LIGHT_RADIUS, LIGHT_FALLOFF] );
        ++index;
    }
}
display_elements_colorset(list ELEMENTS, vector COLOR, integer COLOR_SIDE,float COLOR_ALPHA, integer GLOW_SIDE, float GLOW_ITENSITY,string sName ){

    integer index=0;
    while (index < llGetListLength(ELEMENTS))
    {
        integer link=llList2Integer(ELEMENTS, index);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_COLOR, COLOR_SIDE, COLOR,COLOR_ALPHA]);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_GLOW,GLOW_SIDE, GLOW_ITENSITY] );
        ++index;
    }
}
display_element_lightset(list ELEMENTS, integer index,integer BRIGHT_SIDES, integer BRIGHT_BOOLEAN, integer LIGHT_BOOLEAN, vector LIGHT_COLOR, float LIGHT_INTENSITY, float LIGHT_RADIUS, float LIGHT_FALLOFF,string sName ){

    if(index < llGetListLength(ELEMENTS)&&index>=0)
    {
        integer link=llList2Integer(ELEMENTS, index);

        llSetLinkPrimitiveParamsFast( link,[
                PRIM_FULLBRIGHT, BRIGHT_SIDES, BRIGHT_BOOLEAN,
                PRIM_POINT_LIGHT, LIGHT_BOOLEAN, LIGHT_COLOR, LIGHT_INTENSITY, LIGHT_RADIUS, LIGHT_FALLOFF] );
    }
}
display_element_colorset(list ELEMENTS, integer index,vector COLOR, integer COLOR_SIDE,float COLOR_ALPHA, integer GLOW_SIDE, float GLOW_ITENSITY,string sName ){

    if(index < llGetListLength(ELEMENTS)&&index>=0)
    {
        integer link=llList2Integer(ELEMENTS, index);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_COLOR, COLOR_SIDE, COLOR,COLOR_ALPHA]);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_GLOW,GLOW_SIDE, GLOW_ITENSITY] );
    }
}

blinky_effect(integer m){
    integer i=0;
    if(g_iMood==0){
         llSetTimerEvent(0.0);
         m=0;
    }
    
    if(m==0&&g_iBlinkyOveride==0){
        while (i < llGetListLength(g_lElementsBlinky))
        {
            display_element_colorset(g_lElementsBlinky,i,black,ALL_SIDES,Blinky_ALPHA,ALL_SIDES,0.0,"b");
            display_element_lightset(g_lElementsBlinky,i,ALL_SIDES,FALSE,FALSE,black, 0,0,0,"b");
            g_lElementsBlinky_Set=llListReplaceList(g_lElementsBlinky_Set, [0], i, i);    
            ++i;
        }    
    }
    else if(m==1&&g_iBlinkyOveride==0){
        i=roll();
        if(i<llGetListLength(g_lElementsBlinky)&&i>-1)
        {
            if(llList2Integer(g_lElementsBlinky_Set, i)==1)
            {
                display_element_colorset(g_lElementsBlinky,i,black,ALL_SIDES,Blinky_ALPHA,ALL_SIDES,0.0,"b");
                display_element_lightset(g_lElementsBlinky,i,ALL_SIDES,FALSE,FALSE,black, 0,0,0,"b" );
                g_lElementsBlinky_Set=llListReplaceList(g_lElementsBlinky_Set, [0], i, i);    
            }else
            {
                display_element_colorset(g_lElementsBlinky,i,USED_Blinky_COLOR,ALL_SIDES,Blinky_ALPHA,ALL_SIDES,Blinky_GLOW,"b");
                display_element_lightset(g_lElementsBlinky,i,ALL_SIDES,Blinky_BRIGHT_BOOLEAN,Blinky_LIGHT_BOOLEAN,USED_Blinky_LIGHT_COLOR, Blinky_LIGHT_INTENSITY, Blinky_LIGHT_RADIUS,Blinky_LIGHT_FALLOFF,"b" );
                g_lElementsBlinky_Set=llListReplaceList(g_lElementsBlinky_Set, [1], i, i);    
            }
        }    
    }
}
blinky(){
    if(g_iMood==2)
    {
        COLOR_SET=green;
    }
    else if(g_iMood==3)
    {
        COLOR_SET=yellow;
    }
    else if(g_iMood==4)
    {
        COLOR_SET=orange;
    }
    else if(g_iMood==5)
    {
        COLOR_SET=cyan;
    }
    else if(g_iMood==1)
    {
        COLOR_SET=white;
    }
    else if(g_iMood==0)
    {
        COLOR_SET=black;
    }
    else if(g_iMood==6)
    {
        COLOR_SET=purple;
    }
    
    if(iBlinky_COLOR==0){
        Blinky_COLOR=COLOR_SET;
    }
    
    if(iLightBar_COLOR==0){
        if(g_iStyle==1){
             LightBar_COLOR=<0.000, 0.502, 1.000>;
        }else if(g_iStyle==3){
            LightBar_COLOR=inmate_type();
        }else{
             LightBar_COLOR=COLOR_SET;
        }
    }
    
    if(iFrontDisplay_COLOR==0){
        if(g_iStyle==1){
            FrontDisplay_COLOR=<0.000, 0.718, 1.000>;
        }else if(g_iStyle==3){
            FrontDisplay_COLOR=inmate_type();
        }else{
             FrontDisplay_COLOR=COLOR_SET;
        }
    }
    
    if(iBlinky_LIGHT==0){
        Blinky_LIGHT_COLOR=COLOR_SET;
    }
    
    if(iLightBar_LIGHT==0){
        if(g_iStyle==1){
            LightBar_LIGHT_COLOR=<0.125, 0.835, 1.000>;
        }else if(g_iStyle==3){
            LightBar_LIGHT_COLOR=inmate_type();
        }else{
            LightBar_LIGHT_COLOR=COLOR_SET;
        }
    }
    
    if(iFrontDisplay_LIGHT==0){
        if(g_iStyle==1){
            FrontDisplay_LIGHT_COLOR=<0.000, 0.718, 1.000>;
        }else if(g_iStyle==3){
            FrontDisplay_LIGHT_COLOR=inmate_type();
        }else{
            FrontDisplay_LIGHT_COLOR=COLOR_SET;
        }
    }
    
    USED_Blinky_COLOR=Blinky_COLOR;
    USED_Blinky_LIGHT_COLOR=Blinky_LIGHT_COLOR;
    
    if(g_iMood==0)
    {
        if(g_iElementsFrontDisplay==1){
            /|/llOwnerSay("do_g_iElementsFrontDisplay:"+(string)g_iElementsFrontDisplay);
            display_elements_colorset(g_lElementsFrontDisplay,black,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,0.0,"fd");
            display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FALSE,FALSE,black, 0, 0,0,"fd");
        }
        if(g_iElementsLightBar==1){
            /|/llOwnerSay("do_g_iElementsLightBar:"+(string)g_iElementsLightBar);
            display_elements_colorset(g_lElementsLightBar,black,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,0.0,"lb");
            display_elements_lightset(g_lElementsLightBar,ALL_SIDES,FALSE,FALSE,black, 0, 0,0,"lb" );
        }
        
        blinky_effect(0);
        llSetTimerEvent(0);
    }else{
        if(g_iElementsFrontDisplay==1){
            /|/llOwnerSay("do_g_iElementsFrontDisplay:"+(string)g_iElementsFrontDisplay);
            display_elements_colorset(g_lElementsFrontDisplay,FrontDisplay_COLOR,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,FrontDisplay_GLOW,"fd");
            display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FrontDisplay_BRIGHT_BOOLEAN,FrontDisplay_LIGHT_BOOLEAN,FrontDisplay_LIGHT_COLOR, FrontDisplay_LIGHT_INTENSITY, FrontDisplay_LIGHT_RADIUS,FrontDisplay_LIGHT_FALLOFF,"fd" );
        }
        if(g_iElementsLightBar==1){
            /|/llOwnerSay("do_g_iElementsLightBar:"+(string)g_iElementsLightBar);
            display_elements_colorset(g_lElementsLightBar,LightBar_COLOR,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,LightBar_GLOW,"lb");
            display_elements_lightset(g_lElementsLightBar,ALL_SIDES,LightBar_BRIGHT_BOOLEAN,LightBar_LIGHT_BOOLEAN,LightBar_LIGHT_COLOR, LightBar_LIGHT_INTENSITY, LightBar_LIGHT_RADIUS,LightBar_LIGHT_FALLOFF,"lb" );
        }

        blinky_effect(0);
        llSetTimerEvent(0.5);
    }
    
}

UserCommand(integer iNum, string sStr, key kID) { 
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,led,17,10,20,111");
    }else
    if (llSubStringIndex(llToLower(sStr),llToLower(g_sSubMenu))==0) {
        sStr=llGetSubString(sStr,llStringLength(g_sSubMenu)+1,-1);
        MoodCommand(iNum,sStr,kID);    
    }
}
BuildElementList() 
{
    integer n;
    integer iLinkCount = llGetNumberOfPrims();
    
    string sPrimName;
    list lParams;
    
    g_lElementsBlinky = [];
    g_lElementsBlinky_Set = [];
    g_lElementsPilotLight = [];

    
    
    
    
    g_lElementsFrontDisplay=[];
    g_lElementsLightBar=[];
    
    for (n = 1; n <= iLinkCount; ++n)
    {
        sPrimName=llGetLinkName(n); 
        lParams=llParseString2List((string)llGetObjectDetails(llGetLinkKey(n), [OBJECT_DESC]), ["~"], []);    
        if(0<llGetListLength(lParams)){
            if (sPrimName=="PilotLight"||~llListFindList(lParams, ["pilotlight"])) 
            {
                g_lElementsPilotLight += [n];
            } else if (sPrimName=="blinky"||~llListFindList(lParams, ["blinky"])) 
            {
                g_lElementsBlinky += [n];
                g_lElementsBlinky_Set+= [0];
            } else if(sPrimName=="Front Display"||~llListFindList(lParams, ["frontdisplay"]))
            {
                g_lElementsFrontDisplay+=[n];
            }else if(sPrimName=="Light Bar"||~llListFindList(lParams, ["lightbar"]))
            {
                g_lElementsLightBar+=[n];
            } 
        }else{
            if (sPrimName=="PilotLight") 
            {
                g_lElementsPilotLight += [n];
            } else if (sPrimName=="blinky") {
                g_lElementsBlinky += [n];
                g_lElementsBlinky_Set+= [0];
            } else if(sPrimName=="Front Display")
            {
                g_lElementsFrontDisplay+=[n];
            }else if(sPrimName=="Light Bar")
            {
                g_lElementsLightBar+=[n];
            } 
        }
    }
    lParams=[];
}

default {
    on_rez(integer param) {
        BuildElementList();
        initialize();
    }

    state_entry() {
        
        BuildElementList();
        initialize();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == MENUNAME_REQUEST && sStr == g_sParentMenu){}
            
        else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER)
            UserCommand(iNum, sStr, kID);
        else if (iNum == DIALOG_RESPONSE) {
            
        } else if (iNum == DIALOG_TIMEOUT) {
            
        }else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG"){
                LINK_DIALOG = iSender;
            }else if (sStr == "LINK_SAVE"){
                LINK_SAVE = iSender;
            }
        } else if (iNum == REBOOT && sStr == "reboot"){
            llResetScript();
        }else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            lParams=[];
           
            if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                
                if (sToken =="InmateNumber")
                {
                    g_sWearerNumber = sValue;
                }else
                if (sToken =="locked") {
                   g_iLocked = (integer)sValue;
                   locklight(); 
                   
                }else
                if (sToken =="moodvalue"){
                    g_iMood=(integer)sValue;
                    blinky();
                }else
                if (sToken =="InmateTypeV")
                {
                   g_iWearerTypeValue = (integer)sValue;
                   blinky();
                }
            }else
            if (llSubStringIndex(sToken,g_sLedToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sLedToken),-1);
                sToken=llToLower(sToken);
                llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",setting,"+sToken+","+sValue);
                if(sToken == sStr_ddispaly){
                   g_iElementsDDisplay=(integer)sValue;
                   /|/llOwnerSay("g_iElementsDDisplay:"+(string)g_iElementsDDisplay);
                }else
                if(sToken == "style"){
                   g_iStyle=(integer)sValue;
                   blinky();
                }else
                if(sToken == sStr_backbar){
                    g_iElementsLightBar=(integer)sValue;
                    /|/llOwnerSay("g_iElementsLightBar:"+(string)g_iElementsLightBar);
                }else
                if(sToken == sStr_frontd){
                    g_iElementsFrontDisplay=(integer)sValue;
                    /|/llOwnerSay("g_iElementsFrontDisplay:"+(string)g_iElementsFrontDisplay);
                }else
                if(sToken == "blinkyoveride"){
                    g_iBlinkyOveride=(integer)sValue;
                }else
                if (llSubStringIndex(sToken,"color_")==0){
                    sToken=llGetSubString(sToken,llStringLength("color_"),-1);
                    if(sToken=="black"){
                        black=(vector)sValue;
                    }
                    else if(sToken=="red"){
                        red=(vector)sValue;
                    }
                    else if(sToken=="orange"){
                        orange=(vector)sValue;
                    }
                    else if(sToken=="yellow"){
                        yellow=(vector)sValue;
                    }
                    else if(sToken=="purple"){
                        purple=(vector)sValue;
                    }
                    else if(sToken=="lime"){
                        lime=(vector)sValue;
                    }
                    else if(sToken=="magenta"){
                        magenta=(vector)sValue;
                    }
                    else if(sToken=="green"){
                        green=(vector)sValue;
                    }
                    else if(sToken=="cyan"){
                        cyan=(vector)sValue;
                    }
                    else if(sToken=="white"){
                        white=(vector)sValue;
                    }
                    else if(sToken=="grey"){
                        grey=(vector)sValue;
                    }
                }else
                if (llSubStringIndex(sToken,"frontdisplay_")==0){
                    sToken=llGetSubString(sToken,llStringLength("frontdisplay_"),-1);
                
                    if(sToken==sStr_light_intensity){
                        FrontDisplay_LIGHT_INTENSITY=(float)sValue;
                    }
                    else if(sToken==sStr_light_radius){
                        FrontDisplay_LIGHT_RADIUS=(float)sValue;
                    }
                    else if(sToken==sStr_light_falloff){
                        FrontDisplay_LIGHT_FALLOFF=(float)sValue;
                    }
                    else if(sToken==sStr_alpha){
                        FrontDisplay_ALPHA=(float)sValue;
                    }
                    else if(sToken==sStr_glow){
                        FrontDisplay_GLOW=(float)sValue;
                    }
                    else if(sToken==sStr_light_boolean){
                        FrontDisplay_LIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_bright_boolean){
                        FrontDisplay_BRIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_color){
                    FrontDisplay_COLOR=(vector)sValue;
                    }
                    else if(sToken==sStr_light_color){
                        FrontDisplay_LIGHT_COLOR=(vector)sValue;
                    }
                }else
                if (llSubStringIndex(sToken,"lightbar_")==0){
                    sToken=llGetSubString(sToken,llStringLength("lightbar_"),-1);
                    
                    if(sToken==sStr_light_intensity){
                        LightBar_LIGHT_INTENSITY=(float)sValue;
                    }
                    else if(sToken==sStr_light_radius){
                        LightBar_LIGHT_RADIUS=(float)sValue;
                    }
                    else if(sToken==sStr_light_falloff){
                        LightBar_LIGHT_FALLOFF=(float)sValue;
                    }
                    else if(sToken==sStr_alpha){
                        LightBar_ALPHA=(float)sValue;
                    }
                    else if(sToken==sStr_glow){
                        LightBar_GLOW=(float)sValue;
                    }
                    else if(sToken==sStr_light_boolean){
                        LightBar_LIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_bright_boolean){
                        LightBar_BRIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_color){
                    LightBar_COLOR=(vector)sValue;
                    }
                    else if(sToken==sStr_light_color){
                        LightBar_LIGHT_COLOR=(vector)sValue;
                    }
                }else
                if (llSubStringIndex(sToken,"pilotlight_")==0){
                    sToken=llGetSubString(sToken,llStringLength("pilotlight_"),-1);
                    
                    if(sToken==sStr_light_intensity){
                        PilotLight_LIGHT_INTENSITY=(float)sValue;
                    }
                    else if(sToken==sStr_light_radius){
                        PilotLight_LIGHT_RADIUS=(float)sValue;
                    }
                    else if(sToken==sStr_light_falloff){
                       PilotLight_LIGHT_FALLOFF=(float)sValue;
                    }
                    else if(sToken==sStr_alpha){
                        PilotLight_ALPHA=(float)sValue;
                    }
                    else if(sToken==sStr_glow){
                        PilotLight_GLOW=(float)sValue;
                    }
                    else if(sToken==sStr_light_boolean){
                        PilotLight_LIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_bright_boolean){
                        PilotLight_BRIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_color){
                        PilotLight_COLOR=(vector)sValue;
                    }
                    else if(sToken==sStr_light_color){
                        PilotLight_LIGHT_COLOR=(vector)sValue;
                    }
                }else
                if (llSubStringIndex(sToken,"blinky_")==0){
                    sToken=llGetSubString(sToken,llStringLength("blinky_"),-1);
                    
                    if(sToken==sStr_light_intensity){
                    Blinky_LIGHT_INTENSITY=(float)sValue;
                    }
                    else if(sToken==sStr_light_radius){
                        Blinky_LIGHT_RADIUS=(float)sValue;
                    }
                    else if(sToken==sStr_light_falloff){
                       Blinky_LIGHT_FALLOFF=(float)sValue;
                    }
                    else if(sToken==sStr_alpha){
                        Blinky_ALPHA=(float)sValue;
                    }
                    else if(sToken==sStr_glow){
                        Blinky_GLOW=(float)sValue;
                    }
                    else if(sToken==sStr_light_boolean){
                        Blinky_LIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_bright_boolean){
                        Blinky_BRIGHT_BOOLEAN=(integer)sValue;
                    }
                    else if(sToken==sStr_color){
                        Blinky_COLOR=(vector)sValue;
                    }
                    else if(sToken==sStr_light_color){
                        Blinky_LIGHT_COLOR=(vector)sValue;
                    }
                }
                else if(sToken=="ilightbar_color"){
                    iLightBar_COLOR=(integer)sValue;
                }
                else if(sToken=="ilightbar_light"){
                    iLightBar_LIGHT=(integer)sValue;
                }
                else if(sToken=="iblinky_color"){
                    iBlinky_COLOR=(integer)sValue;
                }
                else if(sToken=="iblinky_light"){
                    iBlinky_LIGHT=(integer)sValue;
                }
                else if(sToken=="ipilotlight_color"){
                    iPilotLight_COLOR=(integer)sValue;
                }
                else if(sToken=="ipilotlight_light"){
                    iPilotLight_LIGHT=(integer)sValue;
                }
                else if(sToken=="ifrontdisplay_color"){
                    iFrontDisplay_COLOR=(integer)sValue;
                }
                else if(sToken=="ifrontdisplay_light"){
                    iFrontDisplay_LIGHT=(integer)sValue;
                }
            }else
            if (sStr == "settings=sent") {

            }

           
            
        }
    }
    timer() {
       blinky_effect(1);
    }
    
    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) llResetScript();
        if (iChange & CHANGED_LINK) {
            
            BuildElementList();
        }
    }
}

*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 10/19/2017 22:46:33
//mono






string g_sSubMenu = "Led";
string g_sParentMenu = "";
key g_kWearer;
string g_sWearerNumber;
integer  g_iLocked;


integer CMD_OWNER = 500;
integer CMD_WEARER = 503;

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;

integer MENUNAME_REQUEST = 3000;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
string g_sLedToken = "led_";
string g_sGlobalToken = "global_";

integer LOCK_MOOD;
list g_lElementsBlinky;
list g_lElementsBlinky_Set;
list g_lElementsPilotLight;
list g_lElementsFrontDisplay;
list g_lElementsLightBar;
vector black =  <0, 0, 0>;
vector red =    <1, 0, 0>;
vector orange = <1, 0.5, 0>;
vector yellow = <1, 1, 0>;
vector green =  <0, 1, 0>;
vector cyan =   <0, 1, 1>; 
vector white =  <1, 1, 1>;
vector purple=<0.5, 0.0, 1.0>; 
vector grey=<0.5, 0.5, 05>;
vector lime=<0.004, 1.000, 0.439>;
vector magenta = <1, 0, 1>; 

vector COLOR_SET;
vector COLOR_SET_LOCK;



integer g_iElementsFrontDisplay=1;
integer g_iElementsLightBar=1;
integer g_iElementsDDisplay=1;

float FrontDisplay_LIGHT_INTENSITY=0.0;
float FrontDisplay_LIGHT_RADIUS=0.0;
float FrontDisplay_LIGHT_FALLOFF=0.0;
float FrontDisplay_ALPHA=1.0;
float FrontDisplay_GLOW=0.5;
integer FrontDisplay_LIGHT_BOOLEAN=0;
integer FrontDisplay_BRIGHT_BOOLEAN=1;
vector FrontDisplay_COLOR;
vector FrontDisplay_LIGHT_COLOR;
integer iFrontDisplay_COLOR;
integer iFrontDisplay_LIGHT;


float LightBar_LIGHT_INTENSITY=1;
float LightBar_LIGHT_RADIUS=0.1;
float LightBar_LIGHT_FALLOFF=0.75;
float LightBar_ALPHA=1.0;
float LightBar_GLOW=1.0;
integer LightBar_LIGHT_BOOLEAN=1;
integer LightBar_BRIGHT_BOOLEAN=1;
vector LightBar_COLOR;
vector LightBar_LIGHT_COLOR;
integer iLightBar_COLOR;
integer iLightBar_LIGHT;


float Blinky_LIGHT_INTENSITY=0.0;
float Blinky_LIGHT_RADIUS=0.0;
float Blinky_LIGHT_FALLOFF=0.0;
float Blinky_ALPHA=1.0;
float Blinky_GLOW=1.0;
integer Blinky_LIGHT_BOOLEAN=0;
integer Blinky_BRIGHT_BOOLEAN=1;
vector Blinky_COLOR;
vector Blinky_LIGHT_COLOR;
integer iBlinky_COLOR;
integer iBlinky_LIGHT;
vector USED_Blinky_COLOR;
integer iBlinkyOveride;
vector USED_Blinky_LIGHT_COLOR;

float PilotLight_LIGHT_INTENSITY=1;
float PilotLight_LIGHT_RADIUS=0.1;
float PilotLight_LIGHT_FALLOFF=0.75;
float PilotLight_ALPHA=1.0;
float PilotLight_GLOW=1.0;
integer PilotLight_LIGHT_BOOLEAN=1;
integer PilotLight_BRIGHT_BOOLEAN=1;
vector PilotLight_COLOR;
vector PilotLight_LIGHT_COLOR;
integer iPilotLight_COLOR;
integer iPilotLight_LIGHT;

integer g_iBlinkyOveride;
integer g_iMood;

integer g_iStyle=2;
integer g_iWearerTypeValue;

string sStr_ddispaly="ddispaly";
string sStr_backbar="backbar";
string sStr_frontd="frontd";
string sStr_light_intensity="light_intensity";
string sStr_light_radius="light_radius";
string sStr_light_falloff="light_falloff";
string sStr_alpha="alpha";
string sStr_glow="glow";
string sStr_light_boolean="light_boolean";
string sStr_bright_boolean="bright_boolean";
string sStr_light_color="light_color";

string sStr_color="color";
string sStr_savecolor="savecolor";

integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="LED";

float GetLSLColor(string sValue){
    float fValue=-1.0;
    if(~llSubStringIndex(sValue,".")){
        fValue=(float)sValue;
        if(0.0<=fValue&&fValue<=1.0){
            return fValue;
        }
    }else{
        integer iValue=(integer)sValue;
        if(0<=iValue&&iValue<=255){
            fValue=fValue/255;
        }
        if(0.0<=fValue&&fValue<=1.0){
            return fValue;
        }
    }
    return -1.0;
}

vector GetColor(integer i){
    vector color=black;
    if(i==1){
        color=red;
    }else
    if(i==2){
        color=orange;
    }else
    if(i==3){
        color=yellow;
    }else
    if(i==4){
        color=green;
    }else
    if(i==5){
        color=cyan;
    }else
    if(i==6){
        color=white;
    }else
    if(i==7){
        color=purple;
    }else
    if(i==8){
        color=grey;
    }else
    if(i==9){
        color=lime;
    }else
    if(i==10){
        color=magenta;
    }
    
    return color;
}

set_plcolor(string sToken, vector color){
    if(llSubStringIndex(sToken,"save")==0){
        PilotLight_COLOR=color;
        iPilotLight_COLOR=1;
        PilotLight_LIGHT_COLOR=color;
        iPilotLight_LIGHT=1;
    }
    
    display_elements_colorset(g_lElementsPilotLight,color,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
    display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,color, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl" );
}

set_lbcolor(string sToken, vector color){
    if(llSubStringIndex(sToken,"save")==0){
        LightBar_COLOR=color;
        iLightBar_COLOR=1;
        LightBar_LIGHT_COLOR=color;
        iLightBar_LIGHT=1;
    }
    
    if(g_iElementsLightBar){
        display_elements_colorset(g_lElementsLightBar,color,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,LightBar_GLOW,"lb");
        display_elements_lightset(g_lElementsLightBar,ALL_SIDES,LightBar_BRIGHT_BOOLEAN,LightBar_LIGHT_BOOLEAN,color, LightBar_LIGHT_INTENSITY, LightBar_LIGHT_RADIUS,LightBar_LIGHT_FALLOFF,"lb" );
    }
}
set_fdcolor(string sToken, vector color){
    if(llSubStringIndex(sToken,"save")==0){
        FrontDisplay_COLOR=color;
        iFrontDisplay_COLOR=1;
        FrontDisplay_LIGHT_COLOR=color;
        iFrontDisplay_LIGHT=1;
    }
    
    if(g_iElementsFrontDisplay){
        display_elements_colorset(g_lElementsFrontDisplay,color,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,FrontDisplay_GLOW,"fd");
        display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FrontDisplay_BRIGHT_BOOLEAN,FrontDisplay_LIGHT_BOOLEAN,color, FrontDisplay_LIGHT_INTENSITY, FrontDisplay_LIGHT_RADIUS,FrontDisplay_LIGHT_FALLOFF,"fd" );
    }
}

set_bcolor(string sToken, vector color){
    USED_Blinky_COLOR=color;    USED_Blinky_LIGHT_COLOR=color;
    if(llSubStringIndex(sToken,"save")==0){
        Blinky_COLOR=color;
        iBlinky_COLOR=1;
        Blinky_LIGHT_COLOR=color;
        iBlinky_LIGHT=1;
    }
}
MoodCommand(integer iNum, string sStr, key kID){
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);
    sStr="";
    string sToken = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));
    integer iLength = llGetListLength(lParams);
    if (iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Led)", kID);
        return;
    }

    if((sValue=="1"||sValue=="0")&&iLength==2){
        if(sToken=="number"){
            g_iElementsDDisplay=(integer)sValue;
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sLedToken+sStr_ddispaly+"="+(string)g_iElementsDDisplay,"");
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sLedToken+sStr_ddispaly+"="+(string)g_iElementsDDisplay,"");    
            
        }
        if(sToken==sStr_frontd){
            g_iElementsFrontDisplay=(integer)sValue;
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sLedToken+sStr_frontd+"="+(string)g_iElementsFrontDisplay,"");
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sLedToken+sStr_frontd+"="+(string)g_iElementsFrontDisplay,"");
        }
        if(sToken==sStr_backbar){
            g_iElementsLightBar=(integer)sValue;
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sLedToken+sStr_backbar+"="+(string)g_iElementsLightBar,"");
            llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sLedToken+sStr_backbar+"="+(string)g_iElementsLightBar,"");
        }
    }else
    if((sToken==sStr_color)||(sToken==sStr_savecolor)||(sToken=="fdcolor")||(sToken=="savefdcolor")||(sToken=="lbcolor")||(sToken=="savelbcolor")||(sToken=="plcolor")||(sToken=="saveplcolor")||(sToken=="bcolor")||(sToken=="savebcolor")){
        integer iOK=0;
        vector color=ZERO_VECTOR;
        if(sValue=="refresh"){
            iOK=1;
        }else{
            if(iLength==2){
                color=GetColor((integer)sValue);
                iOK=1;
            }else
            if(iLength==4){
                string sValue2 = llToLower(llList2String(lParams, 2));
                string sValue3 = llToLower(llList2String(lParams, 3));
                float color_r=GetLSLColor(sValue);float color_g=GetLSLColor(sValue2);float color_b=GetLSLColor(sValue3);
                if(0.0<=color_r&&color_r<=1.0&&0.0<=color_g&&color_g<=1.0&&0.0<=color_b&&color_b<=1.0){
                    string str_Colors="<"+(string)color_r+","+(string)color_g+","+(string)color_b+">";
                    color=(vector)str_Colors;
                    iOK=1;
                }
            }
        }
        
        if(iOK&&sValue=="refresh"){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",setcolor,"+sToken+","+sValue);
            if((sToken==sStr_color)||(sToken=="fdcolor")||(sToken==sStr_savecolor)||(sToken=="savefdcolor")){
                set_fdcolor(sToken,FrontDisplay_COLOR);
            }
            if((sToken==sStr_color)||(sToken=="lbcolor")||(sToken==sStr_savecolor)||(sToken=="savelbcolor")){
                set_lbcolor(sToken,LightBar_COLOR);
            }
            if((sToken==sStr_color)||(sToken=="plcolor")||(sToken==sStr_savecolor)||(sToken=="saveplcolor")){
                set_plcolor(sToken,PilotLight_COLOR);
            }
            if((sToken==sStr_color)||(sToken=="bcolor")||(sToken==sStr_savecolor)||(sToken=="savebcolor")){
                set_bcolor(sToken,Blinky_COLOR);
            }
        }else
        if(iOK){
            llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",setcolor,"+sToken+","+(string)color);
            if((sToken==sStr_color)||(sToken=="fdcolor")||(sToken==sStr_savecolor)||(sToken=="savefdcolor")){
                set_fdcolor(sToken,color);
            }
            if((sToken==sStr_color)||(sToken=="lbcolor")||(sToken==sStr_savecolor)||(sToken=="savelbcolor")){
                set_lbcolor(sToken,color);
            }
            if((sToken==sStr_color)||(sToken=="plcolor")||(sToken==sStr_savecolor)||(sToken=="saveplcolor")){
                set_plcolor(sToken,color);
            }
            if((sToken==sStr_color)||(sToken=="bcolor")||(sToken==sStr_savecolor)||(sToken=="savebcolor")){
                set_bcolor(sToken,color);
            }
        }
        
    }else
    if(sToken=="refresh"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+",refresh");
        USED_Blinky_COLOR=Blinky_COLOR;
        USED_Blinky_LIGHT_COLOR=Blinky_LIGHT_COLOR;
        
        display_elements_colorset(g_lElementsPilotLight,PilotLight_COLOR,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
        display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,PilotLight_LIGHT_COLOR, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl" );
        if(g_iElementsFrontDisplay){
            
            display_elements_colorset(g_lElementsFrontDisplay,FrontDisplay_COLOR,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,FrontDisplay_GLOW,"fd");
            display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FrontDisplay_BRIGHT_BOOLEAN,FrontDisplay_LIGHT_BOOLEAN,FrontDisplay_LIGHT_COLOR, FrontDisplay_LIGHT_INTENSITY, FrontDisplay_LIGHT_RADIUS,FrontDisplay_LIGHT_FALLOFF,"fd" );
        
        }
        if(g_iElementsLightBar){
            
            display_elements_colorset(g_lElementsLightBar,LightBar_COLOR,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,LightBar_GLOW,"lb");
            display_elements_lightset(g_lElementsLightBar,ALL_SIDES,LightBar_BRIGHT_BOOLEAN,LightBar_LIGHT_BOOLEAN,LightBar_LIGHT_COLOR, LightBar_LIGHT_INTENSITY, LightBar_LIGHT_RADIUS,LightBar_LIGHT_FALLOFF,"lb" );
            
        }
       
       
    }else
    if(sToken=="reset"){
        
        Blinky_COLOR=COLOR_SET;
        LightBar_COLOR=COLOR_SET;
        FrontDisplay_COLOR=COLOR_SET;
        PilotLight_COLOR=COLOR_SET_LOCK;
        USED_Blinky_COLOR=COLOR_SET;

        Blinky_LIGHT_COLOR=COLOR_SET;
        LightBar_LIGHT_COLOR=COLOR_SET;
        FrontDisplay_LIGHT_COLOR=COLOR_SET;
        PilotLight_LIGHT_COLOR=COLOR_SET_LOCK;
        USED_Blinky_LIGHT_COLOR=COLOR_SET;
        
        iBlinky_COLOR=0;
        iLightBar_COLOR=0;
        iFrontDisplay_COLOR=0;
        iPilotLight_COLOR=0;
        
        iBlinky_LIGHT=0;
        iLightBar_LIGHT=0;
        iFrontDisplay_LIGHT=0;
        iPilotLight_LIGHT=0;
        
        iBlinkyOveride=0;
 
        display_elements_colorset(g_lElementsPilotLight,COLOR_SET_LOCK,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
        display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,COLOR_SET_LOCK, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl" );
        if(g_iElementsLightBar){
            display_elements_colorset(g_lElementsLightBar,COLOR_SET,ALL_SIDES,LightBar_ALPHA,ALL_SIDES,LightBar_GLOW,"lb");
            display_elements_lightset(g_lElementsLightBar,ALL_SIDES,LightBar_BRIGHT_BOOLEAN,LightBar_LIGHT_BOOLEAN,COLOR_SET, LightBar_LIGHT_INTENSITY, LightBar_LIGHT_RADIUS,LightBar_LIGHT_FALLOFF,"lb" );
        }
        if(g_iElementsFrontDisplay){
            display_elements_colorset(g_lElementsFrontDisplay,COLOR_SET,ALL_SIDES,FrontDisplay_ALPHA,ALL_SIDES,FrontDisplay_GLOW,"fd");
            display_elements_lightset(g_lElementsFrontDisplay,ALL_SIDES,FrontDisplay_BRIGHT_BOOLEAN,FrontDisplay_LIGHT_BOOLEAN,COLOR_SET, FrontDisplay_LIGHT_INTENSITY, FrontDisplay_LIGHT_RADIUS,FrontDisplay_LIGHT_FALLOFF,"fd" );
        }
    }else
    if(sToken=="resetv"){
        black =  <0, 0, 0>;
        red =    <1, 0, 0>;
        orange = <1, 0.5, 0>;
        yellow = <1, 1, 0>;
        green =  <0, 1, 0>;
        cyan =   <0, 1, 1>; 
        white =  <1, 1, 1>;
        purple=<0.5, 0.0, 1.0>; 
        grey=<0.5, 0.5, 05>;
        lime=<0.004, 1.000, 0.439>;

        FrontDisplay_LIGHT_INTENSITY=0.0;
        FrontDisplay_LIGHT_RADIUS=0.0;
        FrontDisplay_LIGHT_FALLOFF=0.0;
        FrontDisplay_ALPHA=1.0;
        FrontDisplay_GLOW=0.5;
        FrontDisplay_LIGHT_BOOLEAN=0;
        FrontDisplay_BRIGHT_BOOLEAN=1;

        LightBar_LIGHT_INTENSITY=1;
        LightBar_LIGHT_RADIUS=0.1;
        LightBar_LIGHT_FALLOFF=0.75;
        LightBar_ALPHA=1.0;
        LightBar_GLOW=1.0;
        LightBar_LIGHT_BOOLEAN=1;
        LightBar_BRIGHT_BOOLEAN=1;

        Blinky_LIGHT_INTENSITY=0.0;
        Blinky_LIGHT_RADIUS=0.0;
        Blinky_LIGHT_FALLOFF=0.0;
        Blinky_ALPHA=1.0;
        Blinky_GLOW=1.0;
        Blinky_LIGHT_BOOLEAN=0;
        Blinky_BRIGHT_BOOLEAN=1;

        PilotLight_LIGHT_INTENSITY=1;
        PilotLight_LIGHT_RADIUS=0.1;
        PilotLight_LIGHT_FALLOFF=0.75;
        PilotLight_ALPHA=1.0;
        PilotLight_GLOW=1.0;
        PilotLight_LIGHT_BOOLEAN=1;
        PilotLight_BRIGHT_BOOLEAN=1;
    }else 
    if(sToken=="save"){
        llMessageLinked(LINK_SET,CMD_OWNER,"inmatedisplay save",g_kWearer);
        iBlinky_COLOR=1;
        iLightBar_COLOR=1;
        iFrontDisplay_COLOR=1;
        iPilotLight_COLOR=1;
        
        iBlinky_LIGHT=1;
        iLightBar_LIGHT=1;
        iFrontDisplay_LIGHT=1;
        iPilotLight_LIGHT=1;
        list tmp=[];
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        FrontDisplay_COLOR=llList2Vector(tmp, 0);   FrontDisplay_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        FrontDisplay_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        FrontDisplay_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsFrontDisplay, 0),[PRIM_POINT_LIGHT]); 
        FrontDisplay_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        FrontDisplay_LIGHT_COLOR=llList2Vector(tmp, 1); 
        FrontDisplay_LIGHT_INTENSITY=llList2Float(tmp, 2);
        FrontDisplay_LIGHT_RADIUS=llList2Float(tmp, 3);
        FrontDisplay_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        LightBar_COLOR=llList2Vector(tmp, 0);   LightBar_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        LightBar_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        LightBar_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsLightBar, 0),[PRIM_POINT_LIGHT]); 
        LightBar_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        LightBar_LIGHT_COLOR=llList2Vector(tmp, 1); 
        LightBar_LIGHT_INTENSITY=llList2Float(tmp, 2);
        LightBar_LIGHT_RADIUS=llList2Float(tmp, 3);
        LightBar_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        Blinky_COLOR=llList2Vector(tmp, 0);   Blinky_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        Blinky_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        Blinky_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsBlinky, 0),[PRIM_POINT_LIGHT]); 
        Blinky_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        Blinky_LIGHT_COLOR=llList2Vector(tmp, 1); 
        Blinky_LIGHT_INTENSITY=llList2Float(tmp, 2);
        Blinky_LIGHT_RADIUS=llList2Float(tmp, 3);
        Blinky_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[ PRIM_COLOR, ALL_SIDES ] );    
        PilotLight_COLOR=llList2Vector(tmp, 0);  PilotLight_ALPHA=llList2Float(tmp, 1);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[PRIM_GLOW, ALL_SIDES  ] ); 
        PilotLight_GLOW=llList2Float(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[PRIM_FULLBRIGHT, ALL_SIDES]);
        PilotLight_BRIGHT_BOOLEAN=llList2Integer(tmp, 0);
        tmp=llGetLinkPrimitiveParams( llList2Integer(g_lElementsPilotLight, 0),[PRIM_POINT_LIGHT]); 
        PilotLight_LIGHT_BOOLEAN=llList2Integer(tmp, 0);
        PilotLight_LIGHT_COLOR=llList2Vector(tmp, 1); 
        PilotLight_LIGHT_INTENSITY=llList2Float(tmp, 2);
        PilotLight_LIGHT_RADIUS=llList2Float(tmp, 3);
        PilotLight_LIGHT_FALLOFF=llList2Float(tmp, 4);
        
    }
        
        
}

integer roll(){
    integer v = (integer)(llFrand(4.0)+0);
    
    return v;
}


locklight()
{
    vector color=black; 
    if(g_iLocked==FALSE)
    {
        LOCK_MOOD=0;
        color=green;
        COLOR_SET_LOCK=color;  
    }
    else if(g_iLocked==TRUE)
    {
        LOCK_MOOD=1;
        color=red;
        COLOR_SET_LOCK=color;
    }
    
    if(PilotLight_COLOR==COLOR_SET_LOCK){
        iPilotLight_COLOR=0;
        iPilotLight_LIGHT=0;
    }
    if(iPilotLight_COLOR==0){
        PilotLight_COLOR=color;
    }
    if(iPilotLight_LIGHT==0){
        PilotLight_LIGHT_COLOR=color;
    }
    
    display_elements_colorset(g_lElementsPilotLight,PilotLight_COLOR,ALL_SIDES,PilotLight_ALPHA,ALL_SIDES,PilotLight_GLOW,"pl");
    display_elements_lightset(g_lElementsPilotLight,ALL_SIDES,PilotLight_BRIGHT_BOOLEAN,PilotLight_LIGHT_BOOLEAN,PilotLight_LIGHT_COLOR, PilotLight_LIGHT_INTENSITY, PilotLight_LIGHT_RADIUS,PilotLight_LIGHT_FALLOFF,"pl");
}
vector inmate_type(){
    
    if(g_iWearerTypeValue==1){
        return orange;
    }else
    if(g_iWearerTypeValue==2){
         return cyan;
    }else
    if(g_iWearerTypeValue==3){
         return green;
    }else
    if(g_iWearerTypeValue==4){
         return magenta;
    }else
    if(g_iWearerTypeValue==5){
         return white;
    }else
    if(g_iWearerTypeValue==6){
         return red;
    }else{
        return orange;
    }
}
initialize() {
    g_kWearer = llGetOwner();
    g_iBlinkyOveride=0;
    llMessageLinked(LINK_SET, LM_SETTING_REQUEST, g_sGlobalToken+"locked", "");
}
display_elements_lightset(list ELEMENTS, integer BRIGHT_SIDES, integer BRIGHT_BOOLEAN, integer LIGHT_BOOLEAN, vector LIGHT_COLOR, float LIGHT_INTENSITY, float LIGHT_RADIUS, float LIGHT_FALLOFF,string sName){

    
    integer index=0;
    while (index < llGetListLength(ELEMENTS))
    {
        integer link=llList2Integer(ELEMENTS, index);

        llSetLinkPrimitiveParamsFast( link,[
                PRIM_FULLBRIGHT, BRIGHT_SIDES, BRIGHT_BOOLEAN,
                PRIM_POINT_LIGHT, LIGHT_BOOLEAN, LIGHT_COLOR, LIGHT_INTENSITY, LIGHT_RADIUS, LIGHT_FALLOFF] );
        ++index;
    }
}
display_elements_colorset(list ELEMENTS, vector COLOR, integer COLOR_SIDE,float COLOR_ALPHA, integer GLOW_SIDE, float GLOW_ITENSITY,string sName ){

    integer index=0;
    while (index < llGetListLength(ELEMENTS))
    {
        integer link=llList2Integer(ELEMENTS, index);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_COLOR, COLOR_SIDE, COLOR,COLOR_ALPHA]);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_GLOW,GLOW_SIDE, GLOW_ITENSITY] );
        ++index;
    }
}
display_element_lightset(list ELEMENTS, integer index,integer BRIGHT_SIDES, integer BRIGHT_BOOLEAN, integer LIGHT_BOOLEAN, vector LIGHT_COLOR, float LIGHT_INTENSITY, float LIGHT_RADIUS, float LIGHT_FALLOFF,string sName ){

    if(index < llGetListLength(ELEMENTS)&&index>=0)
    {
        integer link=llList2Integer(ELEMENTS, index);

        llSetLinkPrimitiveParamsFast( link,[
                PRIM_FULLBRIGHT, BRIGHT_SIDES, BRIGHT_BOOLEAN,
                PRIM_POINT_LIGHT, LIGHT_BOOLEAN, LIGHT_COLOR, LIGHT_INTENSITY, LIGHT_RADIUS, LIGHT_FALLOFF] );
    }
}
display_element_colorset(list ELEMENTS, integer index,vector COLOR, integer COLOR_SIDE,float COLOR_ALPHA, integer GLOW_SIDE, float GLOW_ITENSITY,string sName ){

    if(index < llGetListLength(ELEMENTS)&&index>=0)
    {
        integer link=llList2Integer(ELEMENTS, index);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_COLOR, COLOR_SIDE, COLOR,COLOR_ALPHA]);
        llSetLinkPrimitiveParamsFast( link,[ PRIM_GLOW,GLOW_SIDE, GLOW_ITENSITY] );
    }
}

blinky_effect(integer m){
    integer i=0;
    if(g_iMood==0){
         llSetTimerEvent(0.0);
         m=0;
    }
    
    if(m==0&&g_iBlinkyOveride==0){
        while (i < llGetListLength(g_lElementsBlinky))
        {
            display_element_colorset(g_lElementsBlinky,i,black,ALL_SIDES,Blinky_ALPHA,ALL_SIDES,0.0,"b");
            display_element_lightset(g_lElementsBlinky,i,ALL_SIDES,FALSE,FALSE,black, 0,0,0,"b");
            g_lElementsBlinky_Set=llListReplaceList(g_lElementsBlinky_Set, [0], i, i);    
            ++i;
        }    
    }
    else if(m==1&&g_iBlinkyOveride==0){
        i=roll();
        if(i<llGetListLength(g_lElementsBlinky)&&i>-1)
        {
            if(llList2Integer(g_lElementsBlinky_Set, i)==1)
            {
                display_element_colorset(g_lElementsBlinky,i,black,ALL_SIDES,Blinky_