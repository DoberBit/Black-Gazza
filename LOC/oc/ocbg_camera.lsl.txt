//start_unprocessed_text
/*/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/
/|/                                                                          /|/
/|/              ____                   ______      ____                     /|/
/|/             / __ \____  ___  ____  / ____/___  / / /___ ______           /|/
/|/            / / / / __ \/ _ \/ __ \/ /   / __ \/ / / __ `/ ___/           /|/
/|/           / /_/ / /_/ /  __/ / / / /___/ /_/ / / / /_/ / /               /|/
/|/           \____/ .___/\___/_/ /_/\____/\____/_/_/\__,_/_/                /|/
/|/               /_/                                                        /|/
/|/                                                                          /|/
/|/                        ,^~~~-.         .-~~~"-.                          /|/
/|/                       :  .--. \       /  .--.  \                         /|/
/|/                       : (    .-`<^~~~-: :    )  :                        /|/
/|/                       `. `-,~            ^- '  .'                        /|/
/|/                         `-:                ,.-~                          /|/
/|/                          .'                  `.                          /|/
/|/                         ,'   @   @            |                          /|/
/|/                         :    __               ;                          /|/
/|/                      ...{   (__)          ,----.                         /|/
/|/                     /   `.              ,' ,--. `.                       /|/
/|/                    |      `.,___   ,      :    : :                       /|/
/|/                    |     .'    ~~~~       \    / :                       /|/
/|/                     \.. /               `. `--' .'                       /|/
/|/                        |                  ~----~                         /|/
/|/                           Camera - 160207.1                              /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  Copyright (c) 2011 - 2016 Nandana Singh, Wendy Starfall, Medea Destiny, /|/
/|/  littlemousy, Romka Swallowtail, Garvin Twine et al.                     /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script is free software: you can redistribute it and/or modify     /|/
/|/  it under the terms of the GNU General Public License as published       /|/
/|/  by the Free Software Foundation, version 2.                             /|/
/|/                                                                          /|/
/|/  This script is distributed in the hope that it will be useful,          /|/
/|/  but WITHOUT ANY WARRANTY; without even the implied warranty of          /|/
/|/  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            /|/
/|/  GNU General Public License for more details.                            /|/
/|/                                                                          /|/
/|/  You should have received a copy of the GNU General Public License       /|/
/|/  along with this script; if not, see www.gnu.org/licenses/gpl-2.0        /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script and any derivatives based on it must remain "full perms".   /|/
/|/                                                                          /|/
/|/  "Full perms" means maintaining MODIFY, COPY, and TRANSFER permissions   /|/
/|/  in Second Life(R), OpenSimulator and the Metaverse.                     /|/
/|/                                                                          /|/
/|/  If these platforms should allow more fine-grained permissions in the    /|/
/|/  future, then "full perms" will mean the most permissive possible set    /|/
/|/  of permissions allowed by the platform.                                 /|/
/|/ ------------------------------------------------------------------------ /|/
/|/         github.com/OpenCollar/opencollar/tree/master/src/spares          /|/
/|/ ------------------------------------------------------------------------ /|/
/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/

string g_sAppVersion = "¹⁶⁰²⁰⁷⋅¹";
integer SPECIAL_NOTIFY = 1005;
integer SPECIAL_SAY = 1007;
key g_kWearer;
string g_sSubMenu = "Camera";
string g_sParentMenu = "Apps";
key g_kMenuID;
string g_sCurrentMode = "default";
float g_fReapeat = 0.5;

/|/these 4 are used for syncing dom to us by broadcasting cam pos/rot
integer g_iSync2Me;/|/TRUE if we're currently dumping cam pos/rot iChanges to chat so the owner can sync to us
vector g_vCamPos;
rotation g_rCamRot;
integer g_iBroadChan;
key g_kBroadRcpt;

string g_sJsonModes;

/|/MESSAGE MAP
/|/integer CMD_ZERO = 0;
integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
integer CMD_EVERYONE = 504;
/|/integer CMD_RLV_RELAY = 507;
integer CMD_SAFEWORD = 510;  /|/ new for safeword

integer NOTIFY = 1002;
/|/integer SAY = 1004;
integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_RLV = 4;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;/|/scripts send messages on this channel to have settings saved to settings store
                            /|/str must be in form of "token=value"
/|/integer LM_SETTING_REQUEST = 2001;/|/when startup, scripts send requests for settings on this channel
integer LM_SETTING_RESPONSE = 2002;/|/the settings script will send responses on this channel
integer LM_SETTING_DELETE = 2003;/|/delete token from store
/|/integer LM_SETTING_EMPTY = 2004;/|/sent when a token has no value in the settings store

integer MENUNAME_REQUEST = 3000;
integer MENUNAME_RESPONSE = 3001;
integer MENUNAME_REMOVE = 3003;

integer RLV_CMD = 6000;
integer RLV_CLEAR = 6002;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

list g_lMenuIDs;  /|/menu information
integer g_iMenuStride=3;

string UPMENU = "BACK";

string g_sCameraToken = "camera_";
string g_sGlobalToken = "global_";
integer g_iMood;

/|*
integer g_iProfiled=1;
Debug(string sStr) {
    /|/if you delete the first /|/ from the preceeding and following  lines,
    /|/  profiling is off, debug is off, and the compiler will remind you to 
    /|/  remove the debug calls from the code, we're back to production mode
    if (!g_iProfiled){
        g_iProfiled=1;
        llScriptProfiler(1);
    }
    llOwnerSay(llGetScriptName() + "(min free:"+(string)(llGetMemoryLimit()-llGetSPMaxMemory())+")["+(string)llGetFreeMemory()+"] :\n" + sStr);
}
*|/

/|/changed the mode handles to a Json object with json arrays, one issue remains:
/|/vectors get converted into strings and need to be reconverted to vectors. 
/|/For this to work easiest seems to just put for any mode which contains a vector,
/|/the vector as last entry (if there shall be a mode which contains 2 vectors, 
/|/this needs to be addressed and handles as excetion in the list lJsonModes function

string JsonModes() {
    string sDefault =   llList2Json(JSON_ARRAY, [CAMERA_ACTIVE,FALSE]);
    string sHuman =     llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_BEHINDNESS_ANGLE,0.0,
                                                CAMERA_BEHINDNESS_LAG,0.0,
                                                CAMERA_DISTANCE,2.5,
                                                CAMERA_FOCUS_LAG,0.05,
                                                CAMERA_POSITION_LOCKED,FALSE,
                                                CAMERA_FOCUS_THRESHOLD,0.0,
                                                CAMERA_PITCH,20.0,
                                                CAMERA_POSITION_LAG,0.0,
                                                CAMERA_POSITION_THRESHOLD,0.0,
                                                CAMERA_FOCUS_OFFSET,<0.0, 0.0, 0.35>]);
    string s1stperson = llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE, 0.5,
                                                CAMERA_FOCUS_OFFSET, <2.5,0,1.0>]);
    string sAss =       llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE,0.5]);
    string sFar =       llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE,10.0]);
    string sGod =       llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE,10.0,
                                                CAMERA_PITCH,80.0]);
    string sGround =    llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_PITCH,-15.0]);
    string sWorm =      llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_PITCH,-15.0,
                                                CAMERA_FOCUS_OFFSET, <0.0,0.0,-0.75>]);
                                            
    return llList2Json(JSON_OBJECT,["default",sDefault,"human", sHuman, "1stperson",s1stperson,"ass",sAss,"far",sFar,"god",sGod,"ground",sGround,"worm",sWorm]);

}

integer iAccess=1;
string g_sAuthToken = "auth_";
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess==3){
        return TRUE;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Camera)", kCmdGiver);
    return FALSE;
}

string NameURI(key kID){
     return "%NAME@"+(string)kID+"@NAME%";
}

list lJsonModes(string sMode) {
    string sJsonTmp = llJsonGetValue(g_sJsonModes, [sMode]);
    list lTest = llJson2List(sJsonTmp);
    integer index = llGetListLength(lTest)-1;
    /|/last entry is checked if it is a vector to be converted from string to vector here:
    if ((vector)llList2String(lTest,index)) lTest = llListReplaceList(lTest,[(vector)llList2String(lTest,index)],index,index);
    return lTest;
}

Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [kID]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kID, kMenuID, sName];
} 

CamMode(string sMode) {
    llClearCameraParams();
    llSetCameraParams(lJsonModes(sMode));
}

ClearCam() {
    if (llGetPermissions()&PERMISSION_CONTROL_CAMERA) llClearCameraParams();
    g_iSync2Me = FALSE;
    g_sCurrentMode = "default";
    llMessageLinked(LINK_RLV, RLV_CMD, "camunlock=y", "camera");
    llMessageLinked(LINK_RLV, RLV_CMD, "camdistmax:0=y", "camera");
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sCameraToken + "all", "");
}

CamFocus(vector g_vCamPos, rotation g_rCamRot) {
    vector vStartPose = llGetCameraPos();    
    rotation rStartRot = llGetCameraRot();
    float fSteps = 8.0;
    /|/Keep fSteps a float, but make sure its rounded off to the nearest 1.0
    fSteps = (float)llRound(fSteps);
    /|/Calculate camera position increments
    vector vPosStep = (g_vCamPos - vStartPose) / fSteps;
    /|/Calculate camera rotation increments
    /|/rotation rStep = (g_rCamRot - rStartRot);
    /|/rStep = <rStep.x / fSteps, rStep.y / fSteps, rStep.z / fSteps, rStep.s / fSteps>;
    float fCurrentStep = 0.0; /|/Loop through motion for fCurrentStep = current step, while fCurrentStep <= Total steps
    for(; fCurrentStep <= fSteps; ++fCurrentStep) {
        /|/Set next position in tween
        vector vNextPos = vStartPose + (vPosStep * fCurrentStep);
        rotation rNextRot = Slerp( rStartRot, g_rCamRot, fCurrentStep / fSteps);
         /|/Set camera parameters
        llSetCameraParams([
            CAMERA_ACTIVE, 1, /|/1 is active, 0 is inactive
            CAMERA_BEHINDNESS_ANGLE, 0.0, /|/(0 to 180) degrees
            CAMERA_BEHINDNESS_LAG, 0.0, /|/(0 to 3) seconds
            CAMERA_DISTANCE, 0.0, /|/(0.5 to 10) meters
            CAMERA_FOCUS, vNextPos + llRot2Fwd(rNextRot), /|/Region-relative position
            CAMERA_FOCUS_LAG, 0.0 , /|/(0 to 3) seconds
            CAMERA_FOCUS_LOCKED, TRUE, /|/(TRUE or FALSE)
            CAMERA_FOCUS_THRESHOLD, 0.0, /|/(0 to 4) meters
            CAMERA_POSITION, vNextPos, /|/Region-relative position
            CAMERA_POSITION_LAG, 0.0, /|/(0 to 3) seconds
            CAMERA_POSITION_LOCKED, TRUE, /|/(TRUE or FALSE)
            CAMERA_POSITION_THRESHOLD, 0.0, /|/(0 to 4) meters
            CAMERA_FOCUS_OFFSET, ZERO_VECTOR /|/<-10,-10,-10> to <10,10,10> meters
        ]);
    }
   /|/ Debug("Focus set");
}
 
rotation Slerp( rotation a, rotation b, float f ) {
    float fAngleBetween = llAngleBetween(a, b);
    if ( fAngleBetween > PI )
        fAngleBetween = fAngleBetween - TWO_PI;
    return a*llAxisAngle2Rot(llRot2Axis(b/a)*a, fAngleBetween*f);
}/|/Written by Francis Chung, Taken from http:/|/forums.secondlife.com/showthread.php?p=536622

LockCam() {
    llSetCameraParams([
        CAMERA_ACTIVE, TRUE,
        CAMERA_POSITION_LOCKED, TRUE
    ]);
    llMessageLinked(LINK_RLV, RLV_CMD, "camunlock=n", "camera");
}
string sStr_WEARERNAMES="%WEARERNAMES%";
CamMenu(key kID, integer iAuth) {
    /|/string sPrompt = "\n[http:/|/www.opencollar.at/camera.html Camera (unsupported)]\t"+g_sAppVersion+"\nCurrent camera mode is " + g_sCurrentMode + ".\nwww.opencollar.at/camera\nNOTE: Full functionality only on RLV API v2.9 and greater.";
    string sPrompt;
    if(g_kWearer==llGetOwnerKey(kID))
    {
        sPrompt="We control even your eyes.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".";
    }else if(iAuth==CMD_OWNER||iAuth==CMD_TRUSTED)
    {
            sPrompt="We control EVERY inmates eyes.Show them who is the boss around here.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".";
    }else if(iAuth==CMD_GROUP)
    {
            sPrompt="We control even "+sStr_WEARERNAMES+"'s eyes.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".\nYour eyes too belongs to Black Gazza.";
    }else
    {
            sPrompt="We control EVERY inmates eyes.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".\n";
    }

    list lButtons = ["CLEAR","FREEZE","MOUSELOOK"];
    integer n;
    integer stop = llGetListLength(llJson2List(g_sJsonModes)); 
    for (n = 0; n < stop; n +=2)
        lButtons += [Capitalize(llList2String(llJson2List(g_sJsonModes),n))];
    if(1<=g_iMood){
        sPrompt+="\n(It's not part of rp for the collar to control the inmate's eyes.)";
    }
    Dialog(kID, sPrompt, lButtons, [UPMENU], 0, iAuth, "camera");
}

string Capitalize(string sIn) {
    return llToUpper(llGetSubString(sIn, 0, 0)) + llGetSubString(sIn, 1, -1);
}

string StrReplace(string sSrc, string sFrom, string sTo) {
/|/replaces all occurrences of 'sFrom' with 'sTo' in 'sSrc'.
    integer iLen = (~-(llStringLength(sFrom)));
    if(~iLen) {
        string  sBuffer = sSrc;
        integer iBufPos = -1;
        integer iToLen = (~-(llStringLength(sTo)));
        @loop;/|/instead of a while loop, saves 5 bytes (and run faster).
        integer iToPos = ~llSubStringIndex(sBuffer, sFrom);
        if(iToPos) {
/|/            iBufPos -= iToPos;
/|/            sSrc = llInsertString(llDeleteSubString(sSrc, iBufPos, iBufPos + iLen), iBufPos, sTo);
/|/            iBufPos += iToLen;
/|/            sBuffer = llGetSubString(sSrc, (-~(iBufPos)), 0x8000);
            sBuffer = llGetSubString(sSrc = llInsertString(llDeleteSubString(sSrc, iBufPos -= iToPos, iBufPos + iLen), iBufPos, sTo), (-~(iBufPos += iToLen)), 0x8000);
            jump loop;
        }
    }
    return sSrc;
}

SaveSetting(string sToken) {
    /|/Debug("last mode: "+g_sCurrentMode);
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sCameraToken + g_sCurrentMode, "");
    g_sCurrentMode = sToken;
    sToken = g_sCameraToken + sToken;
    /|/string sValue = (string)g_iLastNum;
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, sToken + "=1", "");
}

ChatCamParams(integer iChannel, key kID) {
    g_vCamPos = llGetCameraPos();
    g_rCamRot = llGetCameraRot();
    string sPosLine = StrReplace((string)g_vCamPos, " ", "") + " " + StrReplace((string)g_rCamRot, " ", ""); 
    /|/if not channel 0, say to whole region.  else just say locally   
    if (iChannel)
        llRegionSayTo(kID, iChannel, sPosLine);                    
    else
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sPosLine,kID);
}

UserCommand(integer iNum, string sStr, key kID) { /|/ here iNum: auth value, sStr: user command, kID: avatar id
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    string sValue2 = llList2String(lParams, 2);
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(-667571900,"BGVERSION_RESPONSE,camera,17,12,22,113");
    }else
    if (sStr == "menu " + g_sSubMenu){
        if(!CheckCommandAuth(kID, iNum)) return;
        CamMenu(kID, iNum);
    }else if (sCommand == "cam" || sCommand == "camera"){
        if(!CheckCommandAuth(kID, iNum)) return;
        
        if (sValue == ""){/|/they just said *cam.  give menu
            CamMenu(kID, iNum);
        }else if (sValue == "clear") {
            ClearCam();
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Cleared camera settings. "+sStr_WEARERNAMES+" can see normal again.", kID);
        } else if (sValue == "freeze") {
            LockCam();
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Freezing current camera position. As I said "+sStr_WEARERNAMES+", we control everything, even your eyes." , kID);                  
            SaveSetting("freeze");                          
        } else if (sValue == "mouselook") {
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Enforcing mouselook. That will teach you some lesson, "+sStr_WEARERNAMES+".", kID);
            llMessageLinked(LINK_RLV, RLV_CMD, "camdistmax:0=n", "camera");                   
            SaveSetting("mouselook");                          
            /|/Debug("newiNum=" + (string)iNum);
        } else {
            integer iIndex = llSubStringIndex(g_sJsonModes, sValue);/|/llListFindList(g_lModes, [sValue]);
            if (~iIndex) {
                CamMode(sValue);
                llMessageLinked(LINK_RLV, RLV_CMD, "camunlock=n", "camera");
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Set " + sValue + " camera mode.", kID);
                SaveSetting(sValue);
            } else
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Invalid camera mode: " + sValue, kID);
        }
    } else if (sCommand == "camto") {
        if(!CheckCommandAuth(kID, iNum)) return;
        CamFocus((vector)sValue, (rotation)sValue2);              
       
    } else if (sCommand == "camdump") {
        if(!CheckCommandAuth(kID, iNum)) return;
        g_iBroadChan = (integer)sValue;
        integer g_fReapeat = (integer)sValue2;
        ChatCamParams(g_iBroadChan, kID);
        if (g_fReapeat) {
            g_kBroadRcpt = kID;
            g_iSync2Me = TRUE;
            llSetTimerEvent(g_fReapeat);
        }
    }else if ((iNum == CMD_OWNER  || kID == g_kWearer) && sStr == "runaway") {
        ClearCam();
        llResetScript();
    }
   /|/ Debug(sCommand+" executed");
}

default {
    on_rez(integer iNum) {
        llResetScript();
    }    
    
    state_entry() {
       /|/ llSetMemoryLimit(36864);  
        g_kWearer = llGetOwner();
        g_sJsonModes = JsonModes();
        if (llGetAttached()) llRequestPermissions(g_kWearer, PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA);
        /|/Debug("Starting");
    }
    
    run_time_permissions(integer iPerms) {
        if (iPerms & (PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA))
            llClearCameraParams();
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        /|/only respond to owner, secowner, group, wearer
        if (iNum >= CMD_OWNER && iNum <= CMD_EVERYONE) UserCommand(iNum, sStr, kID);
        else if (iNum == CMD_SAFEWORD || iNum == RLV_CLEAR) {
            ClearCam();
            llResetScript();
        } else if (iNum == MENUNAME_REQUEST && sStr == g_sParentMenu)
            llMessageLinked(iSender, MENUNAME_RESPONSE, g_sParentMenu + "|" + g_sSubMenu, "");
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["=", ","], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            integer i = llSubStringIndex(sToken, "_");
            
            if(llGetSubString(sToken, 0, i) == g_sGlobalToken){
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken=="moodvalue"){
                    g_iMood = (integer)sValue;
                }
            }else
            if(llGetSubString(sToken, 0, i) == g_sAuthToken){
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "iaccess") iAccess = (integer)sValue;
            }else
            if (llGetSubString(sToken, 0, i) == g_sCameraToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (llGetPermissions() & PERMISSION_CONTROL_CAMERA) {
                    if (sToken == "freeze") LockCam();
                    else if (sToken == "mouselook") llMessageLinked(LINK_RLV, RLV_CMD, "camdistmax:0=n", "camera"); 
                    else if (~llSubStringIndex(g_sJsonModes, sToken)) CamMode(sToken);
                }
            }           
        } else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) { 
                /|/got a menu response meant for us.  pull out values
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAv = (key)llList2String(lMenuParams, 0);          
                string sMessage = llList2String(lMenuParams, 1);                                         
                /|/ integer iPage = (integer)llList2String(lMenuParams, 2); 
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                if (sMenuType == "camera") {
                    if (sMessage == UPMENU)
                        llMessageLinked(LINK_ROOT, iAuth, "menu " + g_sParentMenu, kAv);
                    else {
                        UserCommand(iAuth, "cam " + llToLower(sMessage), kAv);
                        CamMenu(kAv, iAuth);
                    }
                } else if (sMenuType == "rmcamera") {
                   
                }                    
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }
    
    timer() {       
        /|/handle cam pos/rot changes 
        if (g_iSync2Me) {
            vector vNewPos = llGetCameraPos();
            rotation rNewRot = llGetCameraRot();
            if (vNewPos != g_vCamPos || rNewRot != g_rCamRot)
                ChatCamParams(g_iBroadChan,g_kBroadRcpt);
        } else {
            g_kBroadRcpt = "";
            llSetTimerEvent(0.0);
        }
    }
/|*    
    changed(integer iChange) {
        if (iChange & CHANGED_REGION) {
            if (g_iProfiled) {
                llScriptProfiler(1);
                Debug("profiling restarted");
            }
        }
    }*|/
}
*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 12/22/2017 05:15:36
//mono



key g_kWearer;
string g_sSubMenu = "Camera";
string g_sParentMenu = "Apps";
string g_sCurrentMode = "default";
float g_fReapeat = 0.5;


integer g_iSync2Me;
vector g_vCamPos;
rotation g_rCamRot;
integer g_iBroadChan;
key g_kBroadRcpt;

string g_sJsonModes;



integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_EVERYONE = 504;

integer CMD_SAFEWORD = 510;  

integer NOTIFY = 1002;

integer REBOOT = -1000;
integer LINK_DIALOG = 3;
integer LINK_RLV = 4;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;
                            

integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;


integer MENUNAME_REQUEST = 3000;
integer MENUNAME_RESPONSE = 3001;

integer RLV_CMD = 6000;
integer RLV_CLEAR = 6002;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;

list g_lMenuIDs;  
integer g_iMenuStride=3;

string UPMENU = "BACK";

string g_sCameraToken = "camera_";
string g_sGlobalToken = "global_";
integer g_iMood;

integer iAccess=1;
string g_sAuthToken = "auth_";
string sStr_WEARERNAMES="%WEARERNAMES%";
 
rotation Slerp( rotation a, rotation b, float f ) {
    float fAngleBetween = llAngleBetween(a, b);
    if ( fAngleBetween > PI )
        fAngleBetween = fAngleBetween - TWO_PI;
    return a*llAxisAngle2Rot(llRot2Axis(b/a)*a, fAngleBetween*f);
}

SaveSetting(string sToken) {
    
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sCameraToken + g_sCurrentMode, "");
    g_sCurrentMode = sToken;
    sToken = g_sCameraToken + sToken;
    
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, sToken + "=1", "");
}
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess==3){
        return TRUE;
    }
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Camera)", kCmdGiver);
    return FALSE;
}

CamFocus(vector g_vCamPos, rotation g_rCamRot) {
    vector vStartPose = llGetCameraPos();    
    rotation rStartRot = llGetCameraRot();
    float fSteps = 8.0;
    
    fSteps = (float)llRound(fSteps);
    
    vector vPosStep = (g_vCamPos - vStartPose) / fSteps;
    
    
    
    float fCurrentStep = 0.0; 
    for(; fCurrentStep <= fSteps; ++fCurrentStep) {
        
        vector vNextPos = vStartPose + (vPosStep * fCurrentStep);
        rotation rNextRot = Slerp( rStartRot, g_rCamRot, fCurrentStep / fSteps);
         
        llSetCameraParams([
            CAMERA_ACTIVE, 1, 
            CAMERA_BEHINDNESS_ANGLE, 0.0, 
            CAMERA_BEHINDNESS_LAG, 0.0, 
            CAMERA_DISTANCE, 0.0, 
            CAMERA_FOCUS, vNextPos + llRot2Fwd(rNextRot), 
            CAMERA_FOCUS_LAG, 0.0 , 
            CAMERA_FOCUS_LOCKED, TRUE, 
            CAMERA_FOCUS_THRESHOLD, 0.0, 
            CAMERA_POSITION, vNextPos, 
            CAMERA_POSITION_LAG, 0.0, 
            CAMERA_POSITION_LOCKED, TRUE, 
            CAMERA_POSITION_THRESHOLD, 0.0, 
            CAMERA_FOCUS_OFFSET, ZERO_VECTOR 
        ]);
    }
   
}

list lJsonModes(string sMode) {
    string sJsonTmp = llJsonGetValue(g_sJsonModes, [sMode]);
    list lTest = llJson2List(sJsonTmp);
    integer index = llGetListLength(lTest)-1;
    
    if ((vector)llList2String(lTest,index)) lTest = llListReplaceList(lTest,[(vector)llList2String(lTest,index)],index,index);
    return lTest;
}

UserCommand(integer iNum, string sStr, key kID) { 
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    string sValue2 = llList2String(lParams, 2);
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(-667571900,"BGVERSION_RESPONSE,camera,17,12,22,113");
    }else
    if (sStr == "menu " + g_sSubMenu){
        if(!CheckCommandAuth(kID, iNum)) return;
        CamMenu(kID, iNum);
    }else if (sCommand == "cam" || sCommand == "camera"){
        if(!CheckCommandAuth(kID, iNum)) return;
        
        if (sValue == ""){
            CamMenu(kID, iNum);
        }else if (sValue == "clear") {
            ClearCam();
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Cleared camera settings. "+sStr_WEARERNAMES+" can see normal again.", kID);
        } else if (sValue == "freeze") {
            LockCam();
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Freezing current camera position. As I said "+sStr_WEARERNAMES+", we control everything, even your eyes." , kID);                  
            SaveSetting("freeze");                          
        } else if (sValue == "mouselook") {
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Enforcing mouselook. That will teach you some lesson, "+sStr_WEARERNAMES+".", kID);
            llMessageLinked(LINK_RLV, RLV_CMD, "camdistmax:0=n", "camera");                   
            SaveSetting("mouselook");                          
            
        } else {
            integer iIndex = llSubStringIndex(g_sJsonModes, sValue);
            if (~iIndex) {
                CamMode(sValue);
                llMessageLinked(LINK_RLV, RLV_CMD, "camunlock=n", "camera");
                llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Set " + sValue + " camera mode.", kID);
                SaveSetting(sValue);
            } else
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Invalid camera mode: " + sValue, kID);
        }
    } else if (sCommand == "camto") {
        if(!CheckCommandAuth(kID, iNum)) return;
        CamFocus((vector)sValue, (rotation)sValue2);              
       
    } else if (sCommand == "camdump") {
        if(!CheckCommandAuth(kID, iNum)) return;
        g_iBroadChan = (integer)sValue;
        integer g_fReapeat = (integer)sValue2;
        ChatCamParams(g_iBroadChan, kID);
        if (g_fReapeat) {
            g_kBroadRcpt = kID;
            g_iSync2Me = TRUE;
            llSetTimerEvent(g_fReapeat);
        }
    }else if ((iNum == CMD_OWNER  || kID == g_kWearer) && sStr == "runaway") {
        ClearCam();
        llResetScript();
    }
   
}

string StrReplace(string sSrc, string sFrom, string sTo) {

    integer iLen = (~-(llStringLength(sFrom)));
    if(~iLen) {
        string  sBuffer = sSrc;
        integer iBufPos = -1;
        integer iToLen = (~-(llStringLength(sTo)));
        @loop;
        integer iToPos = ~llSubStringIndex(sBuffer, sFrom);
        if(iToPos) {




            sBuffer = llGetSubString(sSrc = llInsertString(llDeleteSubString(sSrc, iBufPos -= iToPos, iBufPos + iLen), iBufPos, sTo), (-~(iBufPos += iToLen)), 0x8000);
            jump loop;
        }
    }
    return sSrc;
}

LockCam() {
    llSetCameraParams([
        CAMERA_ACTIVE, TRUE,
        CAMERA_POSITION_LOCKED, TRUE
    ]);
    llMessageLinked(LINK_RLV, RLV_CMD, "camunlock=n", "camera");
}










string JsonModes() {
    string sDefault =   llList2Json(JSON_ARRAY, [CAMERA_ACTIVE,FALSE]);
    string sHuman =     llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_BEHINDNESS_ANGLE,0.0,
                                                CAMERA_BEHINDNESS_LAG,0.0,
                                                CAMERA_DISTANCE,2.5,
                                                CAMERA_FOCUS_LAG,0.05,
                                                CAMERA_POSITION_LOCKED,FALSE,
                                                CAMERA_FOCUS_THRESHOLD,0.0,
                                                CAMERA_PITCH,20.0,
                                                CAMERA_POSITION_LAG,0.0,
                                                CAMERA_POSITION_THRESHOLD,0.0,
                                                CAMERA_FOCUS_OFFSET,<0.0, 0.0, 0.35>]);
    string s1stperson = llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE, 0.5,
                                                CAMERA_FOCUS_OFFSET, <2.5,0,1.0>]);
    string sAss =       llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE,0.5]);
    string sFar =       llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE,10.0]);
    string sGod =       llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_DISTANCE,10.0,
                                                CAMERA_PITCH,80.0]);
    string sGround =    llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_PITCH,-15.0]);
    string sWorm =      llList2Json(JSON_ARRAY,[CAMERA_ACTIVE,TRUE,
                                                CAMERA_PITCH,-15.0,
                                                CAMERA_FOCUS_OFFSET, <0.0,0.0,-0.75>]);
                                            
    return llList2Json(JSON_OBJECT,["default",sDefault,"human", sHuman, "1stperson",s1stperson,"ass",sAss,"far",sFar,"god",sGod,"ground",sGround,"worm",sWorm]);

}

Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [kID]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kID, kMenuID, sName];
}

ClearCam() {
    if (llGetPermissions()&PERMISSION_CONTROL_CAMERA) llClearCameraParams();
    g_iSync2Me = FALSE;
    g_sCurrentMode = "default";
    llMessageLinked(LINK_RLV, RLV_CMD, "camunlock=y", "camera");
    llMessageLinked(LINK_RLV, RLV_CMD, "camdistmax:0=y", "camera");
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sCameraToken + "all", "");
}

ChatCamParams(integer iChannel, key kID) {
    g_vCamPos = llGetCameraPos();
    g_rCamRot = llGetCameraRot();
    string sPosLine = StrReplace((string)g_vCamPos, " ", "") + " " + StrReplace((string)g_rCamRot, " ", ""); 
    
    if (iChannel)
        llRegionSayTo(kID, iChannel, sPosLine);                    
    else
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+sPosLine,kID);
}

string Capitalize(string sIn) {
    return llToUpper(llGetSubString(sIn, 0, 0)) + llGetSubString(sIn, 1, -1);
} 

CamMode(string sMode) {
    llClearCameraParams();
    llSetCameraParams(lJsonModes(sMode));
}
CamMenu(key kID, integer iAuth) {
    
    string sPrompt;
    if(g_kWearer==llGetOwnerKey(kID))
    {
        sPrompt="We control even your eyes.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".";
    }else if(iAuth==CMD_OWNER||iAuth==CMD_TRUSTED)
    {
            sPrompt="We control EVERY inmates eyes.Show them who is the boss around here.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".";
    }else if(iAuth==CMD_GROUP)
    {
            sPrompt="We control even "+sStr_WEARERNAMES+"'s eyes.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".\nYour eyes too belongs to Black Gazza.";
    }else
    {
            sPrompt="We control EVERY inmates eyes.\nCurrent camera mode for "+sStr_WEARERNAMES+" is "+ g_sCurrentMode + ".\n";
    }

    list lButtons = ["CLEAR","FREEZE","MOUSELOOK"];
    integer n;
    integer stop = llGetListLength(llJson2List(g_sJsonModes)); 
    for (n = 0; n < stop; n +=2)
        lButtons += [Capitalize(llList2String(llJson2List(g_sJsonModes),n))];
    if(1<=g_iMood){
        sPrompt+="\n(It's not part of rp for the collar to control the inmate's eyes.)";
    }
    Dialog(kID, sPrompt, lButtons, [UPMENU], 0, iAuth, "camera");
}

default {
    on_rez(integer iNum) {
        llResetScript();
    }    
    
    state_entry() {
       
        g_kWearer = llGetOwner();
        g_sJsonModes = JsonModes();
        if (llGetAttached()) llRequestPermissions(g_kWearer, PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA);
        
    }
    
    run_time_permissions(integer iPerms) {
        if (iPerms & (PERMISSION_CONTROL_CAMERA | PERMISSION_TRACK_CAMERA))
            llClearCameraParams();
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        
        if (iNum >= CMD_OWNER && iNum <= CMD_EVERYONE) UserCommand(iNum, sStr, kID);
        else if (iNum == CMD_SAFEWORD || iNum == RLV_CLEAR) {
            ClearCam();
            llResetScript();
        } else if (iNum == MENUNAME_REQUEST && sStr == g_sParentMenu)
            llMessageLinked(iSender, MENUNAME_RESPONSE, g_sParentMenu + "|" + g_sSubMenu, "");
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["=", ","], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            integer i = llSubStringIndex(sToken, "_");
            
            if(llGetSubString(sToken, 0, i) == g_sGlobalToken){
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken=="moodvalue"){
                    g_iMood = (integer)sValue;
                }
            }else
            if(llGetSubString(sToken, 0, i) == g_sAuthToken){
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "iaccess") iAccess = (integer)sValue;
            }else
            if (llGetSubString(sToken, 0, i) == g_sCameraToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (llGetPermissions() & PERMISSION_CONTROL_CAMERA) {
                    if (sToken == "freeze") LockCam();
                    else if (sToken == "mouselook") llMessageLinked(LINK_RLV, RLV_CMD, "camdistmax:0=n", "camera"); 
                    else if (~llSubStringIndex(g_sJsonModes, sToken)) CamMode(sToken);
                }
            }           
        } else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) { 
                
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAv = (key)llList2String(lMenuParams, 0);          
                string sMessage = llList2String(lMenuParams, 1);                                         
                
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                string sMenuType = llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                if (sMenuType == "camera") {
                    if (sMessage == UPMENU)
                        llMessageLinked(LINK_ROOT, iAuth, "menu " + g_sParentMenu, kAv);
                    else {
                        UserCommand(iAuth, "cam " + llToLower(sMessage), kAv);
                        CamMenu(kAv, iAuth);
                    }
                } else if (sMenuType == "rmcamera") {
                   
                }                    
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        } else if (iNum == REBOOT && sStr == "reboot") llResetScript();
    }
    
    timer() {       
        
        if (g_iSync2Me) {
            vector vNewPos = llGetCameraPos();
            rotation rNewRot = llGetCameraRot();
            if (vNewPos != g_vCamPos || rNewRot != g_rCamRot)
                ChatCamParams(g_iBroadChan,g_kBroadRcpt);
        } else {
            g_kBroadRcpt = "";
            llSetTimerEvent(0.0);
        }
    }


}

