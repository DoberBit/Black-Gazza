//start_unprocessed_text
/*/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/
/|/                                                                          /|/
/|/              ____                   ______      ____                     /|/
/|/             / __ \____  ___  ____  / ____/___  / / /___ ______           /|/
/|/            / / / / __ \/ _ \/ __ \/ /   / __ \/ / / __ `/ ___/           /|/
/|/           / /_/ / /_/ /  __/ / / / /___/ /_/ / / / /_/ / /               /|/
/|/           \____/ .___/\___/_/ /_/\____/\____/_/_/\__,_/_/                /|/
/|/               /_/                                                        /|/
/|/                                                                          /|/
/|/                        ,^~~~-.         .-~~~"-.                          /|/
/|/                       :  .--. \       /  .--.  \                         /|/
/|/                       : (    .-`<^~~~-: :    )  :                        /|/
/|/                       `. `-,~            ^- '  .'                        /|/
/|/                         `-:                ,.-~                          /|/
/|/                          .'                  `.                          /|/
/|/                         ,'   @   @            |                          /|/
/|/                         :    __               ;                          /|/
/|/                      ...{   (__)          ,----.                         /|/
/|/                     /   `.              ,' ,--. `.                       /|/
/|/                    |      `.,___   ,      :    : :                       /|/
/|/                    |     .'    ~~~~       \    / :                       /|/
/|/                     \.. /               `. `--' .'                       /|/
/|/                        |                  ~----~                         /|/
/|/                           Dialog - 170323.2                              /|/

/|/ ------------------------------------------------------------------------ /|/
/|/  Copyright (c) 2007 - 2017 Schmobag Hogfather, Nandana Singh,            /|/
/|/  Cleo Collins, Satomi Ahn, Joy Stipe, Wendy Starfall, littlemousy,       /|/
/|/  Romka Swallowtail, Garvin Twine et al.                                  /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script is free software: you can redistribute it and/or modify     /|/
/|/  it under the terms of the GNU General Public License as published       /|/
/|/  by the Free Software Foundation, version 2.                             /|/
/|/                                                                          /|/
/|/  This script is distributed in the hope that it will be useful,          /|/
/|/  but WITHOUT ANY WARRANTY; without even the implied warranty of          /|/
/|/  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            /|/
/|/  GNU General Public License for more details.                            /|/
/|/                                                                          /|/
/|/  You should have received a copy of the GNU General Public License       /|/
/|/  along with this script; if not, see www.gnu.org/licenses/gpl-2.0        /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script and any derivatives based on it must remain "full perms".   /|/
/|/                                                                          /|/
/|/  "Full perms" means maintaining MODIFY, COPY, and TRANSFER permissions   /|/
/|/  in Second Life(R), OpenSimulator and the Metaverse.                     /|/
/|/                                                                          /|/
/|/  If these platforms should allow more fine-grained permissions in the    /|/
/|/  future, then "full perms" will mean the most permissive possible set    /|/
/|/  of permissions allowed by the platform.                                 /|/
/|/ ------------------------------------------------------------------------ /|/
/|/       github.com/VirtualDisgrace/opencollar/tree/master/src/collar       /|/
/|/ ------------------------------------------------------------------------ /|/
/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/

/|/an adaptation of Schmobag Hogfather's SchmoDialog script
/|/MESSAGE MAP
integer CMD_ZERO = 0;
integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
integer CMD_EVERYONE = 504;
integer CMD_BLOCKED = 520;

integer NOTIFY = 1002;
integer NOTIFY_OWNERS=1003;
integer SAY = 1004;

integer SPECIAL_NOTIFY = 1005;
integer SPECIAL_SAY = 1007;

integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer REBOOT = -1000;
integer LOADPIN = -1904;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
integer SENSORDIALOG = -9003;

key g_kWearer;
string g_sSettingToken = "dialog_";
string g_sGlobalToken = "global_";
integer g_iListenChan=1;
string g_sPrefix;
string g_oldPrefix;
string g_inmatePrefix;
string g_sDeviceType = "collar";
string g_sDeviceName;
string g_sWearerName;
string g_sWearerOldName;
string g_sWearerNumber;
string g_sWearerCrime;
string g_sWearerSentence;
string g_sWearerType;
string g_sWearerThreat;
list g_lOwners;

string TIME_MODE;
integer g_iNoLink;
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;

string Objectscan(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    integer index=0;
    if((string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_GROUP])!="ce9356ec-47b1-5690-d759-04d8c8921476"){
        return llGetDisplayName(kID);
    }
    while(index<numOfAttachments){
        string name=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_NAME]);
        string creator=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_CREATOR]);
        if ((llSubStringIndex(name,"P-6") >= 0)&&llStringLength(name)==7&&creator=="2a9164eb-f402-4319-b7b3-92b09f9b69aa"){
            return name;
        }
        ++index;
    }
    return llGetDisplayName(kID);
}
string SobriquetURI(string sName){
    if(g_iNoLink){
        return sName;
    }else{
         return "[secondlife:/|/|/app/agent/"+(string)g_kWearer+"/inspect "+sName+"]";
    }
   
}
string NameURI(key kID){
    if(kID==NULL_KEY){
        return "(null_key)";
    }
    if(g_iNoLink){
        if (llGetAgentSize(kID))
            return Objectscan(kID);
        else /|/llEscapeURL
            return llKey2Name(kID);
    }else{
        if (llGetAgentSize(kID))
            return "[secondlife:/|/|/app/agent/"+(string)kID+"/inspect "+llEscapeURL(Objectscan(kID))+"]";
        else
            return "secondlife:/|/|/app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
    } 
}
string NameURIS(key kID){
    if(kID==NULL_KEY){
        return "(null_key)";
    }
    if (llGetAgentSize(kID))
        return Objectscan(kID);
    else
        return llKey2Name(kID);
}
string NameConvertor(string sMsg){
    list lParams = llParseString2List(sMsg, ["%NAME@","@NAME%"], []);
    integer Llength = llGetListLength(lParams);
    
    string sText = "";
    integer index=0;
    while(index<Llength){
        string sValue;
        sValue=llList2String(lParams, index);
        
        if((key)sValue){
            sText+=NameURI((key)sValue);
        }else{
            sText+=sValue;
        }
        ++index;
    }
    return sText;
}
string NameConvertorS(string sMsg){
    list lParams = llParseString2List(sMsg, ["%NAMES@","@NAMES%"], []);
    integer Llength = llGetListLength(lParams);
    
    string sText = "";
    integer index=0;
    while(index<Llength){
        string sValue;
        sValue=llList2String(lParams, index);
        
        if((key)sValue){
            sText+=NameURIS((key)sValue);
        }else{
            sText+=sValue;
        }
        ++index;
    }
    return sText;
}

string SubstitudeVars(string sMsg) {
        if (sMsg == "%NOACCESS%") return "Access denied.";
        if (~llSubStringIndex(sMsg, "%PREFIX%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%PREFIX%"], []), g_sPrefix);
        if (~llSubStringIndex(sMsg, "%OLDPREFIX%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%OLDPREFIX%"], []), g_oldPrefix);
        if (~llSubStringIndex(sMsg, "%INMATEPREFIX%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%INMATEPREFIX%"], []), g_inmatePrefix);
        if (~llSubStringIndex(sMsg, "%CHANNEL%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%CHANNEL%"], []), (string)g_iListenChan);
        if (~llSubStringIndex(sMsg, "%DEVICETYPE%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%DEVICETYPE%"], []), g_sDeviceType);
         if (~llSubStringIndex(sMsg, "%DEVICENAME%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%DEVICENAME%"], []), g_sDeviceName);
        if (~llSubStringIndex(sMsg, "%WEARERNUMBER_L%")){
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNUMBER_L%"], []), SobriquetURI(g_sWearerNumber));
        }   
        if (~llSubStringIndex(sMsg, "%WEARERNAME%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAME%"], []), SobriquetURI(g_sWearerNumber));
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAME%"], []), SobriquetURI(g_sWearerName));
        }
        if (~llSubStringIndex(sMsg, "%WEAREROLDNAME_L%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME_L%"], []), SobriquetURI(g_sWearerNumber));
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME_L%"], []), SobriquetURI(g_sWearerOldName));
        }
        if (~llSubStringIndex(sMsg, "%WEARERNUMBER%")){
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNUMBER%"], []), g_sWearerNumber);
        }   
        if (~llSubStringIndex(sMsg, "%WEARERNAMES%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAMES%"], []), g_sWearerNumber);
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAMES%"], []), g_sWearerName);
        }
        if (~llSubStringIndex(sMsg, "%WEAREROLDNAME%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME%"], []), g_sWearerNumber);
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME%"], []), g_sWearerOldName);
        }
        if (~llSubStringIndex(sMsg, "%WEARERCRIME%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERCRIME%"], []), g_sWearerCrime);
        if (~llSubStringIndex(sMsg, "%WEARERSENTENCE%")){
            if(g_sWearerSentence=="0"||llStringTrim(g_sWearerSentence, STRING_TRIM )==""){
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERSENTENCE%"], []), "Life; No possible release.");
            }else{
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERSENTENCE%"], []), g_sWearerSentence);
            } 
        }
        if (~llSubStringIndex(sMsg, "%WEARERTYPE%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERTYPE%"], []), g_sWearerType);
        if (~llSubStringIndex(sMsg, "%WEARERTHREAT%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERTHREAT%"], []), g_sWearerThreat);
        return sMsg;
}
Notify(key kID, string sMsg, integer iAlsoNotifyWearer) {
    if ((key)kID){
        if(iAlsoNotifyWearer!=0&&iAlsoNotifyWearer!=1)
            return;
        
        string sObjectName = llGetObjectName();
        if (g_sDeviceName != sObjectName) {
            llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,g_sDeviceName] );
        }
        
        sMsg = SubstitudeVars(sMsg);
        sMsg=NameConvertor(sMsg);
        sMsg=NameConvertorS(sMsg);
        if (kID == g_kWearer) llOwnerSay(sMsg);
        else {
            if (llGetAgentSize(kID)) llRegionSayTo(kID,0,sMsg);
            else llInstantMessage(kID, sMsg);
            if (iAlsoNotifyWearer==1) llOwnerSay(sMsg);
        }
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
    }
}

NotifyOwners(string sMsg, string comments) {
    integer n;
    integer iStop = llGetListLength(g_lOwners);
    sMsg = SubstitudeVars(sMsg);
    sMsg=NameConvertor(sMsg);
    sMsg=NameConvertorS(sMsg);
    for (; n < iStop; ++n) {
        key kAv = (key)llList2String(g_lOwners, n);
        if (comments=="ignoreNearby") {
            /|/we don't want to bother the owner if he/she is right there, so check distance
            vector vOwnerPos = (vector)llList2String(llGetObjectDetails(kAv, [OBJECT_POS]), 0);
            if (vOwnerPos == ZERO_VECTOR || llVecDist(vOwnerPos, llGetPos()) > 20.0) {/|/vOwnerPos will be ZERO_VECTOR if not in sim
                /|/Debug("notifying " + (string)kAv);
                /|/Debug("Sending notify to "+(string)kAv);
                Notify(kAv, sMsg,FALSE);
            /|/} else {
                /|/Debug("Not sending notify to "+(string)kAv);
            }
        } else {
            /|/Debug("Sending notify to "+(string)kAv);
            Notify(kAv, sMsg,FALSE);
        }
    }
}
Say(string sMsg, integer iWhisper) {
    string sObjectName = llGetObjectName();
    if (g_sDeviceName != sObjectName) {
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,g_sDeviceName] );
    }
    sMsg = SubstitudeVars(sMsg);
    sMsg=NameConvertor(sMsg);
    sMsg=NameConvertorS(sMsg);
    if (iWhisper==1) 
        llWhisper(0,"/me "+sMsg);
    else if (iWhisper==2) 
        llWhisper(0,sMsg);
    else if (iWhisper==3) 
        llShout(0,"/me "+sMsg);
    else if (iWhisper==4) 
        llShout(0,sMsg);
    else 
        llSay(0, sMsg); 
    llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
}
Special_Say(string sMsg, integer iWhisper) {
    string sObjectName = llGetObjectName();
    sMsg = SubstitudeVars(sMsg);
    sMsg=NameConvertor(sMsg);
    sMsg=NameConvertorS(sMsg);
    list lParams = llParseString2List(sMsg, ["|"], []);    
    string sChannel = llList2String(lParams, 0);
    integer iChannel = llList2Integer(lParams, 0);
    string sName = llList2String(lParams, 1);
    string sText="";
    
    integer index=2;
    sChannel = llDumpList2String(llParseStringKeepNulls((sChannel = "") + sChannel, [" "], []), "");
    if(iChannel==0&&sChannel!="0"){
        iChannel=0;
        sName=llList2String(lParams, 0);
        index=1;
    }
    sChannel="";
    integer Llength = llGetListLength(lParams);
    while(index<Llength){
        sText+=llList2String(lParams, index);
        ++index;
    }
    sMsg=sText;
    sText="";
    if (sName != sObjectName) {
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sName] );
    }
    if (iWhisper==1) 
        llWhisper(iChannel,"/me "+sMsg);
    else if (iWhisper==2) 
        llWhisper(iChannel,sMsg);
    else if (iWhisper==3) 
        llShout(iChannel,"/me "+sMsg);
    else if (iWhisper==4) 
        llShout(iChannel,sMsg);
     else if (iWhisper==5) 
        llSay(iChannel,"/me "+sMsg); 
     else 
        llSay(iChannel, sMsg); 
    
    llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
}
Special_Notify(key kID, string sMsg, integer iAlsoNotifyWearer) {
    if ((key)kID){
        string sObjectName = llGetObjectName();
        
        sMsg = SubstitudeVars(sMsg);
        sMsg=NameConvertor(sMsg);
         sMsg=NameConvertorS(sMsg);
        list lParams = llParseString2List(sMsg, ["|"], []);    
        string sName = llList2String(lParams, 0);
        string sText="";
        
        integer Llength = llGetListLength(lParams);
        integer index=1;
        while(index<Llength){
            sText+=llList2String(lParams, index);
            ++index;
        }
        
        if (sName != sObjectName) {
            llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sName] );
        }
        
        sMsg=sText;
        sText="";
        
        if (kID == g_kWearer) llOwnerSay(sMsg);
        else {
            if (llGetAgentSize(kID)) llRegionSayTo(kID,0,sMsg);
            else llInstantMessage(kID, sMsg);
            if (iAlsoNotifyWearer==1) llOwnerSay(sMsg);
        }
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
    }
}

UserCommand(integer iNum, string sStr, key kID) {
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,say,17,12,28,108");
    }else
    if (llSubStringIndex(llToLower(sStr),"dialog")==0) {
        integer strlen = llStringLength("dialog");
        sStr=llGetSubString(sStr,strlen+1,-1);
        list lParams = llParseString2List(llToLower(sStr), [" "], []);
        string sToken = llList2String(lParams, 0);
        if(sToken=="value"){
            if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                llMessageLinked(LINK_THIS,NOTIFY,"0"+"DENIED silly person. (Say)", kID);
                return;
            }
            sToken=llList2String(lParams, 1);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken+sToken+ "="+llDumpList2String( llList2List( lParams, 2, -1 ), " " ), "");
        }else
        if(llToLower(sToken)=="special_notify"){
            strlen = llStringLength("special_notify");
            sStr=llGetSubString(sStr,strlen+1,-1);
            sToken="";lParams=[];
            Special_Notify(g_kWearer,sStr,0);
        }else
        if(llToLower(sToken)=="notify"){
            strlen = llStringLength("notify");
            sStr=llGetSubString(sStr,strlen+1,-1);
            sToken="";lParams=[];
            Notify(g_kWearer,sStr,0);
        }else{
            if(llSubStringIndex(llToLower(sToken),"special_say")==0){
                strlen = llStringLength("special_say");
                integer iNumber=(integer)llGetSubString(sStr,strlen,strlen); /|/strlen is the number /|/strlen+1 is the space/|/strlen+2 is the text
                sStr=llGetSubString(sStr,strlen+2,-1);
                sToken="";
                if((iNumber==3||iNumber==4)&&(iNum==CMD_OWNER||g_kWearer==llGetOwnerKey(kID))){
                    Special_Say(sStr,iNumber);
                }else if((iNumber!=3&&iNumber!=4)){
                    Special_Say(sStr,iNumber);
                }
            }
        }
    }
}
StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,sheet,"+sStr);
}
INIT(){
    g_sSettingToken = "dialog_";
    g_sGlobalToken = "global_";
    g_iListenChan=1;
    g_sPrefix="";
    g_oldPrefix="";
    g_inmatePrefix="";
    g_sDeviceType = "collar";
    g_sDeviceName="";
    g_sWearerName="";
    g_sWearerOldName="";
    g_sWearerNumber="";
    g_sWearerCrime="";
    g_sWearerSentence="";
    g_sWearerType="";
    g_sWearerThreat="";
    g_lOwners=[];
    TIME_MODE="";
    g_iNoLink=0;
    g_kWearer=llGetOwner();
    g_sPrefix = llToLower(llGetSubString(llKey2Name(llGetOwner()), 0,1));
    g_sWearerName="";
    g_sDeviceName = llList2String(llGetLinkPrimitiveParams(1,[PRIM_NAME]),0);
    TIME_MODE="REQUEST_CHARACTER";llSetTimerEvent(10);
}
default {
    on_rez(integer iParam) {
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }

    state_entry() {
        llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_REQUEST","");
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum >= CMD_OWNER && iNum <= CMD_WEARER) UserCommand(iNum, sStr, kID);
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (sToken == g_sSettingToken + "snolink"||sToken == g_sSettingToken + "nolink") g_iNoLink=(integer)sValue;
            else if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                
                if (sToken == "InmateNumber")
                {
                    g_sWearerNumber = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateCrime")
                {
                    g_sWearerCrime = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateName")
                {
                    g_sWearerName = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "OldName")
                {
                    g_sWearerOldName = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateSentence")
                {
                    g_sWearerSentence = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateType")
                {
                    g_sWearerType = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateThreat")
                {
                    g_sWearerThreat = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateMugshot")
                {
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "DeviceType") {
                    g_sDeviceType = sValue;
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,device,"+sToken+","+sValue);
                }
                else if (sToken == "DeviceName") {
                    g_sDeviceName = sValue;
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,device,"+sToken+","+sValue);
                } else if (sToken == "WearerName") {
                    StatusUpdater(sToken+","+sValue);
                } else if (sToken == "prefix"){
                    if (sValue != ""){g_sPrefix=sValue;}
                }else if (sToken == "oldprefix"){
                    if (sValue != ""){ g_oldPrefix=sValue;}
                }else if (sToken == "inmateprefix"){
                    if (sValue != ""){g_inmatePrefix=sValue;}
                }
                else if (sToken =="channel"){g_iListenChan = (integer)sValue;}
            }
            
            else if (sToken == "auth_owner")
                g_lOwners = llParseString2List(sValue, [","], []);
        }else if (iNum == NOTIFY)    Notify(kID,llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == SAY)         Say(llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == SPECIAL_NOTIFY) Special_Notify(kID,llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == SPECIAL_SAY) Special_Say(llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == LOADPIN && (sStr == llGetScriptName()||sStr == llGetScriptName()+"@"+"pin")) {
            integer iPin = (integer)llFrand(99999.0)+1;
            llSetRemoteScriptAccessPin(iPin);
            llMessageLinked(iSender, LOADPIN, (string)iPin+"@"+llGetScriptName(),llGetKey());
        }
        else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_REQUEST") llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_SAY","");
        } else if (iNum==NOTIFY_OWNERS) NotifyOwners(sStr,(string)kID);
        else if (iNum == REBOOT && sStr == "reboot") llResetScript();
      
    }

    listen(integer iChan, string sName, key kID, string sMessage) {
        
    }

    timer() {
        if(TIME_MODE=="REQUEST_CHARACTER"){
            TIME_MODE="";
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateCrime","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateNumber","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateName","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateSentence","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateType","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateThreat","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"DeviceType","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"DeviceName","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"WearerName","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"prefix","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"oldprefix","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"inmateprefix","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"channel","");
        }
        llSetTimerEvent(0);
    }

    changed(integer iChange){
        if (iChange & CHANGED_OWNER) llResetScript();
/|*
        if (iChange & CHANGED_REGION) {
            if (g_iProfiled){
                llScriptProfiler(1);
                Debug("profiling restarted");
            }
        }
*|/
    }
}
*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 12/27/2017 23:02:33
//mono



integer CMD_OWNER = 500;
integer CMD_WEARER = 503;

integer NOTIFY = 1002;
integer NOTIFY_OWNERS=1003;
integer SAY = 1004;

integer SPECIAL_NOTIFY = 1005;
integer SPECIAL_SAY = 1007;

integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer REBOOT = -1000;
integer LOADPIN = -1904;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;

key g_kWearer;
string g_sSettingToken = "dialog_";
string g_sGlobalToken = "global_";
integer g_iListenChan=1;
string g_sPrefix;
string g_oldPrefix;
string g_inmatePrefix;
string g_sDeviceType = "collar";
string g_sDeviceName;
string g_sWearerName;
string g_sWearerOldName;
string g_sWearerNumber;
string g_sWearerCrime;
string g_sWearerSentence;
string g_sWearerType;
string g_sWearerThreat;
list g_lOwners;

string TIME_MODE;
integer g_iNoLink;
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string SobriquetURI(string sName){
    if(g_iNoLink){
        return sName;
    }else{
         return "[secondlife:///app/agent/"+(string)g_kWearer+"/inspect "+sName+"]";
    }
   
}

string Objectscan(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    integer index=0;
    if((string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_GROUP])!="ce9356ec-47b1-5690-d759-04d8c8921476"){
        return llGetDisplayName(kID);
    }
    while(index<numOfAttachments){
        string name=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_NAME]);
        string creator=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_CREATOR]);
        if ((llSubStringIndex(name,"P-6") >= 0)&&llStringLength(name)==7&&creator=="2a9164eb-f402-4319-b7b3-92b09f9b69aa"){
            return name;
        }
        ++index;
    }
    return llGetDisplayName(kID);
}
string NameURIS(key kID){
    if(kID==NULL_KEY){
        return "(null_key)";
    }
    if (llGetAgentSize(kID))
        return Objectscan(kID);
    else
        return llKey2Name(kID);
}
string NameURI(key kID){
    if(kID==NULL_KEY){
        return "(null_key)";
    }
    if(g_iNoLink){
        if (llGetAgentSize(kID))
            return Objectscan(kID);
        else 
            return llKey2Name(kID);
    }else{
        if (llGetAgentSize(kID))
            return "[secondlife:///app/agent/"+(string)kID+"/inspect "+llEscapeURL(Objectscan(kID))+"]";
        else
            return "secondlife:///app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
    } 
}
string NameConvertorS(string sMsg){
    list lParams = llParseString2List(sMsg, ["%NAMES@","@NAMES%"], []);
    integer Llength = llGetListLength(lParams);
    
    string sText = "";
    integer index=0;
    while(index<Llength){
        string sValue;
        sValue=llList2String(lParams, index);
        
        if((key)sValue){
            sText+=NameURIS((key)sValue);
        }else{
            sText+=sValue;
        }
        ++index;
    }
    return sText;
}
string NameConvertor(string sMsg){
    list lParams = llParseString2List(sMsg, ["%NAME@","@NAME%"], []);
    integer Llength = llGetListLength(lParams);
    
    string sText = "";
    integer index=0;
    while(index<Llength){
        string sValue;
        sValue=llList2String(lParams, index);
        
        if((key)sValue){
            sText+=NameURI((key)sValue);
        }else{
            sText+=sValue;
        }
        ++index;
    }
    return sText;
}

UserCommand(integer iNum, string sStr, key kID) {
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,say,17,12,28,108");
    }else
    if (llSubStringIndex(llToLower(sStr),"dialog")==0) {
        integer strlen = llStringLength("dialog");
        sStr=llGetSubString(sStr,strlen+1,-1);
        list lParams = llParseString2List(llToLower(sStr), [" "], []);
        string sToken = llList2String(lParams, 0);
        if(sToken=="value"){
            if(iNum!=CMD_OWNER&&g_kWearer!=llGetOwnerKey(kID)){
                llMessageLinked(LINK_THIS,NOTIFY,"0"+"DENIED silly person. (Say)", kID);
                return;
            }
            sToken=llList2String(lParams, 1);
            llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken+sToken+ "="+llDumpList2String( llList2List( lParams, 2, -1 ), " " ), "");
        }else
        if(llToLower(sToken)=="special_notify"){
            strlen = llStringLength("special_notify");
            sStr=llGetSubString(sStr,strlen+1,-1);
            sToken="";lParams=[];
            Special_Notify(g_kWearer,sStr,0);
        }else
        if(llToLower(sToken)=="notify"){
            strlen = llStringLength("notify");
            sStr=llGetSubString(sStr,strlen+1,-1);
            sToken="";lParams=[];
            Notify(g_kWearer,sStr,0);
        }else{
            if(llSubStringIndex(llToLower(sToken),"special_say")==0){
                strlen = llStringLength("special_say");
                integer iNumber=(integer)llGetSubString(sStr,strlen,strlen); 
                sStr=llGetSubString(sStr,strlen+2,-1);
                sToken="";
                if((iNumber==3||iNumber==4)&&(iNum==CMD_OWNER||g_kWearer==llGetOwnerKey(kID))){
                    Special_Say(sStr,iNumber);
                }else if((iNumber!=3&&iNumber!=4)){
                    Special_Say(sStr,iNumber);
                }
            }
        }
    }
}

string SubstitudeVars(string sMsg) {
        if (sMsg == "%NOACCESS%") return "Access denied.";
        if (~llSubStringIndex(sMsg, "%PREFIX%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%PREFIX%"], []), g_sPrefix);
        if (~llSubStringIndex(sMsg, "%OLDPREFIX%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%OLDPREFIX%"], []), g_oldPrefix);
        if (~llSubStringIndex(sMsg, "%INMATEPREFIX%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%INMATEPREFIX%"], []), g_inmatePrefix);
        if (~llSubStringIndex(sMsg, "%CHANNEL%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%CHANNEL%"], []), (string)g_iListenChan);
        if (~llSubStringIndex(sMsg, "%DEVICETYPE%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%DEVICETYPE%"], []), g_sDeviceType);
         if (~llSubStringIndex(sMsg, "%DEVICENAME%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%DEVICENAME%"], []), g_sDeviceName);
        if (~llSubStringIndex(sMsg, "%WEARERNUMBER_L%")){
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNUMBER_L%"], []), SobriquetURI(g_sWearerNumber));
        }   
        if (~llSubStringIndex(sMsg, "%WEARERNAME%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAME%"], []), SobriquetURI(g_sWearerNumber));
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAME%"], []), SobriquetURI(g_sWearerName));
        }
        if (~llSubStringIndex(sMsg, "%WEAREROLDNAME_L%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME_L%"], []), SobriquetURI(g_sWearerNumber));
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME_L%"], []), SobriquetURI(g_sWearerOldName));
        }
        if (~llSubStringIndex(sMsg, "%WEARERNUMBER%")){
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNUMBER%"], []), g_sWearerNumber);
        }   
        if (~llSubStringIndex(sMsg, "%WEARERNAMES%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAMES%"], []), g_sWearerNumber);
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERNAMES%"], []), g_sWearerName);
        }
        if (~llSubStringIndex(sMsg, "%WEAREROLDNAME%")){
            if(g_sWearerName=="0"||llStringTrim(g_sWearerName, STRING_TRIM )=="")
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME%"], []), g_sWearerNumber);
            else
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEAREROLDNAME%"], []), g_sWearerOldName);
        }
        if (~llSubStringIndex(sMsg, "%WEARERCRIME%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERCRIME%"], []), g_sWearerCrime);
        if (~llSubStringIndex(sMsg, "%WEARERSENTENCE%")){
            if(g_sWearerSentence=="0"||llStringTrim(g_sWearerSentence, STRING_TRIM )==""){
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERSENTENCE%"], []), "Life; No possible release.");
            }else{
                sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERSENTENCE%"], []), g_sWearerSentence);
            } 
        }
        if (~llSubStringIndex(sMsg, "%WEARERTYPE%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERTYPE%"], []), g_sWearerType);
        if (~llSubStringIndex(sMsg, "%WEARERTHREAT%"))
            sMsg = llDumpList2String(llParseStringKeepNulls((sMsg = "") + sMsg, ["%WEARERTHREAT%"], []), g_sWearerThreat);
        return sMsg;
}
StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,sheet,"+sStr);
}
Special_Say(string sMsg, integer iWhisper) {
    string sObjectName = llGetObjectName();
    sMsg = SubstitudeVars(sMsg);
    sMsg=NameConvertor(sMsg);
    sMsg=NameConvertorS(sMsg);
    list lParams = llParseString2List(sMsg, ["|"], []);    
    string sChannel = llList2String(lParams, 0);
    integer iChannel = llList2Integer(lParams, 0);
    string sName = llList2String(lParams, 1);
    string sText="";
    
    integer index=2;
    sChannel = llDumpList2String(llParseStringKeepNulls((sChannel = "") + sChannel, [" "], []), "");
    if(iChannel==0&&sChannel!="0"){
        iChannel=0;
        sName=llList2String(lParams, 0);
        index=1;
    }
    sChannel="";
    integer Llength = llGetListLength(lParams);
    while(index<Llength){
        sText+=llList2String(lParams, index);
        ++index;
    }
    sMsg=sText;
    sText="";
    if (sName != sObjectName) {
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sName] );
    }
    if (iWhisper==1) 
        llWhisper(iChannel,"/me "+sMsg);
    else if (iWhisper==2) 
        llWhisper(iChannel,sMsg);
    else if (iWhisper==3) 
        llShout(iChannel,"/me "+sMsg);
    else if (iWhisper==4) 
        llShout(iChannel,sMsg);
     else if (iWhisper==5) 
        llSay(iChannel,"/me "+sMsg); 
     else 
        llSay(iChannel, sMsg); 
    
    llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
}
Special_Notify(key kID, string sMsg, integer iAlsoNotifyWearer) {
    if ((key)kID){
        string sObjectName = llGetObjectName();
        
        sMsg = SubstitudeVars(sMsg);
        sMsg=NameConvertor(sMsg);
         sMsg=NameConvertorS(sMsg);
        list lParams = llParseString2List(sMsg, ["|"], []);    
        string sName = llList2String(lParams, 0);
        string sText="";
        
        integer Llength = llGetListLength(lParams);
        integer index=1;
        while(index<Llength){
            sText+=llList2String(lParams, index);
            ++index;
        }
        
        if (sName != sObjectName) {
            llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sName] );
        }
        
        sMsg=sText;
        sText="";
        
        if (kID == g_kWearer) llOwnerSay(sMsg);
        else {
            if (llGetAgentSize(kID)) llRegionSayTo(kID,0,sMsg);
            else llInstantMessage(kID, sMsg);
            if (iAlsoNotifyWearer==1) llOwnerSay(sMsg);
        }
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
    }
}
Say(string sMsg, integer iWhisper) {
    string sObjectName = llGetObjectName();
    if (g_sDeviceName != sObjectName) {
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,g_sDeviceName] );
    }
    sMsg = SubstitudeVars(sMsg);
    sMsg=NameConvertor(sMsg);
    sMsg=NameConvertorS(sMsg);
    if (iWhisper==1) 
        llWhisper(0,"/me "+sMsg);
    else if (iWhisper==2) 
        llWhisper(0,sMsg);
    else if (iWhisper==3) 
        llShout(0,"/me "+sMsg);
    else if (iWhisper==4) 
        llShout(0,sMsg);
    else 
        llSay(0, sMsg); 
    llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
}

NotifyOwners(string sMsg, string comments) {
    integer n;
    integer iStop = llGetListLength(g_lOwners);
    sMsg = SubstitudeVars(sMsg);
    sMsg=NameConvertor(sMsg);
    sMsg=NameConvertorS(sMsg);
    for (; n < iStop; ++n) {
        key kAv = (key)llList2String(g_lOwners, n);
        if (comments=="ignoreNearby") {
            
            vector vOwnerPos = (vector)llList2String(llGetObjectDetails(kAv, [OBJECT_POS]), 0);
            if (vOwnerPos == ZERO_VECTOR || llVecDist(vOwnerPos, llGetPos()) > 20.0) {
                
                
                Notify(kAv, sMsg,FALSE);
            
                
            }
        } else {
            
            Notify(kAv, sMsg,FALSE);
        }
    }
}
Notify(key kID, string sMsg, integer iAlsoNotifyWearer) {
    if ((key)kID){
        if(iAlsoNotifyWearer!=0&&iAlsoNotifyWearer!=1)
            return;
        
        string sObjectName = llGetObjectName();
        if (g_sDeviceName != sObjectName) {
            llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,g_sDeviceName] );
        }
        
        sMsg = SubstitudeVars(sMsg);
        sMsg=NameConvertor(sMsg);
        sMsg=NameConvertorS(sMsg);
        if (kID == g_kWearer) llOwnerSay(sMsg);
        else {
            if (llGetAgentSize(kID)) llRegionSayTo(kID,0,sMsg);
            else llInstantMessage(kID, sMsg);
            if (iAlsoNotifyWearer==1) llOwnerSay(sMsg);
        }
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,sObjectName] );
    }
}
INIT(){
    g_sSettingToken = "dialog_";
    g_sGlobalToken = "global_";
    g_iListenChan=1;
    g_sPrefix="";
    g_oldPrefix="";
    g_inmatePrefix="";
    g_sDeviceType = "collar";
    g_sDeviceName="";
    g_sWearerName="";
    g_sWearerOldName="";
    g_sWearerNumber="";
    g_sWearerCrime="";
    g_sWearerSentence="";
    g_sWearerType="";
    g_sWearerThreat="";
    g_lOwners=[];
    TIME_MODE="";
    g_iNoLink=0;
    g_kWearer=llGetOwner();
    g_sPrefix = llToLower(llGetSubString(llKey2Name(llGetOwner()), 0,1));
    g_sWearerName="";
    g_sDeviceName = llList2String(llGetLinkPrimitiveParams(1,[PRIM_NAME]),0);
    TIME_MODE="REQUEST_CHARACTER";llSetTimerEvent(10);
}
default {
    on_rez(integer iParam) {
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }

    state_entry() {
        llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_REQUEST","");
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum >= CMD_OWNER && iNum <= CMD_WEARER) UserCommand(iNum, sStr, kID);
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (sToken == g_sSettingToken + "snolink"||sToken == g_sSettingToken + "nolink") g_iNoLink=(integer)sValue;
            else if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                
                if (sToken == "InmateNumber")
                {
                    g_sWearerNumber = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateCrime")
                {
                    g_sWearerCrime = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateName")
                {
                    g_sWearerName = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "OldName")
                {
                    g_sWearerOldName = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateSentence")
                {
                    g_sWearerSentence = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateType")
                {
                    g_sWearerType = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateThreat")
                {
                    g_sWearerThreat = sValue;
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "InmateMugshot")
                {
                    StatusUpdater(sToken+","+sValue);
                }
                else if (sToken == "DeviceType") {
                    g_sDeviceType = sValue;
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,device,"+sToken+","+sValue);
                }
                else if (sToken == "DeviceName") {
                    g_sDeviceName = sValue;
                    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"CHARACTER,device,"+sToken+","+sValue);
                } else if (sToken == "WearerName") {
                    StatusUpdater(sToken+","+sValue);
                } else if (sToken == "prefix"){
                    if (sValue != ""){g_sPrefix=sValue;}
                }else if (sToken == "oldprefix"){
                    if (sValue != ""){ g_oldPrefix=sValue;}
                }else if (sToken == "inmateprefix"){
                    if (sValue != ""){g_inmatePrefix=sValue;}
                }
                else if (sToken =="channel"){g_iListenChan = (integer)sValue;}
            }
            
            else if (sToken == "auth_owner")
                g_lOwners = llParseString2List(sValue, [","], []);
        }else if (iNum == NOTIFY)    Notify(kID,llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == SAY)         Say(llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == SPECIAL_NOTIFY) Special_Notify(kID,llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == SPECIAL_SAY) Special_Say(llGetSubString(sStr,1,-1),(integer)llGetSubString(sStr,0,0));
        else if (iNum == LOADPIN && (sStr == llGetScriptName()||sStr == llGetScriptName()+"@"+"pin")) {
            integer iPin = (integer)llFrand(99999.0)+1;
            llSetRemoteScriptAccessPin(iPin);
            llMessageLinked(iSender, LOADPIN, (string)iPin+"@"+llGetScriptName(),llGetKey());
        }
        else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_REQUEST") llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_SAY","");
        } else if (iNum==NOTIFY_OWNERS) NotifyOwners(sStr,(string)kID);
        else if (iNum == REBOOT && sStr == "reboot") llResetScript();
      
    }

    listen(integer iChan, string sName, key kID, string sMessage) {
        
    }

    timer() {
        if(TIME_MODE=="REQUEST_CHARACTER"){
            TIME_MODE="";
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateCrime","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateNumber","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateName","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateSentence","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateType","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"InmateThreat","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"DeviceType","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"DeviceName","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"WearerName","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"prefix","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"oldprefix","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"inmateprefix","");
            llMessageLinked(LINK_SAVE,LM_SETTING_REQUEST,g_sGlobalToken+"channel","");
        }
        llSetTimerEvent(0);
    }

    changed(integer iChange){
        if (iChange & CHANGED_OWNER) llResetScript();


    }
}

