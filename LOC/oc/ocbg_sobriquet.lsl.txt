//start_unprocessed_text
/*/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/
/|/                                                                          /|/
/|/       _   ___     __            __  ___  _                               /|/
/|/      | | / (_)___/ /___ _____ _/ / / _ \(_)__ ___ ________ ________      /|/
/|/      | |/ / / __/ __/ /|/ / _ `/ / / /|/ / (_-</ _ `/ __/ _ `/ __/ -_)     /|/
/|/      |___/_/_/  \__/\_,_/\_,_/_/ /____/_/___/\_, /_/  \_,_/\__/\__/      /|/
/|/                                             /___/                        /|/
/|/                                                                          /|/
/|/                                        _                                 /|/
/|/                                        \`*-.                             /|/
/|/                                         )  _`-.                          /|/
/|/                                        .  : `. .                         /|/
/|/                                        : _   '  \                        /|/
/|/                                        ; *` _.   `*-._                   /|/
/|/                                        `-.-'          `-.                /|/
/|/                                          ;       `       `.              /|/
/|/                                          :.       .        \             /|/
/|/                                          . \  .   :   .-'   .            /|/
/|/                                          '  `+.;  ;  '      :            /|/
/|/                                          :  '  |    ;       ;-.          /|/
/|/                                          ; '   : :`-:     _.`* ;         /|/
/|/        Sobriquet - 160126.1           .*' /  .*' ; .*`- +'  `*'          /|/
/|/                                       `*-*   `*-*  `*-*'                 /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  Copyright (c) 2008 - 2015 Wendy Starfall, littlemousy, Garvin Twine     /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script is free software: you can redistribute it and/or modify     /|/
/|/  it under the terms of the GNU General Public License as published       /|/
/|/  by the Free Software Foundation, version 2.                             /|/
/|/                                                                          /|/
/|/  This script is distributed in the hope that it will be useful,          /|/
/|/  but WITHOUT ANY WARRANTY; without even the implied warranty of          /|/
/|/  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            /|/
/|/  GNU General Public License for more details.                            /|/
/|/                                                                          /|/
/|/  You should have received a copy of the GNU General Public License       /|/
/|/  along with this script; if not, see www.gnu.org/licenses/gpl-2.0        /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script and any derivatives based on it must remain "full perms".   /|/
/|/                                                                          /|/
/|/  "Full perms" means maintaining MODIFY, COPY, and TRANSFER permissions   /|/
/|/  in Second Life(R), OpenSimulator and the Metaverse.                     /|/
/|/                                                                          /|/
/|/  If these platforms should allow more fine-grained permissions in the    /|/
/|/  future, then "full perms" will mean the most permissive possible set    /|/
/|/  of permissions allowed by the platform.                                 /|/
/|/ ------------------------------------------------------------------------ /|/
/|/                          www.virtualdisgrace.com                         /|/
/|/ ------------------------------------------------------------------------ /|/
/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/

string g_sSubMenu = "Sobriquet";
key     g_kWearer;  
string g_sWearerName;
string g_sSobriquetToken = "sobriquet_";

string g_sGlobalToken = "global_";
string inmate_number;
string inmate_name;
integer g_iCharacterSlot;


integer CMD_OWNER                   = 500;
integer CMD_TRUSTED                 = 501;
integer CMD_GROUP                 = 502;
integer CMD_EVERYONE                = 504;

integer CMD_SAFEWORD                = 510; 


integer APPOVERRIDE                  = 777;
integer SOBRIQUETSMS                  = 778;
integer g_iOverideOn;
list g_lOverApps;
integer NOTIFY = 1002;
integer LINK_DIALOG = 3;
integer LINK_RLV = 4;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE            = 2000; 

integer LM_SETTING_RESPONSE        = 2002;
integer LM_SETTING_DELETE          = 2003;

integer g_iRLVOn=0;
integer RLV_CMD = 6000;
integer RLV_REFRESH = 6001;/|/RLV plugins should reinstate their restrictions upon receiving this message.
integer RLV_CLEAR = 6002;/|/RLV plugins should clear their restriction lists upon receiving this message.
integer RLV_VERSION = 6003; /|/RLV Plugins can recieve the used rl viewer version upon receiving this message..
integer RLV_OFF = 6100; /|/ send to inform plugins that RLV is disabled now, no message or key needed
integer RLV_ON = 6101; /|/ send to inform plugins that RLV is enabled now, no message or key needed

integer DIALOG                     = -9000;
integer DIALOG_RESPONSE            = -9001;
integer DIALOG_TIMEOUT             = -9002;

list g_lMenuIDs;
integer g_iMenuStride = 3;

integer g_iListenHandle;
integer g_iChannel;
integer g_iListenHandle_emote;
integer g_iChannel_emote;
integer g_iEnforce                 = 0;


integer PRIVATE_CHANNEL = 0;
integer INMATE_CHANNEL = 0;

string g_sMuffleSeverity = "NONE";
key BARK = "ab680371-f5fe-212a-b02f-15082b234eb8";
key PANT = "7de7ca8b-0582-0699-e0a1-e9ee72f23f8b";

key MEOW="df4e8f70-d9c0-72c4-ba2a-9b52ff5404c2";
key MEOW2="34489133-fadb-279f-f1fc-042213b02cc0";

integer CHANNEL_SAY_HANDLER;
integer CHANNEL_SAY=5;
integer g_iState;
integer g_iMood;
integer g_iSilence=0;

string TIME_MOOD;
integer g_iAuto=1;
integer g_iListenNoRLV=1;
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="SOBRIQUET";

MuffleSelected(integer remenu,integer iNum, key kID){
    llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"Muffle="+ g_sMuffleSeverity,"");
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sSobriquetToken+"Muffle="+ g_sMuffleSeverity,"");
    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Mumble severity set to: " + g_sMuffleSeverity,kID);  
    SendReport();
    if (remenu) SobriquetMenu(kID,iNum);
}
DeniedMessage(key kCmdGiver){
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Sobriquet)", kCmdGiver);
}

integer iAccess=1;
string g_sAuthToken = "auth_";
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess=3){
        return TRUE;
    }
    DeniedMessage(kCmdGiver);
    return FALSE;
}

string mangleText(string mes, string severity)
{
    if (severity == "NONE"){
        return mes;
    }else
    if (severity == "PUPPY"){
        return "Woof!";
    } else if (severity == "KITTY"){
        return "MEOW!";
    } else if (severity == "MUTE"){
        return "...";
    } else {
        integer i;
        string sub = "";
        string rep = "";
        for (i = 0; i < llStringLength(mes); ++i)
        {
            sub = llGetSubString(mes, i, i);
            rep = "";
            
            if (severity == "LOOSE")
            {
                
                if (sub == "l")
                    rep = "w";
                else
                if (sub == "R" || sub == "L")
                    rep = "W";
                else
                if (sub == "s")
                    rep = "f";
                else
                if (sub == "S")
                    rep = "F";
                else
                if (sub == "t")
                    rep = "g";               
                else
                if (sub == "T")
                    rep = "G";                
            }
            
            else
            if (severity == "SEVERE")
            {
                if (sub == "a" || sub == "b" || sub == "j" || sub == "s" || sub == "v" || sub == "z")
                    rep = "r";
                else
                if (sub == "A" || sub == "B" || sub == "J" || sub == "S" || sub == "V" || sub == "Z")
                    rep = "R";
                else
                if (sub == "d" || sub == "k" || sub == "l" || sub == "w")
                    rep = "f";
                else
                if (sub == "D" || sub == "K" || sub == "L" || sub == "W")
                    rep = "F";            
                else
                if (sub == "g" || sub == "x")
                    rep = "n";
                else
                if (sub == "G" || sub == "x")
                    rep = "N";                
                else
                if (sub == "h" || sub == "i" || sub == "m" || sub == "u")
                    rep = "d";
                else
                if (sub == "H" || sub == "I" || sub == "M" || sub == "U")
                    rep = "D";                
                else
                if (sub == "q")
                    rep = "m";
                else
                if (sub == "Q")
                    rep = "M";                
            }
            else
            if (severity == "EXTREME" | severity == "TOTAL" | severity == "MUTE")
            {
                if (sub =="B" || sub =="D" || sub =="K" || sub =="T" || sub =="V") rep = "Mph";
                if (sub =="b" || sub =="d" || sub =="k" || sub =="t" || sub =="M") rep = "m";
                if (sub =="D" || sub =="J" || sub =="L" || sub =="Q" || sub =="R") rep = "M";
                if (sub =="d" || sub =="j" || sub =="l" || sub =="q" || sub =="r") rep = "ph";
                if (sub =="S") rep = "H";
                if (sub =="s") rep = "m";
                if (sub =="C") rep = "Mf";
                if (sub =="c") rep = "m";
                if (sub =="A" || sub =="E" || sub =="I" || sub =="O" || sub =="U") rep = "Mph";
                if (sub =="a" || sub =="e" || sub =="i" || sub =="o" || sub =="u") rep = "m";  
                if (sub =="C" || sub =="V" || sub =="N" || sub =="Y") rep = "Mh";
                if (sub =="c" || sub =="v" || sub =="n" || sub =="y") rep = "ph";
                if (sub =="W" || sub =="Y" || sub =="Z" || sub =="X") rep = "Mf";
                if (sub =="w" || sub =="y" || sub =="z" || sub =="x") rep = "f";
            } 
          
            if (rep != "")
            {
                mes = llDeleteSubString(mes, i, i);
                mes = llInsertString(mes, i, rep);
            }    
        }
        return mes;
    }
}
StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}
SendReport(){
    StatusUpdater("state,"+(string)g_iState);
    StatusUpdater("enforce,"+(string)g_iEnforce);
    StatusUpdater("channel,enabled,"+(string)g_iListenNoRLV);
    StatusUpdater("channel,say,"+(string)CHANNEL_SAY);
    StatusUpdater("auto,"+(string)g_iAuto);
    StatusUpdater("muzzle,"+g_sMuffleSeverity);
    StatusUpdater("name,"+g_sWearerName);
    StatusUpdater("redirect_channel,"+(string)g_iChannel);
    StatusUpdater("redirect_emote,"+(string)g_iChannel_emote);
    StatusUpdater("silence,"+(string)g_iSilence);
}
CantEnforce(key kID){
    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"\nSobriquet cannot be enforced while these Apps are active: "+llDumpList2String(g_lOverApps,", ")+"\n",kID);
}
string sStr_WEARERNAMES="%WEARERNAMES%";
SobriquetCommand(integer iNum, string sStr, key kID, integer remenu) {
    string sStrLower=llToLower(sStr);
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);  
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));
    if (CheckCommandAuth(kID, iNum)==0 ) {
        return;
    }
    if(sCommand=="message"){
        return;
    }else
    if(sCommand=="on"||sCommand=="off"||sValue=="enforce"||sValue=="auto"||sCommand=="enforce"||sCommand=="auto"||sValue=="channel"){
        iEnforced_Failed=FALSE;
        if(sCommand=="☒"||sCommand=="off"){
            sCommand="0";
        }else
        if(sCommand=="☐"||sCommand=="on"){
            sCommand="1";
        }else
        if(sValue=="☒"||sValue=="off"){
            sValue="0";
        }else
        if(sValue=="☐"||sValue=="on"){
            sValue="1";
        }

        if ((sValue=="enforce"&&sCommand=="0")||(sCommand=="enforce"&&sValue=="0")) {
            g_iEnforce=FALSE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"enforce=0","");
        }else if ((sValue=="enforce"&&sCommand=="1")||(sCommand=="enforce"&&sValue=="1")) {
            if (g_iOverideOn) {
                CantEnforce(kID);
                return;
            }
            g_iEnforce=TRUE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"enforce=1","");
        }else
        if ((sValue=="auto"&&sCommand=="0")||(sCommand=="auto"&&sValue=="0")) {
            g_iAuto=FALSE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"auto=0","");
        }else if ((sValue=="auto"&&sCommand=="1")||(sCommand=="auto"&&sValue=="1")) {
            if (g_iOverideOn) {
                CantEnforce(kID);
                return;
            }
            g_iAuto=TRUE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"auto=1","");
        }else
        if ((sValue=="channel"&&sCommand=="0")||(sCommand=="channel"&&sValue=="0")) {
            g_iListenNoRLV=FALSE;
            SetRPTool();
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"norlv=0","");
        }else if ((sValue=="channel"&&sCommand=="1")||(sCommand=="channel"&&sValue=="1")) {
            g_iListenNoRLV=TRUE;
            SetRPTool();
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"norlv=1","");
        }
        if (remenu) SobriquetMenu(kID,iNum);
    }else 
    if (sCommand=="rename") {
        if(sValue==""){
            Dialog(kID, "Enter a name in the box and click Submit. Submitting an empty box resets the name. Remember, try to keep it to the theme.", [], [], 0, iNum, "RenameMenu");
        }else{
            SetName(llDumpList2String( llList2List( lParams, 1, -1 ), " " ),kID);
        }
    }else
    if(~llListFindList(["1","☐","none","puppy","kitty","loose","total","mute","extreme","severe"], [llToLower(sCommand)])){
        if (sCommand=="none"||sValue=="none"){
                g_sMuffleSeverity = "NONE";
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="puppy"||sValue=="puppy"){
                g_sMuffleSeverity = "PUPPY";
                MuffleSelected(remenu,iNum,kID);
        }else if (sCommand=="kitty"||sValue=="kitty"){
                g_sMuffleSeverity = "KITTY";
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="loose"||sValue=="loose"){
                g_sMuffleSeverity = "LOOSE";
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="total"||sValue=="total"){
                g_sMuffleSeverity = "TOTAL";        
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="mute"||sValue=="mute") {
                g_sMuffleSeverity = "MUTE";        
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="extreme"||sValue=="extreme"){
                g_sMuffleSeverity = "EXTREME";
                MuffleSelected(remenu,iNum,kID);
        }else
        if (sCommand=="severe"||sValue=="severe"){
                g_sMuffleSeverity = "SEVERE";
                MuffleSelected(remenu,iNum,kID);
        } 
    }else 
    if (sCommand=="silence"){
        if(sValue=="☒"||sValue=="0"){
            g_iSilence=0;
        }else
        if(sValue=="☐"||sValue=="1"){
            g_iSilence=1;
        }else{
            g_iSilence=!g_iSilence;
        }
        if (remenu) SobriquetMenu(kID,iNum);
    }else
    if (sCommand=="check"){
        SendReport();
    }else 
    if (sCommand=="channel"){
        if(iNum==CMD_OWNER||kID==g_kWearer){
            if(sValue==""||sValue==" "){
                Dialog(kID, "Enter a number for Non-RLV channel in the box and click Submit. Cant be channels that it listening already or public(0) channel. Submitting an empty box resets the channel.", [], [], 0, iNum, "ChannelMenu");
            }else{
                SetChannel((integer)sValue);
            }
        }else DeniedMessage(kID);
    }else 
    if (sCommand=="☒"){
        if (remenu) SobriquetMenu(kID,iNum);
    }    
}

Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [kID]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kID, kMenuID, sName];
}

string parseEmote(string mes, string severity)
{
    string unparsedMessage = mes;
    string parsedMessage = "";
    integer quoteIndex = llSubStringIndex(unparsedMessage, "\"");
    
    while(~quoteIndex)
    {
        if(quoteIndex != 0) parsedMessage += llGetSubString(unparsedMessage, 0, quoteIndex - 1);
        if(quoteIndex != llStringLength(unparsedMessage) - 1)
            unparsedMessage = llGetSubString(unparsedMessage, quoteIndex + 1, -1);
        else
            unparsedMessage = "";
        
        if(llStringLength(unparsedMessage) != 0)
        {
            quoteIndex = llSubStringIndex(unparsedMessage, "\"");
            if(quoteIndex == 0)
            {
                parsedMessage += "\"\"";
                if(llStringLength(unparsedMessage) != 1)
                    unparsedMessage = llGetSubString(unparsedMessage, quoteIndex + 1, -1);
                else
                    unparsedMessage = "";
            }
            else if(~quoteIndex)
            {
                string speachText = llGetSubString(unparsedMessage, 0, quoteIndex - 1);
                parsedMessage += "\"" + mangleText(speachText, severity) + "\"";
                
                if(quoteIndex != llStringLength(unparsedMessage) - 1)
                    unparsedMessage = llGetSubString(unparsedMessage, quoteIndex + 1, -1);
                else
                    unparsedMessage = "";
            }
            else
            {
                parsedMessage += "\"" + mangleText(unparsedMessage, severity) + "\"";
                unparsedMessage = "";
            }
        }
        
        quoteIndex = llSubStringIndex(unparsedMessage, "\"");
    }
    parsedMessage += unparsedMessage;
    
    return parsedMessage;
}
PlaySound(key kSound){
    if(!g_iSilence){
        llPlaySound(kSound,1.0);
    }
}

list lText_Puppy=["barks happily!","sniffs at the floor before offering a forward bark!","playfully barks!","looks like they are going to say something, only to let out a loud bark!","looks up like they are going to say something, only to pant contentedly.","pants heavily.","happily wags their tail and pants.","lays down on the floor and pants."];
list lText_Kitty=["meows happily!","plays with a ball of yarn before meowing!","playfully meows!","looks like they are going to say something, only to let out a cute meow!","looks up like they are going to say something, only to meows contentedly.","meows heavily.","lift their ears up and meows.","lays down on the floor and waits for the milk."];
string sText_Problem="CAPTAIN, SOMETHING WENT WRONG. CONTACT LIME";
string mumble(string mes, string severity)
{
    
    if (severity == "PUPPY"){
        integer random = (integer) llFrand (12.0); 
        mes=SobriquetURI(g_sWearerName)+" ";

        if (random == 0 | random == 1){
            mes+=llList2String(lText_Puppy, 0);
            PlaySound(BARK);
        } else if (random == 2 | random == 3){ /|/1
            mes+=llList2String(lText_Puppy, 1);
            PlaySound(BARK);
        } else if (random == 4 | random == 5){ /|/2
            mes+=llList2String(lText_Puppy, 2);
            PlaySound(BARK);
        } else if (random == 6 | random == 7){ /|/3
            mes+=llList2String(lText_Puppy, 3);
            PlaySound(BARK);
        } else if (random == 8){/|/4
            mes+=llList2String(lText_Puppy, 4);
            PlaySound(PANT);
        } else if (random == 9){/|/5
            mes+=llList2String(lText_Puppy, 5);
            PlaySound(PANT);
        } else if (random == 10){
            mes+=llList2String(lText_Puppy, 6);
            PlaySound(PANT);
        } else if (random == 11){
            mes+=llList2String(lText_Puppy, 7);
            PlaySound(PANT);
        } else if (random == 12){
            return sText_Problem;
        }
    }else
    if (severity == "KITTY"){
        integer random = (integer) llFrand (12.0); 
        mes=SobriquetURI(g_sWearerName);
        if (random == 0 | random == 1){
            mes+=llList2String(lText_Kitty, 0);
            PlaySound(MEOW);
        } else if (random == 2 | random == 3){
            mes+=llList2String(lText_Kitty, 1);
            PlaySound(MEOW);
        } else if (random == 4 | random == 5){
            mes+=llList2String(lText_Kitty, 2);
            PlaySound(MEOW);
        } else if (random == 6 | random == 7){
            mes+=llList2String(lText_Kitty, 3);
            PlaySound(MEOW);
        } else if (random == 8){
            mes+=llList2String(lText_Kitty, 4);
            PlaySound(MEOW2);
        } else if (random == 9){
            mes+=llList2String(lText_Kitty, 5);
            PlaySound(MEOW2);
        } else if (random == 10){
            mes+=llList2String(lText_Kitty, 6);
            PlaySound(MEOW2);
        } else if (random == 11){
            mes+=llList2String(lText_Kitty, 7);
            PlaySound(MEOW2); 
        } else if (random == 12){
            return sText_Problem;
        }
    }
    else{
        mes = mangleText(mes, severity);
    }
    
    return mes;
}

UserCommand(integer iNum, string sStr, key kID, integer remenu) {
    
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,sobriquet,17,12,29,130");
    }else
    if (llToLower(sStr) == "menu "+llToLower(g_sSubMenu) || llToLower(sStr) == llToLower(g_sSubMenu))
        SobriquetMenu(kID, iNum);
    else if (llSubStringIndex(sStr,"sobriquet message")==0) {
       return;
    }
    else if (llSubStringIndex(llToLower(sStr),llToLower(g_sSubMenu))==0) {
        sStr=llGetSubString(sStr,llStringLength(g_sSubMenu)+1,-1);
        SobriquetCommand(iNum,sStr, kID,remenu); 
    }
    
}
UnSetSobriquet(key kID){
    if(g_iState){
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet lifted.",kID);
    }
    g_iState=FALSE;
    llListenRemove(g_iListenHandle);
    llListenRemove(g_iListenHandle_emote);
    if(g_iRLVOn){
        StatusUpdater("rlv,0");
        llOwnerSay("@sendchat=y");
        llOwnerSay("@redirchat:"+(string)g_iChannel+"=rem");
        llOwnerSay("@rediremote:"+(string)g_iChannel_emote+"=rem");
    }
    /|/llMessageLinked(LINK_RLV,RLV_CMD,"clear","Sobriquet");
}

string SobriquetURI(string sName){
    return "[secondlife:/|/|/app/agent/"+(string)g_kWearer+"/inspect "+sName+"]";
} 

SobriquetMenu(key keyID, integer iAuth) {
    string sPrompt = "Speech Menu\n";
    list lMyButtons;
    sPrompt += "DUCT TAPE. Turning \"No! No! No!\" into\"Mmm-mmm-mmm!\"";
    sPrompt += "\nName: "+g_sWearerName;
    if (g_iEnforce) 
        lMyButtons+="☒ Enforce";
    else 
        lMyButtons+="☐ Enforce";
    if (g_iAuto) 
        lMyButtons+="☒ Auto";
    else 
        lMyButtons+="☐ Auto";
    if (g_iListenNoRLV) 
        lMyButtons+="☒ Channel";
    else 
        lMyButtons+="☐ Channel";
    lMyButtons += ["Rename"];
    
    sPrompt += "\nFilter is: ";
    sPrompt +=g_sMuffleSeverity;
    sPrompt +="\nNon-RLV Channel: "+(string)CHANNEL_SAY;
    sPrompt += "\n";
    lMyButtons += ["None", "Loose","Severe", "Extreme", "Mute", "PUPPY","KITTY"];
    
    
    if(llGetOwnerKey(keyID)==g_kWearer){
        lMyButtons+=["Channel"]; 
        if(g_iSilence){
            lMyButtons+=["Silence ☒"]; 
        }else{
            lMyButtons+=["Silence ☐"]; 
        }
    }else{
        string sNoAccess="\nYou have no right to change "+sStr_WEARERNAMES+" speech.";
        if(iAuth==CMD_TRUSTED&&iAccess<1){
            sPrompt += sNoAccess;
            lMyButtons=["-","-"];
        }else 
        if(iAuth==CMD_TRUSTED){
            sPrompt += "\nMake it worst for "+sStr_WEARERNAMES+".\nShow them who's the boss around here!";
        }else
        if(iAuth==CMD_GROUP&&iAccess<2){
            sPrompt += sNoAccess;
            lMyButtons=["-","-"];
        }else
        if(iAuth==CMD_GROUP){
            sPrompt += "\nInmate, you have no right to change "+sStr_WEARERNAMES+".\nChange it and you get PUNISHED.";
        }else
        if(iAuth==CMD_EVERYONE&&iAccess<3){
            sPrompt += sNoAccess;
            lMyButtons=["-","-"];
        }else
        if(iAuth==CMD_EVERYONE){
            sPrompt += "\nInmate "+sStr_WEARERNAMES+" deserves that title, all inmates do.";
        }
    }
    Dialog(keyID, sPrompt, lMyButtons, ["BACK"], 0, iAuth, "SobriquetMenu");

    
}
integer iEnforced_Failed;
SetSobriquet(key kID){
    if(!g_iRLVOn){
        StatusUpdater("rlv,-1");
        if(iEnforced_Failed==FALSE){
            iEnforced_Failed=TRUE;
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet enforced failed. No RLV detected",kID);
        }
        return;
    }
    iEnforced_Failed=FALSE;
    if (g_iOverideOn==TRUE||(g_iState&&((g_iMood<=0&&g_iAuto&&g_iEnforce==FALSE)||(g_iEnforce==FALSE&&(g_iMood<=0||g_iAuto==FALSE))))){
        UnSetSobriquet(kID);
    }else 
    if (g_iOverideOn==FALSE&&g_iState==FALSE&&((1<=g_iMood&&g_iAuto)||g_iEnforce)){
        if (g_sWearerName!=""){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet enforced.",kID);
            g_iChannel=2000000-(integer)llFrand(1000000);
            g_iListenHandle=llListen( g_iChannel, "", g_kWearer, "");
            g_iChannel_emote=2000000-(integer)llFrand(1000000);
            g_iListenHandle_emote=llListen( g_iChannel_emote, "", g_kWearer, "");
            StatusUpdater("rlv,1");
            llOwnerSay("@sendchat=n");
            llOwnerSay("@redirchat:"+(string)g_iChannel+"=add");
            llOwnerSay("@rediremote:"+(string)g_iChannel_emote+"=add");
            /|/llMessageLinked(LINK_RLV,RLV_CMD,"sendchat=n,redirchat:"+(string)g_iChannel+"=add,rediremote:"+(string)g_iChannel_emote+"=add","Sobriquet");
            g_iState=TRUE;
        } else {
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet: No name set.",kID);
            UnSetSobriquet(kID);
        }
    }
    SendReport();
}
SetRPTool(){ 
    if(CHANNEL_SAY==INMATE_CHANNEL||CHANNEL_SAY==PRIVATE_CHANNEL||CHANNEL_SAY==0||CHANNEL_SAY==g_iChannel||CHANNEL_SAY==g_iChannel_emote){
        CHANNEL_SAY=5;
    }
    llListenRemove(CHANNEL_SAY_HANDLER);
    if(g_iListenNoRLV){
        CHANNEL_SAY_HANDLER = llListen(CHANNEL_SAY,"",g_kWearer,"");
    }
}

integer iCustomName;
SetName(string sNewName, key kID){
    sNewName=llStringTrim(sNewName,STRING_TRIM);
    if (sNewName==""||sNewName==inmate_number) {
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+SobriquetURI(g_sWearerName)+"'s reset to "+SobriquetURI(inmate_number)+".",kID);
        g_sWearerName = inmate_number;
        iCustomName=FALSE;
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"Name","");
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sSobriquetToken+"Name","");
        
    }else{
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+SobriquetURI(g_sWearerName)+"'s new name is "+SobriquetURI(sNewName)+".",kID); 
        g_sWearerName = sNewName;
        iCustomName=TRUE;
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"Name="+sNewName,"");
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sSobriquetToken+"Name="+sNewName,"");
    }
}

SetChannel(integer iNewChannel){
    if(1<iNewChannel&&iNewChannel!=INMATE_CHANNEL&&iNewChannel!=PRIVATE_CHANNEL&&iNewChannel!=g_iChannel&&iNewChannel!=g_iChannel_emote){
        CHANNEL_SAY=iNewChannel;
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"channel="+(string)CHANNEL_SAY,"");
    }else{
        CHANNEL_SAY=5;
        llMessageLinked(LINK_SAVE,LM_SETTING_DELETE,g_sSobriquetToken,"");
        
    }
    SetRPTool();
}
Init(){
    g_kWearer = llGetOwner();
    g_sWearerName="";iCustomName=FALSE;
    SetRPTool();
    iEnforced_Failed=FALSE;
    g_lOverApps = [];
    g_iOverideOn = FALSE;    
}
default {
    on_rez(integer iParam) {
        Init();
    }

    state_entry() {
        Init();
    }

    listen(integer channel, string name, key id, string message) { 
        if((channel==CHANNEL_SAY&&!g_iListenNoRLV)||(channel!=CHANNEL_SAY&&channel!=g_iChannel_emote&&channel!=g_iChannel)){
            return;
        }
        
        string oldName = llGetObjectName();
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,g_sWearerName] );
        if(g_sMuffleSeverity != "NONE"||g_sMuffleSeverity != ""){
            if(channel==g_iChannel){
                message=mumble(message, g_sMuffleSeverity); 
            }else
            if(channel==g_iChannel_emote){
                message=parseEmote(message, g_sMuffleSeverity); 
            }else
            if(channel==CHANNEL_SAY){
                if (llSubStringIndex(llToLower(message),"/me")==0){
                    message=parseEmote(message, g_sMuffleSeverity); 
                }else{
                     message=mumble(message, g_sMuffleSeverity); 
                }
            }
        }
        llSay(0,message);
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,oldName] );
        llMessageLinked(LINK_THIS,SOBRIQUETSMS,"sobriquet message "+message,g_kWearer);  
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == RLV_OFF){
            UnSetSobriquet(g_kWearer);
            g_iRLVOn=FALSE;
        }else if (iNum == RLV_ON) {
            g_iRLVOn=TRUE;
            SetSobriquet(g_kWearer);
        }else if (iNum == RLV_REFRESH){
            SetSobriquet(g_kWearer);
        }else if (iNum == RLV_CLEAR){
            /|/UnSetSobriquet(g_kWearer);
        }else
        if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (llSubStringIndex(sToken,g_sAuthToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sAuthToken),-1);
                if(sToken=="iaccess") iAccess=(integer)sValue;
            }else 
            if (llSubStringIndex(sToken,g_sSobriquetToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sSobriquetToken),-1);
                if (sToken =="enforce" ){
                    g_iEnforce=(integer)sValue;
                    SetSobriquet(g_kWearer);
                }else if (sToken =="auto" ){
                    g_iAuto=(integer)sValue;
                    SetSobriquet(g_kWearer);
                }else if (sToken =="norlv" ){
                    g_iListenNoRLV=(integer)sValue;
                    SetRPTool();
                }                 
                else if (sToken =="Muffle" ){
                    g_sMuffleSeverity=sValue;
                }
                else if (sToken =="bark" ){
                    BARK=(key)sValue;
                }
                else if (sToken == "pant" ){
                    PANT=(key)sValue;
                }
                else if (sToken =="meow" ){
                    MEOW=(key)sValue;
                }
                else if (sToken == "meow2" ){
                    MEOW2=(key)sValue;
                }
                else if (sToken == "Name") {
                    if(sValue!=""){
                        g_sWearerName = sValue;iCustomName=TRUE;
                    }else{
                        iCustomName=FALSE;g_sWearerName=inmate_number;
                    }
                }else if (sToken =="channel") {
                     CHANNEL_SAY =(integer)sValue;
                     SetRPTool();
                }
            }else
            if (llSubStringIndex(sToken,g_sGlobalToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sGlobalToken),-1);
                
                /|*if (sToken =="InmateNumber") {
                    inmate_number=sValue;
                    if(g_sWearerName==""||iCustomName==FALSE){
                        g_sWearerName=inmate_number;
                    }
                }*|/
                if (sToken =="InmateSlot") {
                    if(g_iCharacterSlot!=(integer)sValue){
                        g_iCharacterSlot=(integer)sValue;
                        iCustomName=FALSE;
                        g_sWearerName=inmate_number;
                    }
                }
                if (sToken =="InmateName") {
                    inmate_number=sValue;
                    if(g_sWearerName==""||iCustomName==FALSE){
                        g_sWearerName=inmate_number;
                    }
                }
                else if (sToken == "inmateprefix"){
                    if (sValue != "") INMATE_CHANNEL=(integer)sValue;
                }
                else if (sToken == "channel") PRIVATE_CHANNEL = (integer)sValue;
                else if (sToken == "moodvalue"){
                    g_iMood=(integer)sValue;SetSobriquet(g_kWearer);
                }
            }
        }else if (iNum>=CMD_OWNER && iNum <= CMD_EVERYONE) UserCommand(iNum, sStr, kID, FALSE);
        else if (iNum == CMD_SAFEWORD || (sStr == "runaway" && iNum == CMD_OWNER)){
            g_iEnforce=FALSE;
            SetSobriquet(g_kWearer);
        }
        else if (iNum == APPOVERRIDE) {
            list lParams = llParseString2List(sStr, ["="], []);
            if (kID == "on"||llList2String(lParams, 1)=="on") {
                g_lOverApps += llList2String(lParams, 0);
                g_iOverideOn = TRUE;
                if (g_iState) {
                    llMessageLinked(LINK_DIALOG, NOTIFY, "0"+llList2String(lParams, 0)+" has been turned on and overrides Sobriquet.", g_kWearer);
                    SetSobriquet(g_kWearer);
                }
            } else if (kID == "off"||llList2String(lParams, 1)=="off") {
                integer index = llListFindList(g_lOverApps, [llList2String(lParams, 0)]);
                g_lOverApps = llDeleteSubList(g_lOverApps,index,index);
                g_iOverideOn = FALSE;
            }
        }
        else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                list lMenuParams = llParseStringKeepNulls(sStr, ["|"], []);
                key kAv = (key)llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                
                string sMenu=llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);                
                
                if (sMenu=="SobriquetMenu") {
                    if (sMessage == "BACK") llMessageLinked(LINK_ROOT, iAuth, "menu", kAv); 
                    else UserCommand(iAuth, "sobriquet "+sMessage, kAv, TRUE);
                } else if (sMenu=="RenameMenu") {
                    SetName(sMessage,kAv);
                    SobriquetMenu(kAv,iAuth);
                } else if (sMenu == "ChannelMenu") {
                    sMessage=llStringTrim(sMessage,STRING_TRIM);
                    SetChannel((integer)sMessage);
                    SobriquetMenu(kAv,iAuth);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex +3);  
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
        }
    }

    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) llResetScript();
    }
}

*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 12/29/2017 14:51:33
//mono























































string g_sSubMenu = "Sobriquet";
key     g_kWearer;  
string g_sWearerName;
string g_sSobriquetToken = "sobriquet_";

string g_sGlobalToken = "global_";
string inmate_number;
integer g_iCharacterSlot;


integer CMD_OWNER                   = 500;
integer CMD_TRUSTED                 = 501;
integer CMD_GROUP                 = 502;
integer CMD_EVERYONE                = 504;

integer CMD_SAFEWORD                = 510; 


integer APPOVERRIDE                  = 777;
integer SOBRIQUETSMS                  = 778;
integer g_iOverideOn;
list g_lOverApps;
integer NOTIFY = 1002;
integer LINK_DIALOG = 3;
integer LINK_RLV = 4;
integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE            = 2000; 

integer LM_SETTING_RESPONSE        = 2002;
integer LM_SETTING_DELETE          = 2003;

integer g_iRLVOn=0;
integer RLV_REFRESH = 6001;
integer RLV_CLEAR = 6002; 
integer RLV_OFF = 6100; 
integer RLV_ON = 6101; 

integer DIALOG                     = -9000;
integer DIALOG_RESPONSE            = -9001;
integer DIALOG_TIMEOUT             = -9002;

list g_lMenuIDs;
integer g_iMenuStride = 3;

integer g_iListenHandle;
integer g_iChannel;
integer g_iListenHandle_emote;
integer g_iChannel_emote;
integer g_iEnforce                 = 0;


integer PRIVATE_CHANNEL = 0;
integer INMATE_CHANNEL = 0;

string g_sMuffleSeverity = "NONE";
key BARK = "ab680371-f5fe-212a-b02f-15082b234eb8";
key PANT = "7de7ca8b-0582-0699-e0a1-e9ee72f23f8b";

key MEOW="df4e8f70-d9c0-72c4-ba2a-9b52ff5404c2";
key MEOW2="34489133-fadb-279f-f1fc-042213b02cc0";

integer CHANNEL_SAY_HANDLER;
integer CHANNEL_SAY=5;
integer g_iState;
integer g_iMood;
integer g_iSilence=0;
integer g_iAuto=1;
integer g_iListenNoRLV=1;
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;
string sReporterName="SOBRIQUET";

integer iAccess=1;
string g_sAuthToken = "auth_";
string sStr_WEARERNAMES="%WEARERNAMES%";

list lText_Puppy=["barks happily!","sniffs at the floor before offering a forward bark!","playfully barks!","looks like they are going to say something, only to let out a loud bark!","looks up like they are going to say something, only to pant contentedly.","pants heavily.","happily wags their tail and pants.","lays down on the floor and pants."];
list lText_Kitty=["meows happily!","plays with a ball of yarn before meowing!","playfully meows!","looks like they are going to say something, only to let out a cute meow!","looks up like they are going to say something, only to meows contentedly.","meows heavily.","lift their ears up and meows.","lays down on the floor and waits for the milk."];
string sText_Problem="CAPTAIN, SOMETHING WENT WRONG. CONTACT LIME";
integer iEnforced_Failed;

integer iCustomName;

MuffleSelected(integer remenu,integer iNum, key kID){
    llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"Muffle="+ g_sMuffleSeverity,"");
    llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sSobriquetToken+"Muffle="+ g_sMuffleSeverity,"");
    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Mumble severity set to: " + g_sMuffleSeverity,kID);  
    SendReport();
    if (remenu) SobriquetMenu(kID,iNum);
}
DeniedMessage(key kCmdGiver){
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"DENIED silly person. (Sobriquet)", kCmdGiver);
}
integer CheckCommandAuth(key kCmdGiver, integer iAuth) {
    if(iAuth==CMD_OWNER||llGetOwnerKey(kCmdGiver)==g_kWearer){
        return TRUE;
    }else
    if (iAuth==CMD_TRUSTED&&1<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_GROUP&&2<=iAccess){
        return TRUE;
    }else
    if (iAuth==CMD_EVERYONE&&iAccess=3){
        return TRUE;
    }
    DeniedMessage(kCmdGiver);
    return FALSE;
}
CantEnforce(key kID){
    llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"\nSobriquet cannot be enforced while these Apps are active: "+llDumpList2String(g_lOverApps,", ")+"\n",kID);
}

string mangleText(string mes, string severity)
{
    if (severity == "NONE"){
        return mes;
    }else
    if (severity == "PUPPY"){
        return "Woof!";
    } else if (severity == "KITTY"){
        return "MEOW!";
    } else if (severity == "MUTE"){
        return "...";
    } else {
        integer i;
        string sub = "";
        string rep = "";
        for (i = 0; i < llStringLength(mes); ++i)
        {
            sub = llGetSubString(mes, i, i);
            rep = "";
            
            if (severity == "LOOSE")
            {
                
                if (sub == "l")
                    rep = "w";
                else
                if (sub == "R" || sub == "L")
                    rep = "W";
                else
                if (sub == "s")
                    rep = "f";
                else
                if (sub == "S")
                    rep = "F";
                else
                if (sub == "t")
                    rep = "g";               
                else
                if (sub == "T")
                    rep = "G";                
            }
            
            else
            if (severity == "SEVERE")
            {
                if (sub == "a" || sub == "b" || sub == "j" || sub == "s" || sub == "v" || sub == "z")
                    rep = "r";
                else
                if (sub == "A" || sub == "B" || sub == "J" || sub == "S" || sub == "V" || sub == "Z")
                    rep = "R";
                else
                if (sub == "d" || sub == "k" || sub == "l" || sub == "w")
                    rep = "f";
                else
                if (sub == "D" || sub == "K" || sub == "L" || sub == "W")
                    rep = "F";            
                else
                if (sub == "g" || sub == "x")
                    rep = "n";
                else
                if (sub == "G" || sub == "x")
                    rep = "N";                
                else
                if (sub == "h" || sub == "i" || sub == "m" || sub == "u")
                    rep = "d";
                else
                if (sub == "H" || sub == "I" || sub == "M" || sub == "U")
                    rep = "D";                
                else
                if (sub == "q")
                    rep = "m";
                else
                if (sub == "Q")
                    rep = "M";                
            }
            else
            if (severity == "EXTREME" | severity == "TOTAL" | severity == "MUTE")
            {
                if (sub =="B" || sub =="D" || sub =="K" || sub =="T" || sub =="V") rep = "Mph";
                if (sub =="b" || sub =="d" || sub =="k" || sub =="t" || sub =="M") rep = "m";
                if (sub =="D" || sub =="J" || sub =="L" || sub =="Q" || sub =="R") rep = "M";
                if (sub =="d" || sub =="j" || sub =="l" || sub =="q" || sub =="r") rep = "ph";
                if (sub =="S") rep = "H";
                if (sub =="s") rep = "m";
                if (sub =="C") rep = "Mf";
                if (sub =="c") rep = "m";
                if (sub =="A" || sub =="E" || sub =="I" || sub =="O" || sub =="U") rep = "Mph";
                if (sub =="a" || sub =="e" || sub =="i" || sub =="o" || sub =="u") rep = "m";  
                if (sub =="C" || sub =="V" || sub =="N" || sub =="Y") rep = "Mh";
                if (sub =="c" || sub =="v" || sub =="n" || sub =="y") rep = "ph";
                if (sub =="W" || sub =="Y" || sub =="Z" || sub =="X") rep = "Mf";
                if (sub =="w" || sub =="y" || sub =="z" || sub =="x") rep = "f";
            } 
          
            if (rep != "")
            {
                mes = llDeleteSubString(mes, i, i);
                mes = llInsertString(mes, i, rep);
            }    
        }
        return mes;
    }
}
SobriquetCommand(integer iNum, string sStr, key kID, integer remenu) {
    string sStrLower=llToLower(sStr);
    sStr=llStringTrim(sStr, STRING_TRIM );
    list lParams = llParseString2List(sStr, [" "], []);  
    sStr="";
    string sCommand = llToLower(llList2String(lParams, 0));
    string sValue = llToLower(llList2String(lParams, 1));
    if (CheckCommandAuth(kID, iNum)==0 ) {
        return;
    }
    if(sCommand=="message"){
        return;
    }else
    if(sCommand=="on"||sCommand=="off"||sValue=="enforce"||sValue=="auto"||sCommand=="enforce"||sCommand=="auto"||sValue=="channel"){
        iEnforced_Failed=FALSE;
        if(sCommand=="☒"||sCommand=="off"){
            sCommand="0";
        }else
        if(sCommand=="☐"||sCommand=="on"){
            sCommand="1";
        }else
        if(sValue=="☒"||sValue=="off"){
            sValue="0";
        }else
        if(sValue=="☐"||sValue=="on"){
            sValue="1";
        }

        if ((sValue=="enforce"&&sCommand=="0")||(sCommand=="enforce"&&sValue=="0")) {
            g_iEnforce=FALSE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"enforce=0","");
        }else if ((sValue=="enforce"&&sCommand=="1")||(sCommand=="enforce"&&sValue=="1")) {
            if (g_iOverideOn) {
                CantEnforce(kID);
                return;
            }
            g_iEnforce=TRUE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"enforce=1","");
        }else
        if ((sValue=="auto"&&sCommand=="0")||(sCommand=="auto"&&sValue=="0")) {
            g_iAuto=FALSE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"auto=0","");
        }else if ((sValue=="auto"&&sCommand=="1")||(sCommand=="auto"&&sValue=="1")) {
            if (g_iOverideOn) {
                CantEnforce(kID);
                return;
            }
            g_iAuto=TRUE;
            SetSobriquet(kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"auto=1","");
        }else
        if ((sValue=="channel"&&sCommand=="0")||(sCommand=="channel"&&sValue=="0")) {
            g_iListenNoRLV=FALSE;
            SetRPTool();
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"norlv=0","");
        }else if ((sValue=="channel"&&sCommand=="1")||(sCommand=="channel"&&sValue=="1")) {
            g_iListenNoRLV=TRUE;
            SetRPTool();
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"norlv=1","");
        }
        if (remenu) SobriquetMenu(kID,iNum);
    }else 
    if (sCommand=="rename") {
        if(sValue==""){
            Dialog(kID, "Enter a name in the box and click Submit. Submitting an empty box resets the name. Remember, try to keep it to the theme.", [], [], 0, iNum, "RenameMenu");
        }else{
            SetName(llDumpList2String( llList2List( lParams, 1, -1 ), " " ),kID);
        }
    }else
    if(~llListFindList(["1","☐","none","puppy","kitty","loose","total","mute","extreme","severe"], [llToLower(sCommand)])){
        if (sCommand=="none"||sValue=="none"){
                g_sMuffleSeverity = "NONE";
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="puppy"||sValue=="puppy"){
                g_sMuffleSeverity = "PUPPY";
                MuffleSelected(remenu,iNum,kID);
        }else if (sCommand=="kitty"||sValue=="kitty"){
                g_sMuffleSeverity = "KITTY";
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="loose"||sValue=="loose"){
                g_sMuffleSeverity = "LOOSE";
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="total"||sValue=="total"){
                g_sMuffleSeverity = "TOTAL";        
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="mute"||sValue=="mute") {
                g_sMuffleSeverity = "MUTE";        
                MuffleSelected(remenu,iNum,kID);
        }else 
        if (sCommand=="extreme"||sValue=="extreme"){
                g_sMuffleSeverity = "EXTREME";
                MuffleSelected(remenu,iNum,kID);
        }else
        if (sCommand=="severe"||sValue=="severe"){
                g_sMuffleSeverity = "SEVERE";
                MuffleSelected(remenu,iNum,kID);
        } 
    }else 
    if (sCommand=="silence"){
        if(sValue=="☒"||sValue=="0"){
            g_iSilence=0;
        }else
        if(sValue=="☐"||sValue=="1"){
            g_iSilence=1;
        }else{
            g_iSilence=!g_iSilence;
        }
        if (remenu) SobriquetMenu(kID,iNum);
    }else
    if (sCommand=="check"){
        SendReport();
    }else 
    if (sCommand=="channel"){
        if(iNum==CMD_OWNER||kID==g_kWearer){
            if(sValue==""||sValue==" "){
                Dialog(kID, "Enter a number for Non-RLV channel in the box and click Submit. Cant be channels that it listening already or public(0) channel. Submitting an empty box resets the channel.", [], [], 0, iNum, "ChannelMenu");
            }else{
                SetChannel((integer)sValue);
            }
        }else DeniedMessage(kID);
    }else 
    if (sCommand=="☒"){
        if (remenu) SobriquetMenu(kID,iNum);
    }    
}
SendReport(){
    StatusUpdater("state,"+(string)g_iState);
    StatusUpdater("enforce,"+(string)g_iEnforce);
    StatusUpdater("channel,enabled,"+(string)g_iListenNoRLV);
    StatusUpdater("channel,say,"+(string)CHANNEL_SAY);
    StatusUpdater("auto,"+(string)g_iAuto);
    StatusUpdater("muzzle,"+g_sMuffleSeverity);
    StatusUpdater("name,"+g_sWearerName);
    StatusUpdater("redirect_channel,"+(string)g_iChannel);
    StatusUpdater("redirect_emote,"+(string)g_iChannel_emote);
    StatusUpdater("silence,"+(string)g_iSilence);
}
PlaySound(key kSound){
    if(!g_iSilence){
        llPlaySound(kSound,1.0);
    }
}

Dialog(key kID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName) {
    key kMenuID = llGenerateKey();
    llMessageLinked(LINK_DIALOG, DIALOG, (string)kID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [kID]);
    if (~iIndex) g_lMenuIDs = llListReplaceList(g_lMenuIDs, [kID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    else g_lMenuIDs += [kID, kMenuID, sName];
}

string parseEmote(string mes, string severity)
{
    string unparsedMessage = mes;
    string parsedMessage = "";
    integer quoteIndex = llSubStringIndex(unparsedMessage, "\"");
    
    while(~quoteIndex)
    {
        if(quoteIndex != 0) parsedMessage += llGetSubString(unparsedMessage, 0, quoteIndex - 1);
        if(quoteIndex != llStringLength(unparsedMessage) - 1)
            unparsedMessage = llGetSubString(unparsedMessage, quoteIndex + 1, -1);
        else
            unparsedMessage = "";
        
        if(llStringLength(unparsedMessage) != 0)
        {
            quoteIndex = llSubStringIndex(unparsedMessage, "\"");
            if(quoteIndex == 0)
            {
                parsedMessage += "\"\"";
                if(llStringLength(unparsedMessage) != 1)
                    unparsedMessage = llGetSubString(unparsedMessage, quoteIndex + 1, -1);
                else
                    unparsedMessage = "";
            }
            else if(~quoteIndex)
            {
                string speachText = llGetSubString(unparsedMessage, 0, quoteIndex - 1);
                parsedMessage += "\"" + mangleText(speachText, severity) + "\"";
                
                if(quoteIndex != llStringLength(unparsedMessage) - 1)
                    unparsedMessage = llGetSubString(unparsedMessage, quoteIndex + 1, -1);
                else
                    unparsedMessage = "";
            }
            else
            {
                parsedMessage += "\"" + mangleText(unparsedMessage, severity) + "\"";
                unparsedMessage = "";
            }
        }
        
        quoteIndex = llSubStringIndex(unparsedMessage, "\"");
    }
    parsedMessage += unparsedMessage;
    
    return parsedMessage;
}
string mumble(string mes, string severity)
{
    
    if (severity == "PUPPY"){
        integer random = (integer) llFrand (12.0); 
        mes=SobriquetURI(g_sWearerName)+" ";

        if (random == 0 | random == 1){
            mes+=llList2String(lText_Puppy, 0);
            PlaySound(BARK);
        } else if (random == 2 | random == 3){ 
            mes+=llList2String(lText_Puppy, 1);
            PlaySound(BARK);
        } else if (random == 4 | random == 5){ 
            mes+=llList2String(lText_Puppy, 2);
            PlaySound(BARK);
        } else if (random == 6 | random == 7){ 
            mes+=llList2String(lText_Puppy, 3);
            PlaySound(BARK);
        } else if (random == 8){
            mes+=llList2String(lText_Puppy, 4);
            PlaySound(PANT);
        } else if (random == 9){
            mes+=llList2String(lText_Puppy, 5);
            PlaySound(PANT);
        } else if (random == 10){
            mes+=llList2String(lText_Puppy, 6);
            PlaySound(PANT);
        } else if (random == 11){
            mes+=llList2String(lText_Puppy, 7);
            PlaySound(PANT);
        } else if (random == 12){
            return sText_Problem;
        }
    }else
    if (severity == "KITTY"){
        integer random = (integer) llFrand (12.0); 
        mes=SobriquetURI(g_sWearerName);
        if (random == 0 | random == 1){
            mes+=llList2String(lText_Kitty, 0);
            PlaySound(MEOW);
        } else if (random == 2 | random == 3){
            mes+=llList2String(lText_Kitty, 1);
            PlaySound(MEOW);
        } else if (random == 4 | random == 5){
            mes+=llList2String(lText_Kitty, 2);
            PlaySound(MEOW);
        } else if (random == 6 | random == 7){
            mes+=llList2String(lText_Kitty, 3);
            PlaySound(MEOW);
        } else if (random == 8){
            mes+=llList2String(lText_Kitty, 4);
            PlaySound(MEOW2);
        } else if (random == 9){
            mes+=llList2String(lText_Kitty, 5);
            PlaySound(MEOW2);
        } else if (random == 10){
            mes+=llList2String(lText_Kitty, 6);
            PlaySound(MEOW2);
        } else if (random == 11){
            mes+=llList2String(lText_Kitty, 7);
            PlaySound(MEOW2); 
        } else if (random == 12){
            return sText_Problem;
        }
    }
    else{
        mes = mangleText(mes, severity);
    }
    
    return mes;
}

UserCommand(integer iNum, string sStr, key kID, integer remenu) {
    
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,sobriquet,17,12,29,130");
    }else
    if (llToLower(sStr) == "menu "+llToLower(g_sSubMenu) || llToLower(sStr) == llToLower(g_sSubMenu))
        SobriquetMenu(kID, iNum);
    else if (llSubStringIndex(sStr,"sobriquet message")==0) {
       return;
    }
    else if (llSubStringIndex(llToLower(sStr),llToLower(g_sSubMenu))==0) {
        sStr=llGetSubString(sStr,llStringLength(g_sSubMenu)+1,-1);
        SobriquetCommand(iNum,sStr, kID,remenu); 
    }
    
}
UnSetSobriquet(key kID){
    if(g_iState){
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet lifted.",kID);
    }
    g_iState=FALSE;
    llListenRemove(g_iListenHandle);
    llListenRemove(g_iListenHandle_emote);
    if(g_iRLVOn){
        StatusUpdater("rlv,0");
        llOwnerSay("@sendchat=y");
        llOwnerSay("@redirchat:"+(string)g_iChannel+"=rem");
        llOwnerSay("@rediremote:"+(string)g_iChannel_emote+"=rem");
    }
    
}
StatusUpdater(string sStr){
    llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,sReporterName+","+sStr);
}

string SobriquetURI(string sName){
    return "[secondlife:///app/agent/"+(string)g_kWearer+"/inspect "+sName+"]";
} 

SobriquetMenu(key keyID, integer iAuth) {
    string sPrompt = "Speech Menu\n";
    list lMyButtons;
    sPrompt += "DUCT TAPE. Turning \"No! No! No!\" into\"Mmm-mmm-mmm!\"";
    sPrompt += "\nName: "+g_sWearerName;
    if (g_iEnforce) 
        lMyButtons+="☒ Enforce";
    else 
        lMyButtons+="☐ Enforce";
    if (g_iAuto) 
        lMyButtons+="☒ Auto";
    else 
        lMyButtons+="☐ Auto";
    if (g_iListenNoRLV) 
        lMyButtons+="☒ Channel";
    else 
        lMyButtons+="☐ Channel";
    lMyButtons += ["Rename"];
    
    sPrompt += "\nFilter is: ";
    sPrompt +=g_sMuffleSeverity;
    sPrompt +="\nNon-RLV Channel: "+(string)CHANNEL_SAY;
    sPrompt += "\n";
    lMyButtons += ["None", "Loose","Severe", "Extreme", "Mute", "PUPPY","KITTY"];
    
    
    if(llGetOwnerKey(keyID)==g_kWearer){
        lMyButtons+=["Channel"]; 
        if(g_iSilence){
            lMyButtons+=["Silence ☒"]; 
        }else{
            lMyButtons+=["Silence ☐"]; 
        }
    }else{
        string sNoAccess="\nYou have no right to change "+sStr_WEARERNAMES+" speech.";
        if(iAuth==CMD_TRUSTED&&iAccess<1){
            sPrompt += sNoAccess;
            lMyButtons=["-","-"];
        }else 
        if(iAuth==CMD_TRUSTED){
            sPrompt += "\nMake it worst for "+sStr_WEARERNAMES+".\nShow them who's the boss around here!";
        }else
        if(iAuth==CMD_GROUP&&iAccess<2){
            sPrompt += sNoAccess;
            lMyButtons=["-","-"];
        }else
        if(iAuth==CMD_GROUP){
            sPrompt += "\nInmate, you have no right to change "+sStr_WEARERNAMES+".\nChange it and you get PUNISHED.";
        }else
        if(iAuth==CMD_EVERYONE&&iAccess<3){
            sPrompt += sNoAccess;
            lMyButtons=["-","-"];
        }else
        if(iAuth==CMD_EVERYONE){
            sPrompt += "\nInmate "+sStr_WEARERNAMES+" deserves that title, all inmates do.";
        }
    }
    Dialog(keyID, sPrompt, lMyButtons, ["BACK"], 0, iAuth, "SobriquetMenu");

    
}
SetSobriquet(key kID){
    if(!g_iRLVOn){
        StatusUpdater("rlv,-1");
        if(iEnforced_Failed==FALSE){
            iEnforced_Failed=TRUE;
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet enforced failed. No RLV detected",kID);
        }
        return;
    }
    iEnforced_Failed=FALSE;
    if (g_iOverideOn==TRUE||(g_iState&&((g_iMood<=0&&g_iAuto&&g_iEnforce==FALSE)||(g_iEnforce==FALSE&&(g_iMood<=0||g_iAuto==FALSE))))){
        UnSetSobriquet(kID);
    }else 
    if (g_iOverideOn==FALSE&&g_iState==FALSE&&((1<=g_iMood&&g_iAuto)||g_iEnforce)){
        if (g_sWearerName!=""){
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet enforced.",kID);
            g_iChannel=2000000-(integer)llFrand(1000000);
            g_iListenHandle=llListen( g_iChannel, "", g_kWearer, "");
            g_iChannel_emote=2000000-(integer)llFrand(1000000);
            g_iListenHandle_emote=llListen( g_iChannel_emote, "", g_kWearer, "");
            StatusUpdater("rlv,1");
            llOwnerSay("@sendchat=n");
            llOwnerSay("@redirchat:"+(string)g_iChannel+"=add");
            llOwnerSay("@rediremote:"+(string)g_iChannel_emote+"=add");
            
            g_iState=TRUE;
        } else {
            llMessageLinked(LINK_DIALOG,NOTIFY,"1"+"Sobriquet: No name set.",kID);
            UnSetSobriquet(kID);
        }
    }
    SendReport();
}
SetRPTool(){ 
    if(CHANNEL_SAY==INMATE_CHANNEL||CHANNEL_SAY==PRIVATE_CHANNEL||CHANNEL_SAY==0||CHANNEL_SAY==g_iChannel||CHANNEL_SAY==g_iChannel_emote){
        CHANNEL_SAY=5;
    }
    llListenRemove(CHANNEL_SAY_HANDLER);
    if(g_iListenNoRLV){
        CHANNEL_SAY_HANDLER = llListen(CHANNEL_SAY,"",g_kWearer,"");
    }
}
SetName(string sNewName, key kID){
    sNewName=llStringTrim(sNewName,STRING_TRIM);
    if (sNewName==""||sNewName==inmate_number) {
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+SobriquetURI(g_sWearerName)+"'s reset to "+SobriquetURI(inmate_number)+".",kID);
        g_sWearerName = inmate_number;
        iCustomName=FALSE;
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"Name","");
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sSobriquetToken+"Name","");
        
    }else{
        llMessageLinked(LINK_DIALOG,NOTIFY,"1"+SobriquetURI(g_sWearerName)+"'s new name is "+SobriquetURI(sNewName)+".",kID); 
        g_sWearerName = sNewName;
        iCustomName=TRUE;
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"Name="+sNewName,"");
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE,g_sSobriquetToken+"Name="+sNewName,"");
    }
}

SetChannel(integer iNewChannel){
    if(1<iNewChannel&&iNewChannel!=INMATE_CHANNEL&&iNewChannel!=PRIVATE_CHANNEL&&iNewChannel!=g_iChannel&&iNewChannel!=g_iChannel_emote){
        CHANNEL_SAY=iNewChannel;
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSobriquetToken+"channel="+(string)CHANNEL_SAY,"");
    }else{
        CHANNEL_SAY=5;
        llMessageLinked(LINK_SAVE,LM_SETTING_DELETE,g_sSobriquetToken,"");
        
    }
    SetRPTool();
}
Init(){
    g_kWearer = llGetOwner();
    g_sWearerName="";iCustomName=FALSE;
    SetRPTool();
    iEnforced_Failed=FALSE;
    g_lOverApps = [];
    g_iOverideOn = FALSE;    
}
default {
    on_rez(integer iParam) {
        Init();
    }

    state_entry() {
        Init();
    }

    listen(integer channel, string name, key id, string message) { 
        if((channel==CHANNEL_SAY&&!g_iListenNoRLV)||(channel!=CHANNEL_SAY&&channel!=g_iChannel_emote&&channel!=g_iChannel)){
            return;
        }
        
        string oldName = llGetObjectName();
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,g_sWearerName] );
        if(g_sMuffleSeverity != "NONE"||g_sMuffleSeverity != ""){
            if(channel==g_iChannel){
                message=mumble(message, g_sMuffleSeverity); 
            }else
            if(channel==g_iChannel_emote){
                message=parseEmote(message, g_sMuffleSeverity); 
            }else
            if(channel==CHANNEL_SAY){
                if (llSubStringIndex(llToLower(message),"/me")==0){
                    message=parseEmote(message, g_sMuffleSeverity); 
                }else{
                     message=mumble(message, g_sMuffleSeverity); 
                }
            }
        }
        llSay(0,message);
        llSetLinkPrimitiveParamsFast( LINK_THIS, [  PRIM_NAME ,oldName] );
        llMessageLinked(LINK_THIS,SOBRIQUETSMS,"sobriquet message "+message,g_kWearer);  
    }
    
    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == RLV_OFF){
            UnSetSobriquet(g_kWearer);
            g_iRLVOn=FALSE;
        }else if (iNum == RLV_ON) {
            g_iRLVOn=TRUE;
            SetSobriquet(g_kWearer);
        }else if (iNum == RLV_REFRESH){
            SetSobriquet(g_kWearer);
        }else if (iNum == RLV_CLEAR){
            
        }else
        if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (llSubStringIndex(sToken,g_sAuthToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sAuthToken),-1);
                if(sToken=="iaccess") iAccess=(integer)sValue;
            }else 
            if (llSubStringIndex(sToken,g_sSobriquetToken)==0){
                sToken=llGetSubString(sToken,llStringLength(g_sSobriquetToken),-1);
                if (sToken =="enforce" ){
                    g_iEnforce=(integer)sValue;
                    SetSobriquet(g_kWearer);
                }else if (sToken =="auto" ){
                    g_iAuto=(integer)sValue;
                    SetSobriquet(g_kWearer);
                }else if (sToken =="norlv" ){
                    g_iListenNoRLV=(integer)sValue;
                    SetRPTool();
                }        