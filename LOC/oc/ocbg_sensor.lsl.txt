//start_unprocessed_text
/*/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/
/|/                                                                          /|/
/|/              ____                   ______      ____                     /|/
/|/             / __ \____  ___  ____  / ____/___  / / /___ ______           /|/
/|/            / / / / __ \/ _ \/ __ \/ /   / __ \/ / / __ `/ ___/           /|/
/|/           / /_/ / /_/ /  __/ / / / /___/ /_/ / / / /_/ / /               /|/
/|/           \____/ .___/\___/_/ /_/\____/\____/_/_/\__,_/_/                /|/
/|/               /_/                                                        /|/
/|/                                                                          /|/
/|/                        ,^~~~-.         .-~~~"-.                          /|/
/|/                       :  .--. \       /  .--.  \                         /|/
/|/                       : (    .-`<^~~~-: :    )  :                        /|/
/|/                       `. `-,~            ^- '  .'                        /|/
/|/                         `-:                ,.-~                          /|/
/|/                          .'                  `.                          /|/
/|/                         ,'   @   @            |                          /|/
/|/                         :    __               ;                          /|/
/|/                      ...{   (__)          ,----.                         /|/
/|/                     /   `.              ,' ,--. `.                       /|/
/|/                    |      `.,___   ,      :    : :                       /|/
/|/                    |     .'    ~~~~       \    / :                       /|/
/|/                     \.. /               `. `--' .'                       /|/
/|/                        |                  ~----~                         /|/
/|/                           Dialog - 170323.2                              /|/

/|/ ------------------------------------------------------------------------ /|/
/|/  Copyright (c) 2007 - 2017 Schmobag Hogfather, Nandana Singh,            /|/
/|/  Cleo Collins, Satomi Ahn, Joy Stipe, Wendy Starfall, littlemousy,       /|/
/|/  Romka Swallowtail, Garvin Twine et al.                                  /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script is free software: you can redistribute it and/or modify     /|/
/|/  it under the terms of the GNU General Public License as published       /|/
/|/  by the Free Software Foundation, version 2.                             /|/
/|/                                                                          /|/
/|/  This script is distributed in the hope that it will be useful,          /|/
/|/  but WITHOUT ANY WARRANTY; without even the implied warranty of          /|/
/|/  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            /|/
/|/  GNU General Public License for more details.                            /|/
/|/                                                                          /|/
/|/  You should have received a copy of the GNU General Public License       /|/
/|/  along with this script; if not, see www.gnu.org/licenses/gpl-2.0        /|/
/|/ ------------------------------------------------------------------------ /|/
/|/  This script and any derivatives based on it must remain "full perms".   /|/
/|/                                                                          /|/
/|/  "Full perms" means maintaining MODIFY, COPY, and TRANSFER permissions   /|/
/|/  in Second Life(R), OpenSimulator and the Metaverse.                     /|/
/|/                                                                          /|/
/|/  If these platforms should allow more fine-grained permissions in the    /|/
/|/  future, then "full perms" will mean the most permissive possible set    /|/
/|/  of permissions allowed by the platform.                                 /|/
/|/ ------------------------------------------------------------------------ /|/
/|/       github.com/VirtualDisgrace/opencollar/tree/master/src/collar       /|/
/|/ ------------------------------------------------------------------------ /|/
/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/

/|/an adaptation of Schmobag Hogfather's SchmoDialog script
/|/MESSAGE MAP
integer CMD_ZERO = 0;
integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
integer CMD_EVERYONE = 504;
/|/integer CMD_RLV_RELAY = 507;
/|/integer CMD_SAFEWORD = 510;
/|/integer CMD_RELAY_SAFEWORD = 511;
integer CMD_BLOCKED = 520;




integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer REBOOT = -1000;
integer LOADPIN = -1904;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_REQUEST = 2001;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer DIALOG = -9010;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
integer SENSORDIALOG = -9003;

integer NOTIFY = 1002;
integer NOTIFY_OWNERS=1003;
integer SAY = 1004;

integer SPECIAL_NOTIFY = 1005;
integer SPECIAL_SAY = 1007;

integer g_iPagesize = 12;
string MORE = "►";
string PREV = "◄";
string UPMENU = "BACK"; /|/ string to identify the UPMENU button in the utility lButtons

string BLANK = "-";
integer g_iTimeOut = 300;
integer g_iReapeat = 5;/|/how often the timer will go off, in seconds

list g_lMenus;

list g_lRemoteMenus;
integer g_iStrideLength = 12;

/|/ List of user keys who opt-out of chat-spammage, ie chose "off"
list MRSBUN = []; /|/ blatant monty python reference - list of those who do not like spam
string SPAMSWITCH = "verbose"; /|/ lowercase chat-command token

key g_kWearer;
string g_sSettingToken = "dialog_";
string g_sGlobalToken = "global_";

list g_lSensorDetails;
integer g_bSensorLock;
integer g_iSensorTimeout;
integer g_iSelectAviMenu; /|/added to show URIs in menus june 2015 Otto(garvin.twine)
integer g_iColorMenu;

list g_lColors = [
"Red",<1.00000, 0.00000, 0.00000>,
"Green",<0.00000, 1.00000, 0.00000>,
"Blue",<0.00000, 0.50196, 1.00000>,
"Yellow",<1.00000, 1.00000, 0.00000>,
"Pink",<1.00000, 0.50588, 0.62353>,
"Brown",<0.24314, 0.14902, 0.07059>,
"Purple",<0.62353, 0.29020, 0.71765>,
"Black",<0.00000, 0.00000, 0.00000>,
"White",<1.00000, 1.00000, 1.00000>,
"Barbie",<0.91373, 0.00000, 0.34510>,
"Orange",<0.96078, 0.60784, 0.00000>,
"Toad",<0.25098, 0.25098, 0.00000>,
"Khaki",<0.62745, 0.50196, 0.38824>,
"Pool",<0.14902, 0.88235, 0.94510>,
"Blood",<0.42353, 0.00000, 0.00000>,
"Gray",<0.70588, 0.70588, 0.70588>,
"Anthracite",<0.08627, 0.08627, 0.08627>,
"Midnight",<0.00000, 0.10588, 0.21176>
];
/|*integer g_iProfiled=1;
Debug(string sStr) {
    /|/if you delete the first /|/ from the preceeding and following  lines,
    /|/  profiling is off, debug is off, and the compiler will remind you to
    /|/  remove the debug calls from the code, we're back to production mode
    if (!g_iProfiled){
        g_iProfiled=1;
        llScriptProfiler(1);
    }
    llOwnerSay(llGetScriptName() + "(min free:"+(string)(llGetMemoryLimit()-llGetSPMaxMemory())+")["+(string)llGetFreeMemory()+"] :\n" + sStr);
}*|/
integer g_iNoLink;
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;

Notify(key kID, string sMsg, integer iAlsoNotifyWearer) {
     llMessageLinked(LINK_THIS, NOTIFY,(string)iAlsoNotifyWearer+sMsg , kID);
}

Say(string sMsg, integer iWhisper) {
    llMessageLinked(LINK_THIS, SAY,(string)iWhisper+sMsg , "");
}
string Objectscan(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    integer index=0;
    if((string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_GROUP])!="ce9356ec-47b1-5690-d759-04d8c8921476"){
        return llGetDisplayName(kID);
    }
    while(index<numOfAttachments){
        string name=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_NAME]);
        string creator=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_CREATOR]);
        if ((llSubStringIndex(name,"P-6") >= 0)&&llStringLength(name)==7&&creator=="2a9164eb-f402-4319-b7b3-92b09f9b69aa"){
            return name;
        }
        ++index;
    }
    return llGetDisplayName(kID);
}
string SobriquetURI(string sName){
    if(g_iNoLink){
        return sName;
    }else{
         return "[secondlife:/|/|/app/agent/"+(string)g_kWearer+"/inspect "+sName+"]";
    }
   
}
string NameURI(key kID){
    if(kID==NULL_KEY){
        return "(null_key)";
    }
    if(g_iNoLink){
        if (llGetAgentSize(kID))
            return Objectscan(kID);
        else /|/llEscapeURL
            return llKey2Name(kID);
    }else{
        if (llGetAgentSize(kID))
            return "[secondlife:/|/|/app/agent/"+(string)kID+"/inspect "+llEscapeURL(Objectscan(kID))+"]";
        else
            return "secondlife:/|/|/app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
    } 
}

/|/"%NAME@","@NAME%"
/|/"%NAMES@","@NAMES%"

string SubstitudeVars(string sMsg) {
    return sMsg;
}


Dialog(key kRecipient, string sPrompt, list lMenuItems, list lUtilityButtons, integer iPage, key kID, integer iWithNums, integer iAuth,string extraInfo)
{
    /|/calculate page start and end
    integer iNumitems = llGetListLength(lMenuItems);
    integer iStart = 0;
    integer iMyPageSize = g_iPagesize - llGetListLength(lUtilityButtons);
    if (g_iSelectAviMenu) { /|/we have to reduce buttons due to text length limitations we reach with URI
        iMyPageSize = iMyPageSize-3; /|/ june 2015 Otto(garvin.twine)
        if (iNumitems == 8) iMyPageSize = iMyPageSize-1;
        /|/special cases again are 7 or 8 avis where we have to reduce "active" buttons again
        else if (iNumitems == 7) iMyPageSize = iMyPageSize-2;
    }
    string sPagerPrompt;
    if (iNumitems > iMyPageSize) {
        iMyPageSize=iMyPageSize-2;/|/we'll use two slots for the MORE and PREV button, so shrink the page accordingly

        integer numPages=(iNumitems-1)/iMyPageSize;
        if (iPage>numPages)iPage=0;
        else if (iPage<0) iPage=numPages;

        iStart = iPage * iMyPageSize;
        /|/multi page menu
        sPagerPrompt = sPagerPrompt + "\nPage "+(string)(iPage+1)+"/"+(string)(numPages+1);
    }
    integer iEnd = iStart + iMyPageSize - 1;
    if (iEnd >= iNumitems) iEnd = iNumitems - 1;
    integer iPagerPromptLen = GetStringBytes(sPagerPrompt);
    /|/Debug("start at "+(string)iStart+", end at "+(string)iEnd);

    /|/if we've been told to, calculate numbering from buttons supplied, inlined ButtonDigits function
    if (iWithNums == -1) {
        integer iNumButtons=llGetListLength(lMenuItems);
        iWithNums=llStringLength((string)iNumButtons);
        /|/if ( iNumButtons < 10 ) iWithNums = 1;
        /|/else if (iNumButtons < 100) iWithNums = 2;
        /|/else if (iNumButtons < 1000) iWithNums = 3; /|/ more than 100 is unlikely, considering the size of a LM
        while (iNumButtons--) {
            if (GetStringBytes(llList2String(lMenuItems,iNumButtons))>18) {
                jump longButtonName;  /|/one of the options is too long for a button, thats all we need to know.
            }
        }
        iWithNums=0;
        @longButtonName;
    }
    /|/Debug("numbered list:"+(string)iWithNums);
    /|/ create list of buttons to use, and number them if needed
    string sNumberedButtons;
    integer iNBPromptlen;
    list lButtons;  /|/list of buttons to be used in the dialog, sliced by page and maybe with numbers added, not the lMenuItems we were supplied
    if (iWithNums) { /|/ put numbers in front of buttons: "00 Button1", "01 Button2", ...
        integer iCur;
        sNumberedButtons="\n"; /|/let's make this a linebreak instead
        for (iCur = iStart; iCur <= iEnd; ++iCur) {
            string sButton = llList2String(lMenuItems, iCur);
            if ((key)sButton) {
                /|/fixme: inlined single use key2name function
                if (g_iSelectAviMenu) sButton = NameURI((key)sButton);
                else if (llGetDisplayName((key)sButton)) sButton=llGetDisplayName((key)sButton);
                else sButton=llKey2Name((key)sButton);
            }
            /|/inlined single use Integer2String function
            string sButtonNumber = (string)iCur;

            while (llStringLength(sButtonNumber)<iWithNums)
               sButtonNumber = "0"+sButtonNumber;
            sButton=sButtonNumber + " " + sButton;
            /|/Debug("ButtonNumber="+sButtonNumber);

            sNumberedButtons+=sButton+"\n";
            sButton = TruncateString(sButton, 24);
            if(g_iSelectAviMenu) sButton = sButtonNumber;
            lButtons += [sButton];
        }
        iNBPromptlen=GetStringBytes(sNumberedButtons);
    } else if (iNumitems > iMyPageSize) lButtons = llList2List(lMenuItems, iStart, iEnd);
    else  lButtons = lMenuItems;
    /|/Debug("buttons:"+llDumpList2String(lButtons,","));
    sPrompt = SubstitudeVars(sPrompt);
    /|/make a prompt small enough to fit in the 512 limit for dialogs, prepare overflow for chat message
    integer iPromptlen=GetStringBytes(sPrompt);
    string sThisPrompt;
    string sThisChat;
    if (iPromptlen + iNBPromptlen + iPagerPromptLen < 512) /|/we can fit it all in the dialog
        sThisPrompt = sPrompt + sNumberedButtons + sPagerPrompt ;
    else if (iPromptlen + iPagerPromptLen < 512) { /|/we can fit in the whole prompt and pager info, but not the buttons list
        if (iPromptlen + iPagerPromptLen < 459) {
            sThisPrompt = sPrompt + "\nPlease check nearby chat for button descriptions.\n" + sPagerPrompt;
        } else
            sThisPrompt = sPrompt + sPagerPrompt;
        sThisChat = sNumberedButtons;
    } else {  /|/can't fit prompt and pager, so send truncated prompt, pager and chat full prompt and button list
        sThisPrompt=TruncateString(sPrompt,510-iPagerPromptLen)+sPagerPrompt;
        sThisChat = sPrompt+sNumberedButtons;
    }
    /|/Debug("prompt:"+sThisPrompt);
    /|/unless asked not to, chat anything that wouldn't fit to menu user
    if (! ~llListFindList(MRSBUN, [kRecipient])){
        integer iRemainingChatLen;
        while (iRemainingChatLen=llStringLength(sThisChat)){ /|/capture and compare in one go
            if(iRemainingChatLen<1015) {
                Notify(kRecipient,sThisChat,FALSE); /|/if its short enough, IM it in one chunk
                
                sThisChat="";
            } else {
                string sMessageChunk=TruncateString(sPrompt,1015);
                Notify(kRecipient,sMessageChunk,FALSE);
                sThisChat=llGetSubString(sThisChat,llStringLength(sMessageChunk),-1);
            }
        }
    }
    /|/Debug("chat prompt:"+sThisChat);
    integer iChan=llRound(llFrand(10000000)) + 100000;
    while (~llListFindList(g_lMenus, [iChan])) iChan=llRound(llFrand(10000000)) + 100000;
    integer iListener = llListen(iChan, "", kRecipient, "");
    /|/LED ON
    llSetLinkPrimitiveParamsFast(LINK_THIS,[PRIM_FULLBRIGHT,ALL_SIDES,TRUE,PRIM_BUMP_SHINY,ALL_SIDES,PRIM_SHINY_NONE,PRIM_BUMP_NONE,PRIM_GLOW,ALL_SIDES,0.4]);
    /|/send dialog to viewer
    if (llGetListLength(lMenuItems+lUtilityButtons)){
        list lNavButtons;
        if (iNumitems > iMyPageSize) lNavButtons=[PREV,MORE];
        llDialog(kRecipient, sThisPrompt, PrettyButtons(lButtons, lUtilityButtons, lNavButtons), iChan);
    }
    else llTextBox(kRecipient, sThisPrompt, iChan);
    /|/LED OFF
    llSetLinkPrimitiveParamsFast(LINK_THIS,[PRIM_FULLBRIGHT,ALL_SIDES,FALSE,PRIM_BUMP_SHINY,ALL_SIDES,PRIM_SHINY_HIGH,PRIM_BUMP_NONE,PRIM_GLOW,ALL_SIDES,0.0]);
    /|/set dialog timeout
    llSetTimerEvent(g_iReapeat);
    integer ts = llGetUnixTime() + g_iTimeOut;

    /|/write entry in tracking list
    g_lMenus += [iChan, kID, iListener, ts, kRecipient, sPrompt, llDumpList2String(lMenuItems, "|"), llDumpList2String(lUtilityButtons, "|"), iPage, iWithNums, iAuth,extraInfo];
    /|/Debug("Made Dialog");
}

integer GetStringBytes(string sStr) {
    sStr = llEscapeURL(sStr);
    integer l = llStringLength(sStr);
    list lAtoms = llParseStringKeepNulls(sStr, ["%"], []);
    return l - 2 * llGetListLength(lAtoms) + 2;
}

string TruncateString(string sStr, integer iBytes) {
    sStr = llEscapeURL(sStr);
    integer j = 0;
    string sOut;
    integer l = llStringLength(sStr);
    for (; j < l; ++j) {
        string c = llGetSubString(sStr, j, j);
        if (c == "%") {
            if (iBytes >= 2) {
                sOut += llGetSubString(sStr, j, j+2);
                j += 2;
                iBytes -= 2;
            }
        } else if (iBytes >= 1) {
            sOut += c;
            iBytes --;
        }
    }
    return llUnescapeURL(sOut);
}

list PrettyButtons(list lOptions, list lUtilityButtons, list iPagebuttons) { /|/returns a list formatted to that "options" will start in the top left of a dialog, and "utilitybuttons" will start in the bottom right
    list lSpacers;
    list lCombined = lOptions + lUtilityButtons + iPagebuttons;
    while (llGetListLength(lCombined) % 3 != 0 && llGetListLength(lCombined) < 12) {
        lSpacers += [BLANK];
        lCombined = lOptions + lSpacers + lUtilityButtons + iPagebuttons;
    }
    /|/ check if a UPBUTTON is present and remove it for the moment
    integer u = llListFindList(lCombined, [UPMENU]);
    if (~u) lCombined = llDeleteSubList(lCombined, u, u);

    list lOut = llList2List(lCombined, 9, 11);
    lOut += llList2List(lCombined, 6, 8);
    lOut += llList2List(lCombined, 3, 5);
    lOut += llList2List(lCombined, 0, 2);
    /|/make sure we move UPMENU to the lower right corner
    if (~u) lOut = llListInsertList(lOut, [UPMENU], 2);

    return lOut;
}

RemoveMenuStride(integer iIndex)  {     /|/fixme:  duplicates entire global lMenu list
    /|/tell this function the menu you wish to remove, identified by list index
    /|/it will close the listener, remove the menu's entry from the list, and return the new list
    /|/should be called in the listen event, and on menu timeout
    integer iListener = llList2Integer(g_lMenus, iIndex + 2);
    llListenRemove(iListener);
    g_lMenus=llDeleteSubList(g_lMenus, iIndex, iIndex + g_iStrideLength - 1);
}

CleanList() {
    /|/Debug("cleaning list");
    /|/loop through menus and remove any whose timeouts are in the past
    /|/start at end of list and loop down so that indices don't get messed up as we remove items
    integer iLength = llGetListLength(g_lMenus);
    integer n;
    integer iNow = llGetUnixTime();
    for (n = iLength - g_iStrideLength; n >= 0; n -= g_iStrideLength) {
        integer iDieTime = llList2Integer(g_lMenus, n + 3);
        /|/Debug("dietime: " + (string)iDieTime);
        if (iNow > iDieTime) {
            /|/Debug("menu timeout");
            key kID = llList2Key(g_lMenus, n + 1);
            llMessageLinked(LINK_ALL_OTHERS, DIALOG_TIMEOUT, "", kID);
            RemoveMenuStride(n);
        }
    }
    if (g_iSensorTimeout>iNow){ /|/sensor took too long to return.  Ignore it, and do the next in the list
        g_lSensorDetails=llDeleteSubList(g_lSensorDetails,0,3);
        if (llGetListLength(g_lSensorDetails)>0) dequeueSensor();
    }
}

ClearUser(key kRCPT) {
    /|/find any strides belonging to user and remove them
    integer iIndex = llListFindList(g_lMenus, [kRCPT]);
    while (~iIndex) {
        /|/Debug("removed stride for " + (string)kRCPT);
        RemoveMenuStride(iIndex -4);
        /|/g_lMenus = llDeleteSubList(g_lMenus, iIndex - 4, iIndex - 5 + g_iStrideLength);
        iIndex = llListFindList(g_lMenus, [kRCPT]);
    }
    /|/Debug(llDumpList2String(g_lMenus, ","));
}

UserCommand(integer iNum, string sStr, key kID) {
    if (iNum == CMD_GROUP) return;
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,sensor,17,12,28,108");
    }
    list lParams = llParseString2List(llToLower(sStr), ["="], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if (sToken == SPAMSWITCH) {/|/ add/rem user to verbose=off list
        integer i = llListFindList(MRSBUN, [kID]);
        if (sValue == "off") {
            if (~i) return; /|/ already in list
            MRSBUN += [kID];
            Notify(kID,"Verbose Feature activated for you.",FALSE);
        } else if (~i) {
            MRSBUN = llDeleteSubList(MRSBUN, i, i);
            Notify(kID,"Verbose Feature de-activated for you.",FALSE);
        } else return; /|/ not in list to start with
        if (!llGetListLength(MRSBUN)) llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + SPAMSWITCH, "");
        else llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + SPAMSWITCH + "=" + llList2CSV(MRSBUN), "");
    }
}

dequeueSensor() {
    /|/get sStr of first set of sensor details, unpack it and run the apropriate sensor
    /|/Debug((string)llGetListLength(g_lSensorDetails));
    list lParams = llParseStringKeepNulls(llList2String(g_lSensorDetails,2), ["|"], []);
    /|/sensor information is encoded in the first 5 fields of the lButtons list, ready to feed to the sensor command,
    list lSensorInfo = llParseStringKeepNulls(llList2String(lParams, 3), ["`"], []);
  /|*  Debug("Running sensor with\n"+
        llList2String(lSensorInfo,0)+"\n"+
        llList2String(lSensorInfo,1)+"\n"+
        (string)llList2Integer(lSensorInfo,2)+"\n"+
        (string)llList2Float(lSensorInfo,3)+"\n"+
        (string)llList2Float(lSensorInfo,4)
    );*|/

    if (llList2Integer(lSensorInfo,2) == (integer)AGENT) g_iSelectAviMenu = TRUE;
    else g_iSelectAviMenu = FALSE;
    llSensor(llList2String(lSensorInfo,0),(key)llList2String(lSensorInfo,1),llList2Integer(lSensorInfo,2),llList2Float(lSensorInfo,3),llList2Float(lSensorInfo,4));
    g_iSensorTimeout=llGetUnixTime()+10;
    llSetTimerEvent(g_iReapeat);
}
INIT(){
    g_lMenus=[];
    g_lRemoteMenus=[];
    MRSBUN = [];
    g_lSensorDetails=[];
    g_bSensorLock=0;
    g_iSensorTimeout=0;
    g_iSelectAviMenu=0; 
    g_iColorMenu=0;
    g_kWearer=llGetOwner();

}
default {
    on_rez(integer iParam) {
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }

    state_entry() {
        /|/llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_REQUEST","");
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }

    sensor(integer num_detected){
        /|/get sensot request info from list
        list lSensorInfo=llList2List(g_lSensorDetails,0,3);
        g_lSensorDetails=llDeleteSubList(g_lSensorDetails,0,3);

        list lParams=llParseStringKeepNulls(llList2String(lSensorInfo,2), ["|"], []);
        list lButtons = llParseStringKeepNulls(llList2String(lParams, 3), ["`"], []);
        /|/sensor information is encoded in the first 5 fields of the lButtons list, we've run the sensor so we don't need that now.
        /|/6th field is "find" information
        /|/7th is boolean, 0 for return a dialog, 1 for return the first matching name
        string sFind=llList2String(lButtons,5);
       /|/Debug(sFind);
        integer bReturnFirstMatch=llList2Integer(lButtons,6);
        lButtons=[];
        integer i;
        for (; i<num_detected;++i){
            lButtons += llDetectedKey(i);
            if (bReturnFirstMatch || (sFind != "")) { /|/if we're supposed to be finding the first match,
                if (llSubStringIndex(llToLower(llDetectedName(i)),llToLower(sFind))==0 
                    || llSubStringIndex(llToLower(llGetDisplayName(llDetectedKey(i))),llToLower(sFind))==0 ){ 
                    if (!bReturnFirstMatch) {
                        lButtons = [llDetectedKey(i)];
                        jump next;
                    }
                    llMessageLinked(LINK_ALL_OTHERS, DIALOG_RESPONSE, llList2String(lParams,0) + "|" + (string)llDetectedKey(i)+ "|0|" + llList2String(lParams,5), (key)llList2String(lSensorInfo,3));
                    /|/if we have more sensors to run, run another one now, else unlock subsys and quite
                    if (llGetListLength(g_lSensorDetails) > 0)
                        dequeueSensor();
                    else g_bSensorLock=FALSE;
                    g_iSelectAviMenu = FALSE;
                    return;
                }
                
            }
        }
        @next;
        /|/pack buttons back into a ` delimited list, and put it back into lParams
        string sButtons=llDumpList2String(lButtons,"`");
        lParams=llListReplaceList(lParams,[sButtons],3,3);
        /|/fake fresh dialog call with our new buttons in place, using the rest of the information we were sent
        llMessageLinked(LINK_THIS,DIALOG,llDumpList2String(lParams,"|"),(key)llList2String(lSensorInfo,3));
        /|/if we have more sensors to run, run another one now, else unlock subsys and quite
        if (llGetListLength(g_lSensorDetails) > 0)
            dequeueSensor();
        else g_bSensorLock=FALSE;
    }

    no_sensor() {
        list lSensorInfo=llList2List(g_lSensorDetails,0,3);
        g_lSensorDetails=llDeleteSubList(g_lSensorDetails,0,3);

        list lParams=llParseStringKeepNulls(llList2String(lSensorInfo,2), ["|"], []);
        lParams=llListReplaceList(lParams,[""],3,3);
        /|/fake fresh dialog call with our new buttons in place, using the rest of the information we were sent
        llMessageLinked(LINK_THIS,DIALOG,llDumpList2String(lParams,"|"),(key)llList2String(lSensorInfo,3));
        /|/if we have more sensors to run, run another one now, else unlock subsys and quit
        if (llGetListLength(g_lSensorDetails) > 0)
            dequeueSensor();
        else {
            g_iSelectAviMenu = FALSE;
            g_bSensorLock=FALSE;
        }
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == SENSORDIALOG){
            /|/first, store all incoming parameters in a global sensor details list
            /|/test for locked sensor subsystem
            /|/if subsys locked, do nothing
            /|/if subsys open, run sensor with first set of details in the list, and set timeout
           /|/ Debug(sStr);
            g_lSensorDetails+=[iSender, iNum, sStr, kID];
            if (! g_bSensorLock){
                g_bSensorLock=TRUE;
                dequeueSensor();
            }
        } else if (iNum == DIALOG) {
        /|/give a dialog with the options on the button labels
            /|/str will be pipe-delimited list with rcpt|prompt|page|backtick-delimited-list-buttons|backtick-delimited-utility-buttons|auth
            /|/Debug("DIALOG:"+sStr);
            if (iSender != llGetLinkNumber()) g_iSelectAviMenu = FALSE;
            list lParams = llParseStringKeepNulls(sStr, ["|"], []);
            key kRCPT = llGetOwnerKey((key)llList2String(lParams, 0));
            integer iIndex = llListFindList(g_lRemoteMenus, [kRCPT]);
            if (~iIndex) {
                if (llKey2Name(kRCPT)=="") { /|/if recipient is not in the sim.  Inlined single use InSim(kRCPT) function
                    llHTTPRequest(llList2String(g_lRemoteMenus, iIndex+1), [HTTP_METHOD, "POST"], sStr+"|"+(string)kID);
                    return;
                } else g_lRemoteMenus = llListReplaceList(g_lRemoteMenus, [], iIndex, iIndex+1);
            }
            string sPrompt = llList2String(lParams, 1);
            integer iPage = (integer)llList2String(lParams, 2);
            if (iPage < 0 ) {
                g_iSelectAviMenu = TRUE;
                iPage = 0;
            }
            list lButtons = llParseString2List(llList2String(lParams, 3), ["`"], []);
            if (llList2String(lButtons,0) == "colormenu please") {
                lButtons = llList2ListStrided(g_lColors,0,-1,2);
                g_iColorMenu = TRUE;
            }
            integer iDigits=-1;   /|/iDigits==-1 means Dialog should run idigits on the buttons
            list ubuttons = llParseString2List(llList2String(lParams, 4), ["`"], []);
            integer iAuth = CMD_ZERO;
            if (llGetListLength(lParams)>=6) iAuth = llList2Integer(lParams, 5);
            /|/first clean out any strides already in place for that user. prevents having lots of listens open if someone uses the menu several times while sat
            ClearUser(kRCPT);
            Dialog(kRCPT, sPrompt, lButtons, ubuttons, iPage, kID, iDigits, iAuth,"");
        }
        else if (llGetSubString(sStr, 0, 10) == "remotemenu:") {
           
        }
        else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER) UserCommand(iNum, sStr, kID);
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (sToken == g_sSettingToken + SPAMSWITCH) MRSBUN = llParseString2List(sValue, [","], []);
        } else if (iNum == LOADPIN && (sStr == llGetScriptName()||sStr == llGetScriptName()+"@"+"pin")) {
            integer iPin = (integer)llFrand(99999.0)+1;
            llSetRemoteScriptAccessPin(iPin);
            llMessageLinked(iSender, LOADPIN, (string)iPin+"@"+llGetScriptName(),llGetKey());
        }else if (iNum == LOADPIN && sStr == llGetScriptName()+"@"+"unpin") {
            llSetRemoteScriptAccessPin(0);
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_REQUEST") llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_SENSOR","");
        } 
        else if (iNum == REBOOT && sStr == "reboot") llResetScript();
       
    }

    listen(integer iChan, string sName, key kID, string sMessage) {
        integer iMenuIndex = llListFindList(g_lMenus, [iChan]);
        if (~iMenuIndex) {
            key kMenuID = llList2Key(g_lMenus, iMenuIndex + 1);
            key kAv = llList2Key(g_lMenus, iMenuIndex + 4);
            string sPrompt = llList2String(g_lMenus, iMenuIndex + 5);
            /|/ SA: null strings should not be kept for dialog buttons
            list items = llParseString2List(llList2String(g_lMenus, iMenuIndex + 6), ["|"], []);
            list ubuttons = llParseString2List(llList2String(g_lMenus, iMenuIndex + 7), ["|"], []);
            integer iPage = llList2Integer(g_lMenus, iMenuIndex + 8);
            integer iDigits = llList2Integer(g_lMenus, iMenuIndex + 9);
            integer iAuth = llList2Integer(g_lMenus, iMenuIndex + 10);
            string sExtraInfo = llList2String(g_lMenus, iMenuIndex + 11);

            RemoveMenuStride(iMenuIndex);

            if (sMessage == MORE) Dialog(kID, sPrompt, items, ubuttons, ++iPage, kMenuID, iDigits, iAuth,sExtraInfo);
            else if (sMessage == PREV) Dialog(kID, sPrompt, items, ubuttons, --iPage, kMenuID, iDigits, iAuth, sExtraInfo);
            else if (sMessage == BLANK) Dialog(kID, sPrompt, items, ubuttons, iPage, kMenuID, iDigits, iAuth, sExtraInfo);
            else {
                g_iSelectAviMenu = FALSE;
                string sAnswer;
                integer iIndex = llListFindList(ubuttons, [sMessage]);
                if (iDigits && !~iIndex) {
                    integer iBIndex = (integer) llGetSubString(sMessage, 0, iDigits);
                    sAnswer = llList2String(items, iBIndex);
                } else if (g_iColorMenu) {
                    integer iColorIndex  =llListFindList(llList2ListStrided(g_lColors,0,-1,2),[sMessage]);
                    if (~iColorIndex) sAnswer = llList2String(llList2ListStrided(llDeleteSubList(g_lColors,0,0),0,-1,2),iColorIndex);
                    else sAnswer = sMessage;
                    g_iColorMenu = FALSE;
                } else sAnswer = sMessage;
                if (sAnswer == "") sAnswer = " "; /|/to have an answer to deal with send " "
                llMessageLinked(LINK_ALL_OTHERS, DIALOG_RESPONSE, (string)kAv + "|" + sAnswer + "|" + (string)iPage + "|" + (string)iAuth, kMenuID);
            }
        }
    }

    timer() {
        CleanList();
        /|/if list is empty after that, then stop timer
        if (!llGetListLength(g_lMenus) && !llGetListLength(g_lSensorDetails)) {
            /|/Debug("no active dialogs, stopping timer");
            g_iSelectAviMenu = FALSE;
            llSetTimerEvent(0.0);
        }
    }

    changed(integer iChange){
        if (iChange & CHANGED_OWNER) llResetScript();
    }
}
*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 12/27/2017 23:02:21
//mono





























































integer CMD_ZERO = 0;
integer CMD_OWNER = 500;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;




integer LINK_SAVE = 5;
integer LINK_UPDATE = -10;
integer REBOOT = -1000;
integer LOADPIN = -1904;
integer LM_SETTING_SAVE = 2000;
integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer DIALOG = -9010;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
integer SENSORDIALOG = -9003;

integer NOTIFY = 1002;
integer SAY = 1004;

integer g_iPagesize = 12;
string MORE = "►";
string PREV = "◄";
string UPMENU = "BACK"; 

string BLANK = "-";
integer g_iTimeOut = 300;
integer g_iReapeat = 5;

list g_lMenus;

list g_lRemoteMenus;
integer g_iStrideLength = 12;


list MRSBUN = []; 
string SPAMSWITCH = "verbose"; 

key g_kWearer;
string g_sSettingToken = "dialog_";

list g_lSensorDetails;
integer g_bSensorLock;
integer g_iSensorTimeout;
integer g_iSelectAviMenu; 
integer g_iColorMenu;

list g_lColors = [
"Red",<1.00000, 0.00000, 0.00000>,
"Green",<0.00000, 1.00000, 0.00000>,
"Blue",<0.00000, 0.50196, 1.00000>,
"Yellow",<1.00000, 1.00000, 0.00000>,
"Pink",<1.00000, 0.50588, 0.62353>,
"Brown",<0.24314, 0.14902, 0.07059>,
"Purple",<0.62353, 0.29020, 0.71765>,
"Black",<0.00000, 0.00000, 0.00000>,
"White",<1.00000, 1.00000, 1.00000>,
"Barbie",<0.91373, 0.00000, 0.34510>,
"Orange",<0.96078, 0.60784, 0.00000>,
"Toad",<0.25098, 0.25098, 0.00000>,
"Khaki",<0.62745, 0.50196, 0.38824>,
"Pool",<0.14902, 0.88235, 0.94510>,
"Blood",<0.42353, 0.00000, 0.00000>,
"Gray",<0.70588, 0.70588, 0.70588>,
"Anthracite",<0.08627, 0.08627, 0.08627>,
"Midnight",<0.00000, 0.10588, 0.21176>
];


integer g_iNoLink;
integer BGCOLLAR_CHANNEL_RESPONSE =-667571900;

Say(string sMsg, integer iWhisper) {
    llMessageLinked(LINK_THIS, SAY,(string)iWhisper+sMsg , "");
}

dequeueSensor() {
    
    
    list lParams = llParseStringKeepNulls(llList2String(g_lSensorDetails,2), ["|"], []);
    
    list lSensorInfo = llParseStringKeepNulls(llList2String(lParams, 3), ["`"], []);
  


    if (llList2Integer(lSensorInfo,2) == (integer)AGENT) g_iSelectAviMenu = TRUE;
    else g_iSelectAviMenu = FALSE;
    llSensor(llList2String(lSensorInfo,0),(key)llList2String(lSensorInfo,1),llList2Integer(lSensorInfo,2),llList2Float(lSensorInfo,3),llList2Float(lSensorInfo,4));
    g_iSensorTimeout=llGetUnixTime()+10;
    llSetTimerEvent(g_iReapeat);
}

UserCommand(integer iNum, string sStr, key kID) {
    if (iNum == CMD_GROUP) return;
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(BGCOLLAR_CHANNEL_RESPONSE,"BGVERSION_RESPONSE,sensor,17,12,28,108");
    }
    list lParams = llParseString2List(llToLower(sStr), ["="], []);
    string sToken = llList2String(lParams, 0);
    string sValue = llList2String(lParams, 1);
    if (sToken == SPAMSWITCH) {
        integer i = llListFindList(MRSBUN, [kID]);
        if (sValue == "off") {
            if (~i) return; 
            MRSBUN += [kID];
            Notify(kID,"Verbose Feature activated for you.",FALSE);
        } else if (~i) {
            MRSBUN = llDeleteSubList(MRSBUN, i, i);
            Notify(kID,"Verbose Feature de-activated for you.",FALSE);
        } else return; 
        if (!llGetListLength(MRSBUN)) llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + SPAMSWITCH, "");
        else llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + SPAMSWITCH + "=" + llList2CSV(MRSBUN), "");
    }
}

string TruncateString(string sStr, integer iBytes) {
    sStr = llEscapeURL(sStr);
    integer j = 0;
    string sOut;
    integer l = llStringLength(sStr);
    for (; j < l; ++j) {
        string c = llGetSubString(sStr, j, j);
        if (c == "%") {
            if (iBytes >= 2) {
                sOut += llGetSubString(sStr, j, j+2);
                j += 2;
                iBytes -= 2;
            }
        } else if (iBytes >= 1) {
            sOut += c;
            iBytes --;
        }
    }
    return llUnescapeURL(sOut);
}




string SubstitudeVars(string sMsg) {
    return sMsg;
}

RemoveMenuStride(integer iIndex)  {     
    
    
    
    integer iListener = llList2Integer(g_lMenus, iIndex + 2);
    llListenRemove(iListener);
    g_lMenus=llDeleteSubList(g_lMenus, iIndex, iIndex + g_iStrideLength - 1);
}

list PrettyButtons(list lOptions, list lUtilityButtons, list iPagebuttons) { 
    list lSpacers;
    list lCombined = lOptions + lUtilityButtons + iPagebuttons;
    while (llGetListLength(lCombined) % 3 != 0 && llGetListLength(lCombined) < 12) {
        lSpacers += [BLANK];
        lCombined = lOptions + lSpacers + lUtilityButtons + iPagebuttons;
    }
    
    integer u = llListFindList(lCombined, [UPMENU]);
    if (~u) lCombined = llDeleteSubList(lCombined, u, u);

    list lOut = llList2List(lCombined, 9, 11);
    lOut += llList2List(lCombined, 6, 8);
    lOut += llList2List(lCombined, 3, 5);
    lOut += llList2List(lCombined, 0, 2);
    
    if (~u) lOut = llListInsertList(lOut, [UPMENU], 2);

    return lOut;
}
string Objectscan(key kID){
    list AttachedUUIDs = llGetAttachedList(kID);
    integer numOfAttachments = llGetListLength(AttachedUUIDs);
    integer index=0;
    if((string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_GROUP])!="ce9356ec-47b1-5690-d759-04d8c8921476"){
        return llGetDisplayName(kID);
    }
    while(index<numOfAttachments){
        string name=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_NAME]);
        string creator=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, index) ,[OBJECT_CREATOR]);
        if ((llSubStringIndex(name,"P-6") >= 0)&&llStringLength(name)==7&&creator=="2a9164eb-f402-4319-b7b3-92b09f9b69aa"){
            return name;
        }
        ++index;
    }
    return llGetDisplayName(kID);
}

Notify(key kID, string sMsg, integer iAlsoNotifyWearer) {
     llMessageLinked(LINK_THIS, NOTIFY,(string)iAlsoNotifyWearer+sMsg , kID);
}
string NameURI(key kID){
    if(kID==NULL_KEY){
        return "(null_key)";
    }
    if(g_iNoLink){
        if (llGetAgentSize(kID))
            return Objectscan(kID);
        else 
            return llKey2Name(kID);
    }else{
        if (llGetAgentSize(kID))
            return "[secondlife:///app/agent/"+(string)kID+"/inspect "+llEscapeURL(Objectscan(kID))+"]";
        else
            return "secondlife:///app/objectim/"+(string)kID+"/?name="+llEscapeURL(llKey2Name(kID))+"&owner="+(string)llGetOwnerKey(kID);
    } 
}
INIT(){
    g_lMenus=[];
    g_lRemoteMenus=[];
    MRSBUN = [];
    g_lSensorDetails=[];
    g_bSensorLock=0;
    g_iSensorTimeout=0;
    g_iSelectAviMenu=0; 
    g_iColorMenu=0;
    g_kWearer=llGetOwner();

}

integer GetStringBytes(string sStr) {
    sStr = llEscapeURL(sStr);
    integer l = llStringLength(sStr);
    list lAtoms = llParseStringKeepNulls(sStr, ["%"], []);
    return l - 2 * llGetListLength(lAtoms) + 2;
}


Dialog(key kRecipient, string sPrompt, list lMenuItems, list lUtilityButtons, integer iPage, key kID, integer iWithNums, integer iAuth,string extraInfo)
{
    
    integer iNumitems = llGetListLength(lMenuItems);
    integer iStart = 0;
    integer iMyPageSize = g_iPagesize - llGetListLength(lUtilityButtons);
    if (g_iSelectAviMenu) { 
        iMyPageSize = iMyPageSize-3; 
        if (iNumitems == 8) iMyPageSize = iMyPageSize-1;
        
        else if (iNumitems == 7) iMyPageSize = iMyPageSize-2;
    }
    string sPagerPrompt;
    if (iNumitems > iMyPageSize) {
        iMyPageSize=iMyPageSize-2;

        integer numPages=(iNumitems-1)/iMyPageSize;
        if (iPage>numPages)iPage=0;
        else if (iPage<0) iPage=numPages;

        iStart = iPage * iMyPageSize;
        
        sPagerPrompt = sPagerPrompt + "\nPage "+(string)(iPage+1)+"/"+(string)(numPages+1);
    }
    integer iEnd = iStart + iMyPageSize - 1;
    if (iEnd >= iNumitems) iEnd = iNumitems - 1;
    integer iPagerPromptLen = GetStringBytes(sPagerPrompt);
    

    
    if (iWithNums == -1) {
        integer iNumButtons=llGetListLength(lMenuItems);
        iWithNums=llStringLength((string)iNumButtons);
        
        
        
        while (iNumButtons--) {
            if (GetStringBytes(llList2String(lMenuItems,iNumButtons))>18) {
                jump longButtonName;  
            }
        }
        iWithNums=0;
        @longButtonName;
    }
    
    
    string sNumberedButtons;
    integer iNBPromptlen;
    list lButtons;  
    if (iWithNums) { 
        integer iCur;
        sNumberedButtons="\n"; 
        for (iCur = iStart; iCur <= iEnd; ++iCur) {
            string sButton = llList2String(lMenuItems, iCur);
            if ((key)sButton) {
                
                if (g_iSelectAviMenu) sButton = NameURI((key)sButton);
                else if (llGetDisplayName((key)sButton)) sButton=llGetDisplayName((key)sButton);
                else sButton=llKey2Name((key)sButton);
            }
            
            string sButtonNumber = (string)iCur;

            while (llStringLength(sButtonNumber)<iWithNums)
               sButtonNumber = "0"+sButtonNumber;
            sButton=sButtonNumber + " " + sButton;
            

            sNumberedButtons+=sButton+"\n";
            sButton = TruncateString(sButton, 24);
            if(g_iSelectAviMenu) sButton = sButtonNumber;
            lButtons += [sButton];
        }
        iNBPromptlen=GetStringBytes(sNumberedButtons);
    } else if (iNumitems > iMyPageSize) lButtons = llList2List(lMenuItems, iStart, iEnd);
    else  lButtons = lMenuItems;
    
    sPrompt = SubstitudeVars(sPrompt);
    
    integer iPromptlen=GetStringBytes(sPrompt);
    string sThisPrompt;
    string sThisChat;
    if (iPromptlen + iNBPromptlen + iPagerPromptLen < 512) 
        sThisPrompt = sPrompt + sNumberedButtons + sPagerPrompt ;
    else if (iPromptlen + iPagerPromptLen < 512) { 
        if (iPromptlen + iPagerPromptLen < 459) {
            sThisPrompt = sPrompt + "\nPlease check nearby chat for button descriptions.\n" + sPagerPrompt;
        } else
            sThisPrompt = sPrompt + sPagerPrompt;
        sThisChat = sNumberedButtons;
    } else {  
        sThisPrompt=TruncateString(sPrompt,510-iPagerPromptLen)+sPagerPrompt;
        sThisChat = sPrompt+sNumberedButtons;
    }
    
    
    if (! ~llListFindList(MRSBUN, [kRecipient])){
        integer iRemainingChatLen;
        while (iRemainingChatLen=llStringLength(sThisChat)){ 
            if(iRemainingChatLen<1015) {
                Notify(kRecipient,sThisChat,FALSE); 
                
                sThisChat="";
            } else {
                string sMessageChunk=TruncateString(sPrompt,1015);
                Notify(kRecipient,sMessageChunk,FALSE);
                sThisChat=llGetSubString(sThisChat,llStringLength(sMessageChunk),-1);
            }
        }
    }
    
    integer iChan=llRound(llFrand(10000000)) + 100000;
    while (~llListFindList(g_lMenus, [iChan])) iChan=llRound(llFrand(10000000)) + 100000;
    integer iListener = llListen(iChan, "", kRecipient, "");
    
    llSetLinkPrimitiveParamsFast(LINK_THIS,[PRIM_FULLBRIGHT,ALL_SIDES,TRUE,PRIM_BUMP_SHINY,ALL_SIDES,PRIM_SHINY_NONE,PRIM_BUMP_NONE,PRIM_GLOW,ALL_SIDES,0.4]);
    
    if (llGetListLength(lMenuItems+lUtilityButtons)){
        list lNavButtons;
        if (iNumitems > iMyPageSize) lNavButtons=[PREV,MORE];
        llDialog(kRecipient, sThisPrompt, PrettyButtons(lButtons, lUtilityButtons, lNavButtons), iChan);
    }
    else llTextBox(kRecipient, sThisPrompt, iChan);
    
    llSetLinkPrimitiveParamsFast(LINK_THIS,[PRIM_FULLBRIGHT,ALL_SIDES,FALSE,PRIM_BUMP_SHINY,ALL_SIDES,PRIM_SHINY_HIGH,PRIM_BUMP_NONE,PRIM_GLOW,ALL_SIDES,0.0]);
    
    llSetTimerEvent(g_iReapeat);
    integer ts = llGetUnixTime() + g_iTimeOut;

    
    g_lMenus += [iChan, kID, iListener, ts, kRecipient, sPrompt, llDumpList2String(lMenuItems, "|"), llDumpList2String(lUtilityButtons, "|"), iPage, iWithNums, iAuth,extraInfo];
    
}

ClearUser(key kRCPT) {
    
    integer iIndex = llListFindList(g_lMenus, [kRCPT]);
    while (~iIndex) {
        
        RemoveMenuStride(iIndex -4);
        
        iIndex = llListFindList(g_lMenus, [kRCPT]);
    }
    
}

CleanList() {
    
    
    
    integer iLength = llGetListLength(g_lMenus);
    integer n;
    integer iNow = llGetUnixTime();
    for (n = iLength - g_iStrideLength; n >= 0; n -= g_iStrideLength) {
        integer iDieTime = llList2Integer(g_lMenus, n + 3);
        
        if (iNow > iDieTime) {
            
            key kID = llList2Key(g_lMenus, n + 1);
            llMessageLinked(LINK_ALL_OTHERS, DIALOG_TIMEOUT, "", kID);
            RemoveMenuStride(n);
        }
    }
    if (g_iSensorTimeout>iNow){ 
        g_lSensorDetails=llDeleteSubList(g_lSensorDetails,0,3);
        if (llGetListLength(g_lSensorDetails)>0) dequeueSensor();
    }
}
default {
    on_rez(integer iParam) {
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }

    state_entry() {
        
        INIT();
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
    }

    sensor(integer num_detected){
        
        list lSensorInfo=llList2List(g_lSensorDetails,0,3);
        g_lSensorDetails=llDeleteSubList(g_lSensorDetails,0,3);

        list lParams=llParseStringKeepNulls(llList2String(lSensorInfo,2), ["|"], []);
        list lButtons = llParseStringKeepNulls(llList2String(lParams, 3), ["`"], []);
        
        
        
        string sFind=llList2String(lButtons,5);
       
        integer bReturnFirstMatch=llList2Integer(lButtons,6);
        lButtons=[];
        integer i;
        for (; i<num_detected;++i){
            lButtons += llDetectedKey(i);
            if (bReturnFirstMatch || (sFind != "")) { 
                if (llSubStringIndex(llToLower(llDetectedName(i)),llToLower(sFind))==0 
                    || llSubStringIndex(llToLower(llGetDisplayName(llDetectedKey(i))),llToLower(sFind))==0 ){ 
                    if (!bReturnFirstMatch) {
                        lButtons = [llDetectedKey(i)];
                        jump next;
                    }
                    llMessageLinked(LINK_ALL_OTHERS, DIALOG_RESPONSE, llList2String(lParams,0) + "|" + (string)llDetectedKey(i)+ "|0|" + llList2String(lParams,5), (key)llList2String(lSensorInfo,3));
                    
                    if (llGetListLength(g_lSensorDetails) > 0)
                        dequeueSensor();
                    else g_bSensorLock=FALSE;
                    g_iSelectAviMenu = FALSE;
                    return;
                }
                
            }
        }
        @next;
        
        string sButtons=llDumpList2String(lButtons,"`");
        lParams=llListReplaceList(lParams,[sButtons],3,3);
        
        llMessageLinked(LINK_THIS,DIALOG,llDumpList2String(lParams,"|"),(key)llList2String(lSensorInfo,3));
        
        if (llGetListLength(g_lSensorDetails) > 0)
            dequeueSensor();
        else g_bSensorLock=FALSE;
    }

    no_sensor() {
        list lSensorInfo=llList2List(g_lSensorDetails,0,3);
        g_lSensorDetails=llDeleteSubList(g_lSensorDetails,0,3);

        list lParams=llParseStringKeepNulls(llList2String(lSensorInfo,2), ["|"], []);
        lParams=llListReplaceList(lParams,[""],3,3);
        
        llMessageLinked(LINK_THIS,DIALOG,llDumpList2String(lParams,"|"),(key)llList2String(lSensorInfo,3));
        
        if (llGetListLength(g_lSensorDetails) > 0)
            dequeueSensor();
        else {
            g_iSelectAviMenu = FALSE;
            g_bSensorLock=FALSE;
        }
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == SENSORDIALOG){
            
            
            
            
           
            g_lSensorDetails+=[iSender, iNum, sStr, kID];
            if (! g_bSensorLock){
                g_bSensorLock=TRUE;
                dequeueSensor();
            }
        } else if (iNum == DIALOG) {
        
            
            
            if (iSender != llGetLinkNumber()) g_iSelectAviMenu = FALSE;
            list lParams = llParseStringKeepNulls(sStr, ["|"], []);
            key kRCPT = llGetOwnerKey((key)llList2String(lParams, 0));
            integer iIndex = llListFindList(g_lRemoteMenus, [kRCPT]);
            if (~iIndex) {
                if (llKey2Name(kRCPT)=="") { 
                    llHTTPRequest(llList2String(g_lRemoteMenus, iIndex+1), [HTTP_METHOD, "POST"], sStr+"|"+(string)kID);
                    return;
                } else g_lRemoteMenus = llListReplaceList(g_lRemoteMenus, [], iIndex, iIndex+1);
            }
            string sPrompt = llList2String(lParams, 1);
            integer iPage = (integer)llList2String(lParams, 2);
            if (iPage < 0 ) {
                g_iSelectAviMenu = TRUE;
                iPage = 0;
            }
            list lButtons = llParseString2List(llList2String(lParams, 3), ["`"], []);
            if (llList2String(lButtons,0) == "colormenu please") {
                lButtons = llList2ListStrided(g_lColors,0,-1,2);
                g_iColorMenu = TRUE;
            }
            integer iDigits=-1;   
            list ubuttons = llParseString2List(llList2String(lParams, 4), ["`"], []);
            integer iAuth = CMD_ZERO;
            if (llGetListLength(lParams)>=6) iAuth = llList2Integer(lParams, 5);
            
            ClearUser(kRCPT);
            Dialog(kRCPT, sPrompt, lButtons, ubuttons, iPage, kID, iDigits, iAuth,"");
        }
        else if (llGetSubString(sStr, 0, 10) == "remotemenu:") {
           
        }
        else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER) UserCommand(iNum, sStr, kID);
        else if (iNum == LM_SETTING_RESPONSE) {
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            if (sToken == g_sSettingToken + SPAMSWITCH) MRSBUN = llParseString2List(sValue, [","], []);
        } else if (iNum == LOADPIN && (sStr == llGetScriptName()||sStr == llGetScriptName()+"@"+"pin")) {
            integer iPin = (integer)llFrand(99999.0)+1;
            llSetRemoteScriptAccessPin(iPin);
            llMessageLinked(iSender, LOADPIN, (string)iPin+"@"+llGetScriptName(),llGetKey());
        }else if (iNum == LOADPIN && sStr == llGetScriptName()+"@"+"unpin") {
            llSetRemoteScriptAccessPin(0);
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_REQUEST") llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_SENSOR","");
        } 
        else if (iNum == REBOOT && sStr == "reboot") llResetScript();
       
    }

    listen(integer iChan, string sName, key kID, string sMessage) {
        integer iMenuIndex = llListFindList(g_lMenus, [iChan]);
        if (~iMenuIndex) {
            key kMenuID = llList2Key(g_lMenus, iMenuIndex + 1);
            key kAv = llList2Key(g_lMenus, iMenuIndex + 4);
            string sPrompt = llList2String(g_lMenus, iMenuIndex + 5);
            
            list items = llParseString2List(llList2String(g_lMenus, iMenuIndex + 6), ["|"], []);
            list ubuttons = llParseString2List(llList2String(g_lMenus, iMenuIndex + 7), ["|"], []);
            integer iPage = llList2Integer(g_lMenus, iMenuIndex + 8);
            integer iDigits = llList2Integer(g_lMenus, iMenuIndex + 9);
            integer iAuth = llList2Integer(g_lMenus, iMenuIndex + 10);
            string sExtraInfo = llList2String(g_lMenus, iMenuIndex + 11);

            RemoveMenuStride(iMenuIndex);

            if (sMessage == MORE) Dialog(kID, sPrompt, items, ubuttons, ++iPage, kMenuID, iDigits, iAuth,sExtraInfo);
            else if (sMessage == PREV) Dialog(kID, sPrompt, items, ubuttons, --iPage, kMenuID, iDigits, iAuth, sExtraInfo);
            else if (sMessage == BLANK) Dialog(kID, sPrompt, items, ubuttons, iPage, kMenuID, iDigits, iAuth, sExtraInfo);
            else {
                g_iSelectAviMenu = FALSE;
                string sAnswer;
                integer iIndex = llListFindList(ubuttons, [sMessage]);
                if (iDigits && !~iIndex) {
                    integer iBIndex = (integer) llGetSubString(sMessage, 0, iDigits);
                    sAnswer = llList2String(items, iBIndex);
                } else if (g_iColorMenu) {
                    integer iColorIndex  =llListFindList(llList2ListStrided(g_lColors,0,-1,2),[sMessage]);
                    if (~iColorIndex) sAnswer = llList2String(llList2ListStrided(llDeleteSubList(g_lColors,0,0),0,-1,2),iColorIndex);
                    else sAnswer = sMessage;
                    g_iColorMenu = FALSE;
                } else sAnswer = sMessage;
                if (sAnswer == "") sAnswer = " "; 
                llMessageLinked(LINK_ALL_OTHERS, DIALOG_RESPONSE, (string)kAv + "|" + sAnswer + "|" + (string)iPage + "|" + (string)iAuth, kMenuID);
            }
        }
    }

    timer() {
        CleanList();
        
        if (!llGetListLength(g_lMenus) && !llGetListLength(g_lSensorDetails)) {
            
            g_iSelectAviMenu = FALSE;
            llSetTimerEvent(0.0);
        }
    }

    changed(integer iChange){
        if (iChange & CHANGED_OWNER) llResetScript();
    }
}

