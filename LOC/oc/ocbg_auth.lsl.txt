//start_unprocessed_text
/*/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/
/|/                                                                         /|/
/|/             ____                   ______      ____                     /|/
/|/            / __ \____  ___  ____  / ____/___  / / /___ ______           /|/
/|/           / / / / __ \/ _ \/ __ \/ /   / __ \/ / / __ `/ ___/           /|/
/|/          / /_/ / /_/ /  __/ / / / /___/ /_/ / / / /_/ / /               /|/
/|/          \____/ .___/\___/_/ /_/\____/\____/_/_/\__,_/_/                /|/
/|/              /_/                                                        /|/
/|/                                                                         /|/
/|/                       ,^~~~-.         .-~~~"-.                          /|/
/|/                      :  .--. \       /  .--.  \                         /|/
/|/                      : (    .-`<^~~~-: :    )  :                        /|/
/|/                      `. `-,~            ^- '  .'                        /|/
/|/                        `-:                ,.-~                          /|/
/|/                         .'                  `.                          /|/
/|/                        ,'   @   @            |                          /|/
/|/                        :    __               ;                          /|/
/|/                     ...{   (__)          ,----.                         /|/
/|/                    /   `.              ,' ,--. `.                       /|/
/|/                   |      `.,___   ,      :    : :                       /|/
/|/                   |     .'    ~~~~       \    / :                       /|/
/|/                    \.. /               `. `--' .'                       /|/
/|/                       |                  ~----~                         /|/
/|/                         Authorizer - 161030.1                           /|/

/|/------------------------------------------------------------------------ /|/
/|/ Copyright (c) 2008 - 2016 Nandana Singh, Garvin Twine, Cleo Collins,    /|/
/|/ Satomi Ahn, Master Starship, Sei Lisa, Joy Stipe, Wendy Starfall,       /|/
/|/ Medea Destiny, littlemousy, Romka Swallowtail, Sumi Perl et al.         /|/
/|/------------------------------------------------------------------------ /|/
/|/ This script is free software: you can redistribute it and/or modify     /|/
/|/ it under the terms of the GNU General Public License as published       /|/
/|/ by the Free Software Foundation, version 2.                             /|/
/|/                                                                         /|/
/|/ This script is distributed in the hope that it will be useful,          /|/
/|/ but WITHOUT ANY WARRANTY; without even the implied warranty of          /|/
/|/ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            /|/
/|/ GNU General Public License for more details.                            /|/
/|/                                                                         /|/
/|/ You should have received a copy of the GNU General Public License       /|/
/|/ along with this script; if not, see www.gnu.org/licenses/gpl-2.0        /|/
/|/------------------------------------------------------------------------ /|/
/|/ This script and any derivatives based on it must remain "full perms".   /|/
/|/                                                                         /|/
/|/ "Full perms" means maintaining MODIFY, COPY, and TRANSFER permissions   /|/
/|/ in Second Life(R), OpenSimulator and the Metaverse.                     /|/
/|/                                                                         /|/
/|/ If these platforms should allow more fine-grained permissions in the    /|/
/|/ future, then "full perms" will mean the most permissive possible set    /|/
/|/ of permissions allowed by the platform.                                 /|/
/|/------------------------------------------------------------------------ /|/
/|/      github.com/VirtualDisgrace/opencollar/tree/master/src/collar       /|/
/|/------------------------------------------------------------------------ /|/
/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/|/


string g_sWearerID;

list g_lOwner;
list g_lTrust;
list g_lBlock;
list g_lTempOwner;

key g_kGroup ;
string g_sGroupName;
integer g_iGroupEnabled = FALSE;


list g_lOwnerGroup;
list g_lTrustGroup;
list g_lSpecialGroup;

string g_sParentMenu = "Main";
string g_sSubMenu = "Access";
integer g_iRunawayDisable=0;

list g_lQueryId; 
integer g_iQueryStride=5;


integer CMD_ZERO = 0;
integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
integer CMD_EVERYONE = 504;
integer CMD_BLOCKED = 520;
integer BGCOLLAR_AUTORIZATION = 66757190066;
integer BGCOLLAR_AUTORIZATION_REPORT = -66757190066;


integer NOTIFY = 1002;
integer NOTIFY_OWNERS = 1003;
integer LOADPIN = -1904;
integer REBOOT              = -1000;
integer LINK_DIALOG         = 3;
integer LINK_RLV            = 4;
integer LINK_SAVE           = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;

integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer RLV_CMD = 6000;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
integer SENSORDIALOG = -9003;

integer AUTH_REQUEST = 600;
integer AUTH_REPLY = 601;
string UPMENU = "BACK";

integer g_iOpenAccess; 
integer g_iLimitRange=1; 
integer g_iVanilla; 
string g_sFlavor = "Vanilla";

list g_lMenuIDs;
integer g_iMenuStride = 3;

integer g_iFirstRun;

string g_sSettingToken = "auth_";
string g_sGlobalToken = "global_";

integer iMood;
integer g_iReport;
string GroupURI(string sID){
    return "secondlife:/|/|/app/group/"+sID+"/about";
}

Print_GroupNames(string sToken, list group, key kID){
        integer i;
        list Names;

        while (i < llGetListLength(group) )
        {
           Names += [GroupURI(llList2Key(group,i))];
            ++i;
        }
         llMessageLinked(LINK_DIALOG,NOTIFY,"0"+" "+sToken+" Group:"+llDumpList2String(Names, ";"),kID);
        
}

string NameURI(string sID){
    return "secondlife:/|/|/app/agent/"+sID+"/about";
}

string BG_Offices="dd7ff140-9039-9116-4801-1f378af1a002";
string BG_Renter="900e67b1-5c64-7eb2-bdef-bc8c04582122";
string BG_Guard="b3947eb2-4151-bd6d-8c63-da967677bc69";
string BG_Inmate="ce9356ec-47b1-5690-d759-04d8c8921476";
setBGGroups(){
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "ownergroup" + "=" +  BG_Offices+","+BG_Renter, "");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "ownergroup" + "=" + BG_Offices+","+BG_Renter, "");
    
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "trustgroup" + "=" + BG_Guard,"");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "trustgroup" + "=" + BG_Guard, "");
    
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "specialgroup" + "=" + BG_Inmate, "");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "specialgroup" + "=" +BG_Inmate,"");
}

init(){
        g_sWearerID = llGetOwner();
        g_lQueryId=[]; 
        g_iQueryStride=5;
        g_lMenuIDs=[];
        g_iMenuStride = 3;
        
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
        else g_iFirstRun = TRUE;
        
        setBGGroups(); 
}

integer in_range(key kID) {
    if (g_iLimitRange) {
        if (llVecDist(llGetPos(), llList2Vector(llGetObjectDetails(kID, [OBJECT_POS]), 0)) > 20) 
            return FALSE;
    }
    return TRUE;
}

UserCommand(integer iNum, string sStr, key kID, integer iRemenu) { 
   
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(-667571900,"BGVERSION_RESPONSE,auth,17,11,06,109");
         return;
    }
    if (llSubStringIndex(llToLower(sStr),"menu report")==0||llSubStringIndex(llToLower(sStr),"report")==0) {
        if(kID!=g_sWearerID&&CMD_OWNER!=iNum){
            return;
        }
        g_iReport=!g_iReport;
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE, g_sGlobalToken+"report="+(string)g_iReport,"");
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE, g_sGlobalToken+"report="+(string)g_iReport,"");
        if(g_iReport){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar Report Turned On.",g_sWearerID);
        }else{
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar Report Turned Off.",g_sWearerID);
        }
        return;
    }
    string sMessage = llToLower(sStr);
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llToLower(llList2String(lParams, 0));
    string sAction = llToLower(llList2String(lParams, 1));
    if (sStr == "menu "+g_sSubMenu) AuthMenu(kID, iNum);
    else if (sStr == "list") {   
        if (iNum == CMD_OWNER || kID == g_sWearerID ||iNum ==CMD_TRUSTED || g_iOpenAccess==1) {
            
            integer iLength = llGetListLength(g_lOwner);
            string sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lOwner, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Owners: "+sOutput,kID);
            else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Owners: none",kID);
            iLength = llGetListLength(g_lTempOwner);
            sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lTempOwner, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Temporary Owner: "+sOutput,kID);
            iLength = llGetListLength(g_lTrust);
            sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lTrust, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Trusted: "+sOutput,kID);
            iLength = llGetListLength(g_lBlock);
            sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lBlock, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Blocked: "+sOutput,kID);
            if (g_kGroup) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Group: secondlife:/|/|/app/group/"+(string)g_kGroup+"/about",kID);
            sOutput="closed";
            if (g_iOpenAccess) sOutput="open";
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Public Access: "+ sOutput,kID);
            Print_GroupNames("Owner ", g_lOwnerGroup,kID);
            Print_GroupNames("Trusted ", g_lTrustGroup,kID);
            Print_GroupNames("", g_lSpecialGroup,kID);
        }
        else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, iNum);
    } else if (sCommand == "vanilla" || sCommand == llToLower(g_sFlavor)) {
        if(iNum==CMD_OWNER||kID==g_sWearerID){
            if (sAction == "on") {
                g_iVanilla = TRUE;
            } else if (sAction == "off") {
                g_iVanilla = FALSE;
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%", kID);
         if (iRemenu) AuthMenu(kID, iNum);
    } else if (sMessage == "owners" || sMessage == "access") {   
        AuthMenu(kID, iNum);
    } else if (sCommand == "owner" && iRemenu==FALSE) { 
        AuthMenu(kID, iNum);
    } else if (sCommand == "add") { 
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"This function was removed from the Authorizer.", kID);
    } else if (sCommand == "remove" || sCommand == "rm") { 
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"This function was removed from the Authorizer.", kID);
     } else if (sCommand == "group") {
         if (iNum==CMD_OWNER||kID==g_sWearerID){
             if (sAction == "on") {
                
                if ((key)(llList2String(lParams, -1))) g_kGroup = (key)llList2String(lParams, -1);
                else g_kGroup = (key)llList2String(llGetObjectDetails(llGetKey(), [OBJECT_GROUP]), 0); 
    
                if (g_kGroup != "") {
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "group=" + (string)g_kGroup, "");
                    g_iGroupEnabled = TRUE;
                    
                    key kGroupHTTPID = llHTTPRequest("http:/|/world.secondlife.com/group/" + (string)g_kGroup, [], "");
                    g_lQueryId+=[kGroupHTTPID,"","group", kID, FALSE];
                    llMessageLinked(LINK_RLV, RLV_CMD, "setgroup=n", "auth");
                }
            } else if (sAction == "off") {
                g_kGroup = "";
                g_sGroupName = "";
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "group", "");
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "groupname", "");
                g_iGroupEnabled = FALSE;
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Group unset.",kID);
                llMessageLinked(LINK_RLV, RLV_CMD, "setgroup=y", "auth");
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    } else if (sCommand == "set" && sAction == "groupname") {
        if (iNum==CMD_OWNER||kID==g_sWearerID){
            g_sGroupName = llDumpList2String(llList2List(lParams, 2, -1), " ");
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "groupname=" + g_sGroupName, "");
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
    } else if (sCommand == "public") {
        if (iNum==CMD_OWNER||kID==g_sWearerID){
            if (sAction == "on") {
                g_iOpenAccess = TRUE;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your %DEVICETYPE% is open to the public.",kID);
            } else if (sAction == "off") {
                g_iOpenAccess = FALSE;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your %DEVICETYPE% is closed to the public.",kID);
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    } else if (sCommand == "limitrange") {
        if (iNum==CMD_OWNER||kID==g_sWearerID){
            if (sAction == "on") {
                g_iLimitRange = TRUE;
                
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "limitrange", "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Public access range is limited.",kID);
            } else if (sAction == "off") {
                g_iLimitRange = FALSE;
                
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "limitrange=" + (string) g_iLimitRange, "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Public access range is simwide.",kID);
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    } else if (sMessage == "runaway"){
      
        if (kID == g_sWearerID){  
            if (g_iRunawayDisable)
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
            else {
                Dialog(kID, "\nDo you really want to run away from all owners?", ["Yes", "No"], [UPMENU], 0, iNum, "runawayMenu",FALSE);
                return;
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    }else if (sCommand == "flavor") {
        if (kID != g_sWearerID) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        else if (sAction) {
            g_sFlavor = llGetSubString(sStr,7,15);
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"\n\nYour new flavor is \""+g_sFlavor+"\".\n",kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSettingToken+"flavor="+g_sFlavor,"");
        } else 
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"\n\nYour current flavor is \""+g_sFlavor+"\".\n\nTo set a new flavor type \"/%CHANNEL% %PREFIX% flavor MyFlavor\". Flavors must be single names and can only be a maximum of 9 characters.\n",kID);
    }
}

SayOwners() {  
    integer iCount = llGetListLength(g_lOwner);
    if (iCount) {
        list lTemp = g_lOwner;
        integer index = llListFindList(lTemp, [g_sWearerID]);
        
        if (~index) lTemp = llDeleteSubList(lTemp,index,index) + [g_sWearerID];
        string sMsg = "You belong to ";
        if (iCount == 1) {
            if (llList2Key(lTemp,0)==g_sWearerID)
                sMsg += "yourself.";
            else
                sMsg += NameURI(llList2String(lTemp,0))+".";
        } else if (iCount == 2) {
            sMsg +=  NameURI(llList2String(lTemp,0))+" and ";
            if (llList2String(lTemp,1)==g_sWearerID)
                sMsg += "yourself.";
            else
                sMsg += NameURI(llList2Key(lTemp,1))+".";
        } else {
            index=0;
            do {
                sMsg += NameURI(llList2String(lTemp,index))+", ";
                ++index;
            } while (index<iCount-1);
            if (llList2String(lTemp,index) == g_sWearerID)
                sMsg += "and yourself.";
            else
                sMsg += "and "+NameURI(llList2String(lTemp,index))+".";
        }
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sMsg,g_sWearerID);
 
    }
}

RunAway() {
    llMessageLinked(LINK_DIALOG,NOTIFY_OWNERS,"%WEARERNAME% ran away!","");
    llMessageLinked(LINK_ALL_OTHERS, LM_SETTING_RESPONSE, g_sSettingToken + "owner=", "");
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "owner", "");
    llMessageLinked(LINK_ALL_OTHERS, LM_SETTING_RESPONSE, g_sSettingToken + "tempowner=", "");    
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "tempowner", "");
    
    llMessageLinked(LINK_ALL_OTHERS, CMD_OWNER, "clear", g_sWearerID);
    llMessageLinked(LINK_ALL_OTHERS, CMD_OWNER, "runaway", g_sWearerID); 
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Runaway finished.",g_sWearerID);
    llResetScript();
}
ReportWearer(key kID, integer iAuth, integer iBG){
    if(kID){
        if((string)llGetOwnerKey(kID)==g_sWearerID){
            return;
        }
        if(g_iReport&&iBG!=1&&CMD_OWNER==iAuth){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar was interacted by:"+NameURI(kID),g_sWearerID);
        }else
        if(g_iReport&&CMD_TRUSTED<=iAuth&&iAuth<=CMD_EVERYONE){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar was interacted by:"+NameURI(kID),g_sWearerID);
        }
    }
}
Report(key kID, integer iAuth, string sStr){
    if(kID){
        if((string)llGetOwnerKey(kID)==g_sWearerID){
            return;
        }
        if(CMD_TRUSTED<=iAuth&&iAuth<=CMD_EVERYONE&&sStr!=""){
            llRegionSay(BGCOLLAR_AUTORIZATION_REPORT,g_sWearerID+"|"+(string)kID+"|"+(string)iAuth+"|"+sStr);
        }
    }
}

Dialog(string sID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName, integer iSensor) {
    key kMenuID = llGenerateKey();
    if (iSensor)
        llMessageLinked(LINK_DIALOG, SENSORDIALOG, sID +"|"+sPrompt+"|0|``"+(string)AGENT+"`10`"+(string)PI+"`"+llList2String(lChoices,0)+"|"+llDumpList2String(lUtilityButtons, "`")+"|" + (string)iAuth, kMenuID);
    else
        llMessageLinked(LINK_DIALOG, DIALOG, sID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [sID]);
    if (~iIndex) { 
        g_lMenuIDs = llListReplaceList(g_lMenuIDs, [sID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    } else { 
        g_lMenuIDs += [sID, kMenuID, sName];
    }
}

AuthMenu(key kAv, integer iAuth) {
    string sPrompt = "\n[http:/|/www.opencollar.at/access.html Access & Authorization]";
    list lButtons = ["-", "-", "-", "-", "-", "-"];

    if (g_kGroup=="") lButtons += ["Group ☐"];    
    else lButtons += ["Group ☑"];    
    if (g_iOpenAccess) lButtons += ["Public ☑"];    
    else lButtons += ["Public ☐"];    
    if (g_iVanilla) lButtons += g_sFlavor+" ☑";    
    else lButtons += g_sFlavor+" ☐";    

    lButtons += ["Runaway","Access List"];
    Dialog(kAv, sPrompt, lButtons, [UPMENU], 0, iAuth, "Auth",FALSE);
}

integer Auth_Groups(string id, integer BG){
    integer iNum=CMD_ZERO;
    string groupkey=NULL_KEY;
    string oid=(string)llGetOwnerKey(id);
    
    if (oid==id){
        list AttachedUUIDs = llGetAttachedList(id);
        groupkey=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, 0) ,[OBJECT_GROUP]);
    }else{
        groupkey=(string)llGetObjectDetails(id,[OBJECT_GROUP]);
    }  
    if(groupkey==(string)NULL_KEY){
        iNum=CMD_EVERYONE;
        if(oid==g_sWearerID&&iMood==0){
            iNum=CMD_WEARER;    
        }
        iNum;
    }else
    if (~llListFindList(g_lOwnerGroup, [groupkey])){
        if(BG||groupkey==BG_Offices){
            iNum=CMD_OWNER;
        }else{
            iNum=CMD_TRUSTED;
        }
    }else
    if(~llListFindList(g_lTrustGroup, [groupkey])){
        iNum=CMD_TRUSTED;
    }else
    if (~llListFindList(g_lSpecialGroup, [groupkey])){
        iNum= CMD_GROUP;
    }
    return iNum;
}
integer Auth(string sObjID, integer iAttachment, integer BG) {
    string sID = (string)llGetOwnerKey(sObjID); 
    integer iNum;
    if (~llListFindList(g_lOwner+g_lTempOwner, [sID]))
        iNum = CMD_OWNER;
    else if (~llListFindList(g_lBlock, [sID]))
         return CMD_BLOCKED;
    else if (~llListFindList(g_lTrust, [sID]))
        iNum = CMD_TRUSTED;
    else if (sID == g_sWearerID)
        iNum = CMD_WEARER;
    else {
        if (g_iOpenAccess)
             iNum = CMD_EVERYONE;
        if (g_iGroupEnabled && (string)llGetObjectDetails((key)sObjID, [OBJECT_GROUP]) == (string)g_kGroup && (key)sID != g_sWearerID)  
            iNum = CMD_GROUP;
        else if (llSameGroup(sID) && g_iGroupEnabled && sID != g_sWearerID) {
            if (in_range((key)sID))
                iNum = CMD_GROUP;    
        }
    }
    
    integer iNum_tmp=Auth_Groups(sObjID,BG); 
    if(iNum_tmp>=CMD_OWNER&&iNum_tmp<=CMD_EVERYONE){ 
        if(iNum>iNum_tmp){
            iNum=iNum_tmp;
        }else
        if((iNum<CMD_OWNER||iNum>CMD_EVERYONE)&&iNum!=CMD_BLOCKED)
        {
            if(iNum_tmp==CMD_EVERYONE&&g_iOpenAccess==0){
                iNum=CMD_BLOCKED;
            }else{
                iNum=iNum_tmp;
            }
        } 
    }

    if(g_iVanilla==1&&sID==g_sWearerID){
        iNum=CMD_OWNER;
    }
    else if(sID==g_sWearerID&&sObjID!=sID&&llList2Integer(llGetObjectDetails(sObjID,[OBJECT_ATTACHED_POINT]),0)<=0&&iNum!=CMD_OWNER){ 
        iNum=CMD_TRUSTED;
    }
    else if(sID==g_sWearerID&&(iNum<CMD_OWNER||iNum>CMD_WEARER)){
        iNum=CMD_WEARER;
    }else
    if(sID!=sObjID&&(sID=="284ba63f-378b-4be6-84d9-10db6ae48b8d"||sID=="d543a836-a606-4b23-8e97-2038939a309f")&&llList2Integer(llGetObjectDetails(sObjID,[OBJECT_ATTACHED_POINT]),0)<=0&&iNum!=CMD_OWNER){
        iNum=CMD_OWNER;
    }else
    if(iNum==CMD_ZERO){
        return CMD_BLOCKED;
    }
    
    ReportWearer(sObjID,iNum,BG);
    return iNum;
}


default {
    on_rez(integer iParam) {
        init();
    }

    state_entry() {
        init();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == CMD_ZERO||iNum==BGCOLLAR_AUTORIZATION) { 
            
            llSetTimerEvent(0.22);
            integer iAuth =CMD_ZERO;
            if(iNum==BGCOLLAR_AUTORIZATION){
                 iAuth = Auth(kID, FALSE,TRUE);
            }else{
                iAuth = Auth(kID, FALSE,FALSE);
            }
           
            if ( kID == g_sWearerID && sStr == "runaway") {   
                if (g_iRunawayDisable)
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Runaway is currently disabled.",g_sWearerID);
                else
                    UserCommand(iAuth,"runaway",kID, FALSE);
            } else if (iAuth == CMD_OWNER && sStr == "runaway")
                UserCommand(iAuth, "runaway", kID, FALSE);
            else {
                llMessageLinked(LINK_SET, iAuth, sStr, kID);
                Report(kID,iAuth, sStr);
            }
            
            return; 
        } else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER)
            UserCommand(iNum, sStr, kID, FALSE);
        else if (iNum == LM_SETTING_RESPONSE) {
            
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            integer i = llSubStringIndex(sToken, "_");
            if (llGetSubString(sToken, 0, i) == g_sGlobalToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "moodvalue") {
                    iMood=(integer)sValue;
                }
                else if (sToken == "report"){
                    g_iReport=(integer)sValue ;
                }                 
            }else 
            if (llGetSubString(sToken, 0, i) == g_sSettingToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "owner") {
                    g_lOwner = llParseString2List(sValue, [","], []);
                } else if (sToken == "tempowner")
                    g_lTempOwner = llParseString2List(sValue, [","], []);
                    
                else if (sToken == "group") {
                    g_kGroup = (key)sValue;
                    
                    if (g_kGroup != "") {
                        if ((key)llList2String(llGetObjectDetails(llGetKey(), [OBJECT_GROUP]), 0) == g_kGroup) g_iGroupEnabled = TRUE;
                        else g_iGroupEnabled = FALSE;
                    } else g_iGroupEnabled = FALSE;
                }
                else if (sToken == "groupname") g_sGroupName = sValue;
                else if (sToken == "public") g_iOpenAccess = (integer)sValue;
                else if (sToken == "limitrange") g_iLimitRange = (integer)sValue;
                else if (sToken == "norun") g_iRunawayDisable = (integer)sValue;
                else if (sToken == "trust") g_lTrust = llParseString2List(sValue, [","], [""]);
                else if (sToken == "block") g_lBlock = llParseString2List(sValue, [","], [""]);
                else if (sToken == "flavor") g_sFlavor = sValue;
                else if (sToken == "ownergroup") {g_lOwnerGroup= llParseString2List(sValue, [","], [""]); }
                else if (sToken == "trustgroup") {g_lTrustGroup= llParseString2List(sValue, [","], [""]); }
                else if (sToken == "specialgroup") {g_lSpecialGroup = llParseString2List(sValue, [","], [""]); }
            } else if (llToLower(sStr) == "settings=sent") {
                setBGGroups();
                if (llGetListLength(g_lOwner) && g_iFirstRun) {
                    SayOwners();
                    g_iFirstRun = FALSE;
                }
            }
        } else if (iNum == AUTH_REQUEST) {
            
            llSetTimerEvent(0.22);
            llMessageLinked(iSender,AUTH_REPLY, "AuthReply|"+(string)kID+"|"+(string)Auth(kID, TRUE,FALSE), llGetSubString(sStr,0,35));
        } else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                
                llSetTimerEvent(0.22);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAv = (key)llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                string sMenu=llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                
                if (sMenu == "Auth") {
                    if (sMessage == UPMENU)
                        llMessageLinked(LINK_ALL_OTHERS, iAuth, "menu " + g_sParentMenu, kAv);
                    else {
                        list lTranslation=[
                            "Group ☐","group on",
                            "Group ☑","group off",
                            "Public ☐","public on",
                            "Public ☑","public off",
                            g_sFlavor+" ☐","vanilla on",
                            g_sFlavor+" ☑","vanilla off",
                            "Access List","list",
                            "Runaway","runaway"
                          ];
                        integer buttonIndex=llListFindList(lTranslation,[sMessage]);
                        if (~buttonIndex)
                            sMessage=llList2String(lTranslation,buttonIndex+1);
                        
                        UserCommand(iAuth, sMessage, kAv, TRUE);
                    }
                }else if (sMenu == "runawayMenu" ) {   
                    if (sMessage == "Yes") RunAway();
                    else if (sMessage == UPMENU) AuthMenu(kAv, iAuth);
                    else if (sMessage == "No") llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Runaway aborted.",kAv);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
        } else if (iNum == LOADPIN && (sStr == llGetScriptName()||sStr == llGetScriptName()+"@"+"pin")) {
            integer iPin = (integer)llFrand(99999.0)+1;
            llSetRemoteScriptAccessPin(iPin);
            llMessageLinked(iSender, LOADPIN, (string)iPin+"@"+llGetScriptName(),llGetKey());
        } else if (iNum == LOADPIN && sStr == llGetScriptName()+"@"+"unpin") {
            llSetRemoteScriptAccessPin(0);
        } else if (iNum == LOADPIN && sStr == llGetScriptName()+"@"+"move") {
            integer count = llGetInventoryNumber(INVENTORY_SCRIPT);  /|/ Count of all items in prim's contents
            string  ItemName;
            while (count--){
                ItemName = llGetInventoryName(INVENTORY_SCRIPT, count);
                if (ItemName == "ocbg_agentmanage" ){
                    llRemoveInventory("ocbg_agentmanage");
                    count = llGetInventoryNumber(INVENTORY_SCRIPT);
                }
                if (ItemName == "ocbg_groupscan" ){
                    llRemoveInventory("ocbg_groupscan");
                    count = llGetInventoryNumber(INVENTORY_SCRIPT);
                }
                
            }
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_REQUEST") llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_AUTH","");
        } else if (iNum == REBOOT && sStr == "reboot"){
            llResetScript();
        }
  
    }

    http_response(key kQueryId, integer iStatus, list lMeta, string sBody) { 
        integer listIndex=llListFindList(g_lQueryId,[kQueryId]);
        if (~listIndex){
            key g_kDialoger=llList2Key(g_lQueryId,listIndex+3);
            g_lQueryId=llDeleteSubList(g_lQueryId,listIndex,listIndex+g_iQueryStride-1);

            g_sGroupName = "(group name hidden)";
            if (iStatus == 200) {
                integer iPos = llSubStringIndex(sBody, "<title>");
                integer iPos2 = llSubStringIndex(sBody, "</title>");
                if ((~iPos) 
                    && iPos2 > iPos 
                    && iPos2 <= iPos + 43 
                    && !~llSubStringIndex(sBody, "AccessDenied") 
                    ) {
                    g_sGroupName = llGetSubString(sBody, iPos + 7, iPos2 - 1);
                }
            }
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Group set to " + g_sGroupName + ".",g_kDialoger);
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "groupname=" + g_sGroupName, "");
        }
    }

    
    timer () {
        
        llSetTimerEvent(0.0);
    }
    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) llResetScript();
    }

}

*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 5.0.7.52912 - redhuskycjr17
//last_compiled 11/05/2017 21:16:45
//mono




























































string g_sWearerID;

list g_lOwner;
list g_lTrust;
list g_lBlock;
list g_lTempOwner;

key g_kGroup ;
string g_sGroupName;
integer g_iGroupEnabled = FALSE;


list g_lOwnerGroup;
list g_lTrustGroup;
list g_lSpecialGroup;

string g_sParentMenu = "Main";
string g_sSubMenu = "Access";
integer g_iRunawayDisable=0;

list g_lQueryId; 
integer g_iQueryStride=5;


integer CMD_ZERO = 0;
integer CMD_OWNER = 500;
integer CMD_TRUSTED = 501;
integer CMD_GROUP = 502;
integer CMD_WEARER = 503;
integer CMD_EVERYONE = 504;
integer CMD_BLOCKED = 520;
integer BGCOLLAR_AUTORIZATION = 66757190066;
integer BGCOLLAR_AUTORIZATION_REPORT = -66757190066;


integer NOTIFY = 1002;
integer NOTIFY_OWNERS = 1003;
integer LOADPIN = -1904;
integer REBOOT              = -1000;
integer LINK_DIALOG         = 3;
integer LINK_RLV            = 4;
integer LINK_SAVE           = 5;
integer LINK_UPDATE = -10;
integer LM_SETTING_SAVE = 2000;

integer LM_SETTING_RESPONSE = 2002;
integer LM_SETTING_DELETE = 2003;

integer RLV_CMD = 6000;

integer DIALOG = -9000;
integer DIALOG_RESPONSE = -9001;
integer DIALOG_TIMEOUT = -9002;
integer SENSORDIALOG = -9003;

integer AUTH_REQUEST = 600;
integer AUTH_REPLY = 601;
string UPMENU = "BACK";

integer g_iOpenAccess; 
integer g_iLimitRange=1; 
integer g_iVanilla; 
string g_sFlavor = "Vanilla";

list g_lMenuIDs;
integer g_iMenuStride = 3;

integer g_iFirstRun;

string g_sSettingToken = "auth_";
string g_sGlobalToken = "global_";

integer iMood;
integer g_iReport;

string BG_Offices="dd7ff140-9039-9116-4801-1f378af1a002";
string BG_Renter="900e67b1-5c64-7eb2-bdef-bc8c04582122";
string BG_Guard="b3947eb2-4151-bd6d-8c63-da967677bc69";
string BG_Inmate="ce9356ec-47b1-5690-d759-04d8c8921476";
string GroupURI(string sID){
    return "secondlife:///app/group/"+sID+"/about";
}

Print_GroupNames(string sToken, list group, key kID){
        integer i;
        list Names;

        while (i < llGetListLength(group) )
        {
           Names += [GroupURI(llList2Key(group,i))];
            ++i;
        }
         llMessageLinked(LINK_DIALOG,NOTIFY,"0"+" "+sToken+" Group:"+llDumpList2String(Names, ";"),kID);
        
}

string NameURI(string sID){
    return "secondlife:///app/agent/"+sID+"/about";
}
setBGGroups(){
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "ownergroup" + "=" +  BG_Offices+","+BG_Renter, "");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "ownergroup" + "=" + BG_Offices+","+BG_Renter, "");
    
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "trustgroup" + "=" + BG_Guard,"");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "trustgroup" + "=" + BG_Guard, "");
    
    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "specialgroup" + "=" + BG_Inmate, "");
    llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "specialgroup" + "=" +BG_Inmate,"");
}

init(){
        g_sWearerID = llGetOwner();
        g_lQueryId=[]; 
        g_iQueryStride=5;
        g_lMenuIDs=[];
        g_iMenuStride = 3;
        
        if (llGetStartParameter()==825) llSetRemoteScriptAccessPin(0);
        else g_iFirstRun = TRUE;
        
        setBGGroups(); 
}

integer in_range(key kID) {
    if (g_iLimitRange) {
        if (llVecDist(llGetPos(), llList2Vector(llGetObjectDetails(kID, [OBJECT_POS]), 0)) > 20) 
            return FALSE;
    }
    return TRUE;
}

UserCommand(integer iNum, string sStr, key kID, integer iRemenu) { 
   
    if(llToLower(sStr)=="bgversion"){
        llRegionSay(-667571900,"BGVERSION_RESPONSE,auth,17,11,06,109");
         return;
    }
    if (llSubStringIndex(llToLower(sStr),"menu report")==0||llSubStringIndex(llToLower(sStr),"report")==0) {
        if(kID!=g_sWearerID&&CMD_OWNER!=iNum){
            return;
        }
        g_iReport=!g_iReport;
        llMessageLinked(LINK_SET,LM_SETTING_RESPONSE, g_sGlobalToken+"report="+(string)g_iReport,"");
        llMessageLinked(LINK_SAVE,LM_SETTING_SAVE, g_sGlobalToken+"report="+(string)g_iReport,"");
        if(g_iReport){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar Report Turned On.",g_sWearerID);
        }else{
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar Report Turned Off.",g_sWearerID);
        }
        return;
    }
    string sMessage = llToLower(sStr);
    list lParams = llParseString2List(sStr, [" "], []);
    string sCommand = llToLower(llList2String(lParams, 0));
    string sAction = llToLower(llList2String(lParams, 1));
    if (sStr == "menu "+g_sSubMenu) AuthMenu(kID, iNum);
    else if (sStr == "list") {   
        if (iNum == CMD_OWNER || kID == g_sWearerID ||iNum ==CMD_TRUSTED || g_iOpenAccess==1) {
            
            integer iLength = llGetListLength(g_lOwner);
            string sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lOwner, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Owners: "+sOutput,kID);
            else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Owners: none",kID);
            iLength = llGetListLength(g_lTempOwner);
            sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lTempOwner, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Temporary Owner: "+sOutput,kID);
            iLength = llGetListLength(g_lTrust);
            sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lTrust, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Trusted: "+sOutput,kID);
            iLength = llGetListLength(g_lBlock);
            sOutput="";
            while (iLength)
                sOutput += "\n" + NameURI(llList2String(g_lBlock, --iLength));
            if (sOutput) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Blocked: "+sOutput,kID);
            if (g_kGroup) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Group: secondlife:///app/group/"+(string)g_kGroup+"/about",kID);
            sOutput="closed";
            if (g_iOpenAccess) sOutput="open";
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Public Access: "+ sOutput,kID);
            Print_GroupNames("Owner ", g_lOwnerGroup,kID);
            Print_GroupNames("Trusted ", g_lTrustGroup,kID);
            Print_GroupNames("", g_lSpecialGroup,kID);
        }
        else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, iNum);
    } else if (sCommand == "vanilla" || sCommand == llToLower(g_sFlavor)) {
        if(iNum==CMD_OWNER||kID==g_sWearerID){
            if (sAction == "on") {
                g_iVanilla = TRUE;
            } else if (sAction == "off") {
                g_iVanilla = FALSE;
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%", kID);
         if (iRemenu) AuthMenu(kID, iNum);
    } else if (sMessage == "owners" || sMessage == "access") {   
        AuthMenu(kID, iNum);
    } else if (sCommand == "owner" && iRemenu==FALSE) { 
        AuthMenu(kID, iNum);
    } else if (sCommand == "add") { 
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"This function was removed from the Authorizer.", kID);
    } else if (sCommand == "remove" || sCommand == "rm") { 
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"This function was removed from the Authorizer.", kID);
     } else if (sCommand == "group") {
         if (iNum==CMD_OWNER||kID==g_sWearerID){
             if (sAction == "on") {
                
                if ((key)(llList2String(lParams, -1))) g_kGroup = (key)llList2String(lParams, -1);
                else g_kGroup = (key)llList2String(llGetObjectDetails(llGetKey(), [OBJECT_GROUP]), 0); 
    
                if (g_kGroup != "") {
                    llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "group=" + (string)g_kGroup, "");
                    g_iGroupEnabled = TRUE;
                    
                    key kGroupHTTPID = llHTTPRequest("http://world.secondlife.com/group/" + (string)g_kGroup, [], "");
                    g_lQueryId+=[kGroupHTTPID,"","group", kID, FALSE];
                    llMessageLinked(LINK_RLV, RLV_CMD, "setgroup=n", "auth");
                }
            } else if (sAction == "off") {
                g_kGroup = "";
                g_sGroupName = "";
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "group", "");
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "groupname", "");
                g_iGroupEnabled = FALSE;
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Group unset.",kID);
                llMessageLinked(LINK_RLV, RLV_CMD, "setgroup=y", "auth");
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    } else if (sCommand == "set" && sAction == "groupname") {
        if (iNum==CMD_OWNER||kID==g_sWearerID){
            g_sGroupName = llDumpList2String(llList2List(lParams, 2, -1), " ");
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "groupname=" + g_sGroupName, "");
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
    } else if (sCommand == "public") {
        if (iNum==CMD_OWNER||kID==g_sWearerID){
            if (sAction == "on") {
                g_iOpenAccess = TRUE;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your %DEVICETYPE% is open to the public.",kID);
            } else if (sAction == "off") {
                g_iOpenAccess = FALSE;
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_SET, LM_SETTING_RESPONSE, g_sSettingToken + "public=" + (string) g_iOpenAccess, "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Your %DEVICETYPE% is closed to the public.",kID);
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    } else if (sCommand == "limitrange") {
        if (iNum==CMD_OWNER||kID==g_sWearerID){
            if (sAction == "on") {
                g_iLimitRange = TRUE;
                
                llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "limitrange", "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Public access range is limited.",kID);
            } else if (sAction == "off") {
                g_iLimitRange = FALSE;
                
                llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "limitrange=" + (string) g_iLimitRange, "");
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Public access range is simwide.",kID);
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    } else if (sMessage == "runaway"){
      
        if (kID == g_sWearerID){  
            if (g_iRunawayDisable)
                llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
            else {
                Dialog(kID, "\nDo you really want to run away from all owners?", ["Yes", "No"], [UPMENU], 0, iNum, "runawayMenu",FALSE);
                return;
            }
        } else llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        if (iRemenu) AuthMenu(kID, Auth(kID,FALSE,FALSE));
    }else if (sCommand == "flavor") {
        if (kID != g_sWearerID) llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"%NOACCESS%",kID);
        else if (sAction) {
            g_sFlavor = llGetSubString(sStr,7,15);
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"\n\nYour new flavor is \""+g_sFlavor+"\".\n",kID);
            llMessageLinked(LINK_SAVE,LM_SETTING_SAVE,g_sSettingToken+"flavor="+g_sFlavor,"");
        } else 
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"\n\nYour current flavor is \""+g_sFlavor+"\".\n\nTo set a new flavor type \"/%CHANNEL% %PREFIX% flavor MyFlavor\". Flavors must be single names and can only be a maximum of 9 characters.\n",kID);
    }
}

SayOwners() {  
    integer iCount = llGetListLength(g_lOwner);
    if (iCount) {
        list lTemp = g_lOwner;
        integer index = llListFindList(lTemp, [g_sWearerID]);
        
        if (~index) lTemp = llDeleteSubList(lTemp,index,index) + [g_sWearerID];
        string sMsg = "You belong to ";
        if (iCount == 1) {
            if (llList2Key(lTemp,0)==g_sWearerID)
                sMsg += "yourself.";
            else
                sMsg += NameURI(llList2String(lTemp,0))+".";
        } else if (iCount == 2) {
            sMsg +=  NameURI(llList2String(lTemp,0))+" and ";
            if (llList2String(lTemp,1)==g_sWearerID)
                sMsg += "yourself.";
            else
                sMsg += NameURI(llList2Key(lTemp,1))+".";
        } else {
            index=0;
            do {
                sMsg += NameURI(llList2String(lTemp,index))+", ";
                ++index;
            } while (index<iCount-1);
            if (llList2String(lTemp,index) == g_sWearerID)
                sMsg += "and yourself.";
            else
                sMsg += "and "+NameURI(llList2String(lTemp,index))+".";
        }
        llMessageLinked(LINK_DIALOG,NOTIFY,"0"+sMsg,g_sWearerID);
 
    }
}

RunAway() {
    llMessageLinked(LINK_DIALOG,NOTIFY_OWNERS,"%WEARERNAME% ran away!","");
    llMessageLinked(LINK_ALL_OTHERS, LM_SETTING_RESPONSE, g_sSettingToken + "owner=", "");
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "owner", "");
    llMessageLinked(LINK_ALL_OTHERS, LM_SETTING_RESPONSE, g_sSettingToken + "tempowner=", "");    
    llMessageLinked(LINK_SAVE, LM_SETTING_DELETE, g_sSettingToken + "tempowner", "");
    
    llMessageLinked(LINK_ALL_OTHERS, CMD_OWNER, "clear", g_sWearerID);
    llMessageLinked(LINK_ALL_OTHERS, CMD_OWNER, "runaway", g_sWearerID); 
    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Runaway finished.",g_sWearerID);
    llResetScript();
}
ReportWearer(key kID, integer iAuth, integer iBG){
    if(kID){
        if((string)llGetOwnerKey(kID)==g_sWearerID){
            return;
        }
        if(g_iReport&&iBG!=1&&CMD_OWNER==iAuth){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar was interacted by:"+NameURI(kID),g_sWearerID);
        }else
        if(g_iReport&&CMD_TRUSTED<=iAuth&&iAuth<=CMD_EVERYONE){
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Collar was interacted by:"+NameURI(kID),g_sWearerID);
        }
    }
}
Report(key kID, integer iAuth, string sStr){
    if(kID){
        if((string)llGetOwnerKey(kID)==g_sWearerID){
            return;
        }
        if(CMD_TRUSTED<=iAuth&&iAuth<=CMD_EVERYONE&&sStr!=""){
            llRegionSay(BGCOLLAR_AUTORIZATION_REPORT,g_sWearerID+"|"+(string)kID+"|"+(string)iAuth+"|"+sStr);
        }
    }
}

Dialog(string sID, string sPrompt, list lChoices, list lUtilityButtons, integer iPage, integer iAuth, string sName, integer iSensor) {
    key kMenuID = llGenerateKey();
    if (iSensor)
        llMessageLinked(LINK_DIALOG, SENSORDIALOG, sID +"|"+sPrompt+"|0|``"+(string)AGENT+"`10`"+(string)PI+"`"+llList2String(lChoices,0)+"|"+llDumpList2String(lUtilityButtons, "`")+"|" + (string)iAuth, kMenuID);
    else
        llMessageLinked(LINK_DIALOG, DIALOG, sID + "|" + sPrompt + "|" + (string)iPage + "|" + llDumpList2String(lChoices, "`") + "|" + llDumpList2String(lUtilityButtons, "`") + "|" + (string)iAuth, kMenuID);

    integer iIndex = llListFindList(g_lMenuIDs, [sID]);
    if (~iIndex) { 
        g_lMenuIDs = llListReplaceList(g_lMenuIDs, [sID, kMenuID, sName], iIndex, iIndex + g_iMenuStride - 1);
    } else { 
        g_lMenuIDs += [sID, kMenuID, sName];
    }
}

integer Auth_Groups(string id, integer BG){
    integer iNum=CMD_ZERO;
    string groupkey=NULL_KEY;
    string oid=(string)llGetOwnerKey(id);
    
    if (oid==id){
        list AttachedUUIDs = llGetAttachedList(id);
        groupkey=(string)llGetObjectDetails((key)llList2String(AttachedUUIDs, 0) ,[OBJECT_GROUP]);
    }else{
        groupkey=(string)llGetObjectDetails(id,[OBJECT_GROUP]);
    }  
    if(groupkey==(string)NULL_KEY){
        iNum=CMD_EVERYONE;
        if(oid==g_sWearerID&&iMood==0){
            iNum=CMD_WEARER;    
        }
        iNum;
    }else
    if (~llListFindList(g_lOwnerGroup, [groupkey])){
        if(BG||groupkey==BG_Offices){
            iNum=CMD_OWNER;
        }else{
            iNum=CMD_TRUSTED;
        }
    }else
    if(~llListFindList(g_lTrustGroup, [groupkey])){
        iNum=CMD_TRUSTED;
    }else
    if (~llListFindList(g_lSpecialGroup, [groupkey])){
        iNum= CMD_GROUP;
    }
    return iNum;
}

AuthMenu(key kAv, integer iAuth) {
    string sPrompt = "\n[http://www.opencollar.at/access.html Access & Authorization]";
    list lButtons = ["-", "-", "-", "-", "-", "-"];

    if (g_kGroup=="") lButtons += ["Group ☐"];    
    else lButtons += ["Group ☑"];    
    if (g_iOpenAccess) lButtons += ["Public ☑"];    
    else lButtons += ["Public ☐"];    
    if (g_iVanilla) lButtons += g_sFlavor+" ☑";    
    else lButtons += g_sFlavor+" ☐";    

    lButtons += ["Runaway","Access List"];
    Dialog(kAv, sPrompt, lButtons, [UPMENU], 0, iAuth, "Auth",FALSE);
}
integer Auth(string sObjID, integer iAttachment, integer BG) {
    string sID = (string)llGetOwnerKey(sObjID); 
    integer iNum;
    if (~llListFindList(g_lOwner+g_lTempOwner, [sID]))
        iNum = CMD_OWNER;
    else if (~llListFindList(g_lBlock, [sID]))
         return CMD_BLOCKED;
    else if (~llListFindList(g_lTrust, [sID]))
        iNum = CMD_TRUSTED;
    else if (sID == g_sWearerID)
        iNum = CMD_WEARER;
    else {
        if (g_iOpenAccess)
             iNum = CMD_EVERYONE;
        if (g_iGroupEnabled && (string)llGetObjectDetails((key)sObjID, [OBJECT_GROUP]) == (string)g_kGroup && (key)sID != g_sWearerID)  
            iNum = CMD_GROUP;
        else if (llSameGroup(sID) && g_iGroupEnabled && sID != g_sWearerID) {
            if (in_range((key)sID))
                iNum = CMD_GROUP;    
        }
    }
    
    integer iNum_tmp=Auth_Groups(sObjID,BG); 
    if(iNum_tmp>=CMD_OWNER&&iNum_tmp<=CMD_EVERYONE){ 
        if(iNum>iNum_tmp){
            iNum=iNum_tmp;
        }else
        if((iNum<CMD_OWNER||iNum>CMD_EVERYONE)&&iNum!=CMD_BLOCKED)
        {
            if(iNum_tmp==CMD_EVERYONE&&g_iOpenAccess==0){
                iNum=CMD_BLOCKED;
            }else{
                iNum=iNum_tmp;
            }
        } 
    }

    if(g_iVanilla==1&&sID==g_sWearerID){
        iNum=CMD_OWNER;
    }
    else if(sID==g_sWearerID&&sObjID!=sID&&llList2Integer(llGetObjectDetails(sObjID,[OBJECT_ATTACHED_POINT]),0)<=0&&iNum!=CMD_OWNER){ 
        iNum=CMD_TRUSTED;
    }
    else if(sID==g_sWearerID&&(iNum<CMD_OWNER||iNum>CMD_WEARER)){
        iNum=CMD_WEARER;
    }else
    if(sID!=sObjID&&(sID=="284ba63f-378b-4be6-84d9-10db6ae48b8d"||sID=="d543a836-a606-4b23-8e97-2038939a309f")&&llList2Integer(llGetObjectDetails(sObjID,[OBJECT_ATTACHED_POINT]),0)<=0&&iNum!=CMD_OWNER){
        iNum=CMD_OWNER;
    }else
    if(iNum==CMD_ZERO){
        return CMD_BLOCKED;
    }
    
    ReportWearer(sObjID,iNum,BG);
    return iNum;
}


default {
    on_rez(integer iParam) {
        init();
    }

    state_entry() {
        init();
    }

    link_message(integer iSender, integer iNum, string sStr, key kID) {
        if (iNum == CMD_ZERO||iNum==BGCOLLAR_AUTORIZATION) { 
            
            llSetTimerEvent(0.22);
            integer iAuth =CMD_ZERO;
            if(iNum==BGCOLLAR_AUTORIZATION){
                 iAuth = Auth(kID, FALSE,TRUE);
            }else{
                iAuth = Auth(kID, FALSE,FALSE);
            }
           
            if ( kID == g_sWearerID && sStr == "runaway") {   
                if (g_iRunawayDisable)
                    llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Runaway is currently disabled.",g_sWearerID);
                else
                    UserCommand(iAuth,"runaway",kID, FALSE);
            } else if (iAuth == CMD_OWNER && sStr == "runaway")
                UserCommand(iAuth, "runaway", kID, FALSE);
            else {
                llMessageLinked(LINK_SET, iAuth, sStr, kID);
                Report(kID,iAuth, sStr);
            }
            
            return; 
        } else if (iNum >= CMD_OWNER && iNum <= CMD_WEARER)
            UserCommand(iNum, sStr, kID, FALSE);
        else if (iNum == LM_SETTING_RESPONSE) {
            
            list lParams = llParseString2List(sStr, ["="], []);
            string sToken = llList2String(lParams, 0);
            string sValue = llList2String(lParams, 1);
            integer i = llSubStringIndex(sToken, "_");
            if (llGetSubString(sToken, 0, i) == g_sGlobalToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "moodvalue") {
                    iMood=(integer)sValue;
                }
                else if (sToken == "report"){
                    g_iReport=(integer)sValue ;
                }                 
            }else 
            if (llGetSubString(sToken, 0, i) == g_sSettingToken) {
                sToken = llGetSubString(sToken, i + 1, -1);
                if (sToken == "owner") {
                    g_lOwner = llParseString2List(sValue, [","], []);
                } else if (sToken == "tempowner")
                    g_lTempOwner = llParseString2List(sValue, [","], []);
                    
                else if (sToken == "group") {
                    g_kGroup = (key)sValue;
                    
                    if (g_kGroup != "") {
                        if ((key)llList2String(llGetObjectDetails(llGetKey(), [OBJECT_GROUP]), 0) == g_kGroup) g_iGroupEnabled = TRUE;
                        else g_iGroupEnabled = FALSE;
                    } else g_iGroupEnabled = FALSE;
                }
                else if (sToken == "groupname") g_sGroupName = sValue;
                else if (sToken == "public") g_iOpenAccess = (integer)sValue;
                else if (sToken == "limitrange") g_iLimitRange = (integer)sValue;
                else if (sToken == "norun") g_iRunawayDisable = (integer)sValue;
                else if (sToken == "trust") g_lTrust = llParseString2List(sValue, [","], [""]);
                else if (sToken == "block") g_lBlock = llParseString2List(sValue, [","], [""]);
                else if (sToken == "flavor") g_sFlavor = sValue;
                else if (sToken == "ownergroup") {g_lOwnerGroup= llParseString2List(sValue, [","], [""]); }
                else if (sToken == "trustgroup") {g_lTrustGroup= llParseString2List(sValue, [","], [""]); }
                else if (sToken == "specialgroup") {g_lSpecialGroup = llParseString2List(sValue, [","], [""]); }
            } else if (llToLower(sStr) == "settings=sent") {
                setBGGroups();
                if (llGetListLength(g_lOwner) && g_iFirstRun) {
                    SayOwners();
                    g_iFirstRun = FALSE;
                }
            }
        } else if (iNum == AUTH_REQUEST) {
            
            llSetTimerEvent(0.22);
            llMessageLinked(iSender,AUTH_REPLY, "AuthReply|"+(string)kID+"|"+(string)Auth(kID, TRUE,FALSE), llGetSubString(sStr,0,35));
        } else if (iNum == DIALOG_RESPONSE) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            if (~iMenuIndex) {
                
                llSetTimerEvent(0.22);
                list lMenuParams = llParseString2List(sStr, ["|"], []);
                key kAv = (key)llList2String(lMenuParams, 0);
                string sMessage = llList2String(lMenuParams, 1);
                integer iPage = (integer)llList2String(lMenuParams, 2);
                integer iAuth = (integer)llList2String(lMenuParams, 3);
                string sMenu=llList2String(g_lMenuIDs, iMenuIndex + 1);
                g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
                
                if (sMenu == "Auth") {
                    if (sMessage == UPMENU)
                        llMessageLinked(LINK_ALL_OTHERS, iAuth, "menu " + g_sParentMenu, kAv);
                    else {
                        list lTranslation=[
                            "Group ☐","group on",
                            "Group ☑","group off",
                            "Public ☐","public on",
                            "Public ☑","public off",
                            g_sFlavor+" ☐","vanilla on",
                            g_sFlavor+" ☑","vanilla off",
                            "Access List","list",
                            "Runaway","runaway"
                          ];
                        integer buttonIndex=llListFindList(lTranslation,[sMessage]);
                        if (~buttonIndex)
                            sMessage=llList2String(lTranslation,buttonIndex+1);
                        
                        UserCommand(iAuth, sMessage, kAv, TRUE);
                    }
                }else if (sMenu == "runawayMenu" ) {   
                    if (sMessage == "Yes") RunAway();
                    else if (sMessage == UPMENU) AuthMenu(kAv, iAuth);
                    else if (sMessage == "No") llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Runaway aborted.",kAv);
                }
            }
        } else if (iNum == DIALOG_TIMEOUT) {
            integer iMenuIndex = llListFindList(g_lMenuIDs, [kID]);
            g_lMenuIDs = llDeleteSubList(g_lMenuIDs, iMenuIndex - 1, iMenuIndex - 2 + g_iMenuStride);
        } else if (iNum == LOADPIN && (sStr == llGetScriptName()||sStr == llGetScriptName()+"@"+"pin")) {
            integer iPin = (integer)llFrand(99999.0)+1;
            llSetRemoteScriptAccessPin(iPin);
            llMessageLinked(iSender, LOADPIN, (string)iPin+"@"+llGetScriptName(),llGetKey());
        } else if (iNum == LOADPIN && sStr == llGetScriptName()+"@"+"unpin") {
            llSetRemoteScriptAccessPin(0);
        } else if (iNum == LOADPIN && sStr == llGetScriptName()+"@"+"move") {
            integer count = llGetInventoryNumber(INVENTORY_SCRIPT);  
            string  ItemName;
            while (count--){
                ItemName = llGetInventoryName(INVENTORY_SCRIPT, count);
                if (ItemName == "ocbg_agentmanage" ){
                    llRemoveInventory("ocbg_agentmanage");
                    count = llGetInventoryNumber(INVENTORY_SCRIPT);
                }
                if (ItemName == "ocbg_groupscan" ){
                    llRemoveInventory("ocbg_groupscan");
                    count = llGetInventoryNumber(INVENTORY_SCRIPT);
                }
                
            }
        } else if (iNum == LINK_UPDATE) {
            if (sStr == "LINK_DIALOG") LINK_DIALOG = iSender;
            else if (sStr == "LINK_RLV") LINK_RLV = iSender;
            else if (sStr == "LINK_SAVE") LINK_SAVE = iSender;
            else if (sStr == "LINK_REQUEST") llMessageLinked(LINK_ALL_OTHERS,LINK_UPDATE,"LINK_AUTH","");
        } else if (iNum == REBOOT && sStr == "reboot"){
            llResetScript();
        }
  
    }

    http_response(key kQueryId, integer iStatus, list lMeta, string sBody) { 
        integer listIndex=llListFindList(g_lQueryId,[kQueryId]);
        if (~listIndex){
            key g_kDialoger=llList2Key(g_lQueryId,listIndex+3);
            g_lQueryId=llDeleteSubList(g_lQueryId,listIndex,listIndex+g_iQueryStride-1);

            g_sGroupName = "(group name hidden)";
            if (iStatus == 200) {
                integer iPos = llSubStringIndex(sBody, "<title>");
                integer iPos2 = llSubStringIndex(sBody, "</title>");
                if ((~iPos) 
                    && iPos2 > iPos 
                    && iPos2 <= iPos + 43 
                    && !~llSubStringIndex(sBody, "AccessDenied") 
                    ) {
                    g_sGroupName = llGetSubString(sBody, iPos + 7, iPos2 - 1);
                }
            }
            llMessageLinked(LINK_DIALOG,NOTIFY,"0"+"Group set to " + g_sGroupName + ".",g_kDialoger);
            llMessageLinked(LINK_SAVE, LM_SETTING_SAVE, g_sSettingToken + "groupname=" + g_sGroupName, "");
        }
    }

    
    timer () {
        
        llSetTimerEvent(0.0);
    }
    changed(integer iChange) {
        if (iChange & CHANGED_OWNER) llResetScript();
    }

}


